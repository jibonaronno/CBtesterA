
CBtesterA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a8  0800a4a8  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b0  0800a4b0  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800a4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3ac  20000174  0800a62c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b520  0800a62c  0002b520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157e4  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f9  00000000  00000000  00035a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00039308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  0003a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a657  00000000  00000000  0003b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018744  00000000  00000000  00055b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009adee  00000000  00000000  0006e25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054c4  00000000  00000000  0010904c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3dc 	.word	0x0800a3dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800a3dc 	.word	0x0800a3dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <kalman_filter>:
static int kalman_adc_int = 0;

uint8_t  trip1 = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <kalman_filter+0xe0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <kalman_filter+0xe4>)
 80005ae:	ed93 7a00 	vldr	s14, [r3]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <kalman_filter+0xe8>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <kalman_filter+0xec>)
 80005be:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <kalman_filter+0xec>)
 80005c4:	edd3 6a00 	vldr	s13, [r3]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <kalman_filter+0xec>)
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <kalman_filter+0xf0>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <kalman_filter+0xf4>)
 80005de:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <kalman_filter+0xe0>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <kalman_filter+0xf4>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <kalman_filter+0xf4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <kalman_filter+0xec>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <kalman_filter+0xe4>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <kalman_filter+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <kalman_filter+0xec>)
 800062a:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <kalman_filter+0xf8>)
 8000638:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <kalman_filter+0xe0>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000642:	edd7 7a02 	vldr	s15, [r7, #8]
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <kalman_filter+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000652:	edd7 7a02 	vldr	s15, [r7, #8]
 8000656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20009fb4 	.word	0x20009fb4
 8000670:	20009fac 	.word	0x20009fac
 8000674:	2000001c 	.word	0x2000001c
 8000678:	20000024 	.word	0x20000024
 800067c:	20000020 	.word	0x20000020
 8000680:	20009fb0 	.word	0x20009fb0
 8000684:	20009fa8 	.word	0x20009fa8
 8000688:	20009fb8 	.word	0x20009fb8

0800068c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <HAL_ADC_ConvCpltCallback+0xec>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800069a:	4b38      	ldr	r3, [pc, #224]	; (800077c <HAL_ADC_ConvCpltCallback+0xf0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a36      	ldr	r2, [pc, #216]	; (800077c <HAL_ADC_ConvCpltCallback+0xf0>)
 80006a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0]; //32;
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006ae:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x76>
	{
		if(buf_idx < 2000)
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c0:	d218      	bcs.n	80006f4 <HAL_ADC_ConvCpltCallback+0x68>
		{
			buf1[buf_idx] = ad1_audio;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4931      	ldr	r1, [pc, #196]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			kalman_adc_int = kalman_filter(buf2[buf_idx]);
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff56 	bl	800058c <kalman_filter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 80006e6:	601a      	str	r2, [r3, #0]
			buf_idx++;
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e02e      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 2;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e027      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}
	else if(buf_num == 2)
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d123      	bne.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
	{
		if(buf_idx < 2000)
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000712:	d218      	bcs.n	8000746 <HAL_ADC_ConvCpltCallback+0xba>
		{
			buf2[buf_idx] = ad1_audio;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	491d      	ldr	r1, [pc, #116]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf1[buf_idx]);
			kalman_adc_int = kalman_filter(buf1[buf_idx]);
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <kalman_filter>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000738:	601a      	str	r2, [r3, #0]
			buf_idx++;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e005      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 1;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		}
	}

	if(kalman_adc_int > 320)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800075a:	dd02      	ble.n	8000762 <HAL_ADC_ConvCpltCallback+0xd6>
	{
		trip1 = 1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

		//flag_pulse_out = 1;
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 8000762:	2301      	movs	r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 800076a:	f001 f901 	bl	8001970 <HAL_ADC_Start_DMA>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000350 	.word	0x20000350
 800077c:	20000358 	.word	0x20000358
 8000780:	20000344 	.word	0x20000344
 8000784:	2000035c 	.word	0x2000035c
 8000788:	20000018 	.word	0x20000018
 800078c:	20000360 	.word	0x20000360
 8000790:	20000364 	.word	0x20000364
 8000794:	20005184 	.word	0x20005184
 8000798:	20009fb8 	.word	0x20009fb8
 800079c:	20009fbc 	.word	0x20009fbc
 80007a0:	20000190 	.word	0x20000190

080007a4 <HAL_SYSTICK_Callback>:
 * add HAL_SYSTICK_IRQHandler(); to stm32f4xx_it.c -> void SysTick_Handler(void)
 */
#define MAX_PWM_ALL		20
uint32_t _pwm_slope = 0;
void HAL_SYSTICK_Callback(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	if(flag_pulse_out == 1)
 80007a8:	4b91      	ldr	r3, [pc, #580]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	f040 80e4 	bne.w	800097a <HAL_SYSTICK_Callback+0x1d6>
	{
		millis++;
 80007b2:	4b90      	ldr	r3, [pc, #576]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a8e      	ldr	r2, [pc, #568]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007ba:	6013      	str	r3, [r2, #0]

		if(millis > pulses.stone3)
 80007bc:	4b8e      	ldr	r3, [pc, #568]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d240      	bcs.n	800084c <HAL_SYSTICK_Callback+0xa8>
		{
			if(_pulse_count < pulses.duration3)
 80007ca:	4b8b      	ldr	r3, [pc, #556]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f240 80d0 	bls.w	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count++;
 80007da:	4b88      	ldr	r3, [pc, #544]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a86      	ldr	r2, [pc, #536]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007e2:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration3)
 80007e4:	4b84      	ldr	r3, [pc, #528]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b84      	ldr	r3, [pc, #528]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d914      	bls.n	800081c <HAL_SYSTICK_Callback+0x78>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 80007f2:	4b83      	ldr	r3, [pc, #524]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b13      	cmp	r3, #19
 80007f8:	f200 80bf 	bhi.w	800097a <HAL_SYSTICK_Callback+0x1d6>
					{
						_pwm_slope += (MAX_PWM_ALL / pulses.duration3);
 80007fc:	4b7e      	ldr	r3, [pc, #504]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	2214      	movs	r2, #20
 8000802:	fb92 f3f3 	sdiv	r3, r2, r3
 8000806:	461a      	mov	r2, r3
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4413      	add	r3, r2
 800080e:	4a7c      	ldr	r2, [pc, #496]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000810:	6013      	str	r3, [r2, #0]
						TIM1->CCR2 = _pwm_slope;
 8000812:	4a7c      	ldr	r2, [pc, #496]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000814:	4b7a      	ldr	r3, [pc, #488]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6393      	str	r3, [r2, #56]	; 0x38
 800081a:	e0ae      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
					}
				}
				else
				{
					TIM1->CCR2 = 0;
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 800081e:	2200      	movs	r2, #0
 8000820:	639a      	str	r2, [r3, #56]	; 0x38

					// END THIS PULSE SEQUENCE
					_pwm_slope = 0;
 8000822:	4b77      	ldr	r3, [pc, #476]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
					flag_pulse_out = 0;
 8000828:	4b71      	ldr	r3, [pc, #452]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
					millis = 0;
 800082e:	4b71      	ldr	r3, [pc, #452]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
					_pulse_count = 0;
 8000834:	4b71      	ldr	r3, [pc, #452]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
					trip1 = 1;
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4871      	ldr	r0, [pc, #452]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 8000846:	f002 fa57 	bl	8002cf8 <HAL_GPIO_WritePin>
 800084a:	e096      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
					//// TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
				}
			}
		}
		else if(millis > pulses.stone2)
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d248      	bcs.n	80008ec <HAL_SYSTICK_Callback+0x148>
		{
			if(_pulse_count < pulses.duration2)
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	4b66      	ldr	r3, [pc, #408]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d926      	bls.n	80008b6 <HAL_SYSTICK_Callback+0x112>
			{
				_pulse_count++;
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a63      	ldr	r2, [pc, #396]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000870:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration2)
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	4b60      	ldr	r3, [pc, #384]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d914      	bls.n	80008aa <HAL_SYSTICK_Callback+0x106>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b13      	cmp	r3, #19
 8000886:	d816      	bhi.n	80008b6 <HAL_SYSTICK_Callback+0x112>
					{
						_pwm_slope += ((MAX_PWM_ALL / pulses.duration2) + 1);
 8000888:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2214      	movs	r2, #20
 800088e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800089e:	6013      	str	r3, [r2, #0]
						TIM1->CCR3 = _pwm_slope;
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008a8:	e005      	b.n	80008b6 <HAL_SYSTICK_Callback+0x112>
					}
				}
				else
				{
					TIM1->CCR3 = 0;
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
					_pwm_slope = 0;
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
				}
			}

			if(millis == (pulses.stone2 + 100))
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	3364      	adds	r3, #100	; 0x64
 80008bc:	461a      	mov	r2, r3
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d107      	bne.n	80008d6 <HAL_SYSTICK_Callback+0x132>
			{
				trip1 = 1;
 80008c6:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	484e      	ldr	r0, [pc, #312]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 80008d2:	f002 fa11 	bl	8002cf8 <HAL_GPIO_WritePin>
			}

			if(millis == pulses.stone3)
 80008d6:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d14a      	bne.n	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count = 0;
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e046      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
//				trip1 = 1;
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
			}
		}
		else if(millis > pulses.stone1)
 80008ec:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d23f      	bcs.n	800097a <HAL_SYSTICK_Callback+0x1d6>
		{
			if(_pulse_count < pulses.duration1)
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	461a      	mov	r2, r3
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d92e      	bls.n	8000966 <HAL_SYSTICK_Callback+0x1c2>
			{
				_pulse_count++;
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000910:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration1)
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	461a      	mov	r2, r3
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d919      	bls.n	8000954 <HAL_SYSTICK_Callback+0x1b0>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b13      	cmp	r3, #19
 8000926:	d80f      	bhi.n	8000948 <HAL_SYSTICK_Callback+0x1a4>
					{
						_pwm_slope += ((MAX_PWM_ALL / pulses.duration1) + 1);
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2214      	movs	r2, #20
 800092e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4413      	add	r3, r2
 800093a:	3301      	adds	r3, #1
 800093c:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800093e:	6013      	str	r3, [r2, #0]
						TIM1->CCR1 = _pwm_slope;
 8000940:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000942:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6353      	str	r3, [r2, #52]	; 0x34
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2101      	movs	r1, #1
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 800094e:	f002 f9d3 	bl	8002cf8 <HAL_GPIO_WritePin>
 8000952:	e008      	b.n	8000966 <HAL_SYSTICK_Callback+0x1c2>
					//// TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
				}
				else
				{
					TIM1->CCR1 = 0;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000956:	2200      	movs	r2, #0
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
					_pwm_slope = 0;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
					trip1 = 1;
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
			{
				////TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
				////TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			}

			if(millis == pulses.stone2)
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	461a      	mov	r2, r3
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d102      	bne.n	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count = 0;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(flag_pulse_out == 2)
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	f040 80f5 	bne.w	8000b6e <HAL_SYSTICK_Callback+0x3ca>
		{
			millis++;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 800098c:	6013      	str	r3, [r2, #0]

			if(millis > pulses.stone3)
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	461a      	mov	r2, r3
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d251      	bcs.n	8000a40 <HAL_SYSTICK_Callback+0x29c>
			{
				if(_pulse_count < pulses.duration3)
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	f240 80e1 	bls.w	8000b6e <HAL_SYSTICK_Callback+0x3ca>
				{
					_pulse_count++;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009b4:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration3)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d925      	bls.n	8000a10 <HAL_SYSTICK_Callback+0x26c>
					{
						if(_pwm_slope < MAX_PWM_ALL)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b13      	cmp	r3, #19
 80009ca:	f200 80d0 	bhi.w	8000b6e <HAL_SYSTICK_Callback+0x3ca>
						{
							_pwm_slope += (MAX_PWM_ALL / pulses.duration3);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	2214      	movs	r2, #20
 80009d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009e2:	6013      	str	r3, [r2, #0]
							TIM1->CCR2 = _pwm_slope;
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6393      	str	r3, [r2, #56]	; 0x38
				{
					_pulse_count = 0;
				}
			}
		}
}
 80009ec:	e0bf      	b.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
 80009ee:	bf00      	nop
 80009f0:	20009fa4 	.word	0x20009fa4
 80009f4:	20000354 	.word	0x20000354
 80009f8:	20000000 	.word	0x20000000
 80009fc:	200002c8 	.word	0x200002c8
 8000a00:	20009fc0 	.word	0x20009fc0
 8000a04:	40010000 	.word	0x40010000
 8000a08:	20009fbc 	.word	0x20009fbc
 8000a0c:	40020400 	.word	0x40020400
						TIM1->CCR2 = 0;
 8000a10:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <HAL_SYSTICK_Callback+0x3d0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
						_pwm_slope = 0;
 8000a16:	4b58      	ldr	r3, [pc, #352]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
						flag_pulse_out = 0;
 8000a1c:	4b57      	ldr	r3, [pc, #348]	; (8000b7c <HAL_SYSTICK_Callback+0x3d8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
						millis = 0;
 8000a22:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
						_pulse_count = 0;
 8000a28:	4b56      	ldr	r3, [pc, #344]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
						trip1 = 1;
 8000a2e:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_SYSTICK_Callback+0x3e4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2102      	movs	r1, #2
 8000a38:	4854      	ldr	r0, [pc, #336]	; (8000b8c <HAL_SYSTICK_Callback+0x3e8>)
 8000a3a:	f002 f95d 	bl	8002cf8 <HAL_GPIO_WritePin>
}
 8000a3e:	e096      	b.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
			else if(millis > pulses.stone2)
 8000a40:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b4e      	ldr	r3, [pc, #312]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d248      	bcs.n	8000ae0 <HAL_SYSTICK_Callback+0x33c>
				if(_pulse_count < pulses.duration2)
 8000a4e:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d926      	bls.n	8000aaa <HAL_SYSTICK_Callback+0x306>
					_pulse_count++;
 8000a5c:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000a64:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration2)
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d914      	bls.n	8000a9e <HAL_SYSTICK_Callback+0x2fa>
						if(_pwm_slope < MAX_PWM_ALL)
 8000a74:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b13      	cmp	r3, #19
 8000a7a:	d816      	bhi.n	8000aaa <HAL_SYSTICK_Callback+0x306>
							_pwm_slope += ((MAX_PWM_ALL / pulses.duration2) + 1);
 8000a7c:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	2214      	movs	r2, #20
 8000a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a39      	ldr	r2, [pc, #228]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000a92:	6013      	str	r3, [r2, #0]
							TIM1->CCR3 = _pwm_slope;
 8000a94:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_SYSTICK_Callback+0x3d0>)
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a9c:	e005      	b.n	8000aaa <HAL_SYSTICK_Callback+0x306>
						TIM1->CCR3 = 0;
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_SYSTICK_Callback+0x3d0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
						_pwm_slope = 0;
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
				if(millis == (pulses.stone2 + 100))
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	3364      	adds	r3, #100	; 0x64
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d107      	bne.n	8000aca <HAL_SYSTICK_Callback+0x326>
					trip1 = 1;
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_SYSTICK_Callback+0x3e4>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); //// TEST was PIN0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4831      	ldr	r0, [pc, #196]	; (8000b8c <HAL_SYSTICK_Callback+0x3e8>)
 8000ac6:	f002 f917 	bl	8002cf8 <HAL_GPIO_WritePin>
				if(millis == pulses.stone3)
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d14a      	bne.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
					_pulse_count = 0;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
}
 8000ade:	e046      	b.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
			else if(millis > pulses.stone1)
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d23f      	bcs.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
				if(_pulse_count < pulses.duration1)
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d92e      	bls.n	8000b5a <HAL_SYSTICK_Callback+0x3b6>
					_pulse_count++;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000b04:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration1)
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d919      	bls.n	8000b48 <HAL_SYSTICK_Callback+0x3a4>
						if(_pwm_slope < MAX_PWM_ALL)
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b13      	cmp	r3, #19
 8000b1a:	d80f      	bhi.n	8000b3c <HAL_SYSTICK_Callback+0x398>
							_pwm_slope += ((MAX_PWM_ALL / pulses.duration1) + 1);
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2214      	movs	r2, #20
 8000b22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000b32:	6013      	str	r3, [r2, #0]
							TIM1->CCR1 = _pwm_slope;
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_SYSTICK_Callback+0x3d0>)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6353      	str	r3, [r2, #52]	; 0x34
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <HAL_SYSTICK_Callback+0x3e8>)
 8000b42:	f002 f8d9 	bl	8002cf8 <HAL_GPIO_WritePin>
 8000b46:	e008      	b.n	8000b5a <HAL_SYSTICK_Callback+0x3b6>
						TIM1->CCR1 = 0;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_SYSTICK_Callback+0x3d0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
						_pwm_slope = 0;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_SYSTICK_Callback+0x3d4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
						trip1 = 1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_SYSTICK_Callback+0x3e4>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
				if(millis == pulses.stone2)
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_SYSTICK_Callback+0x3ec>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <HAL_SYSTICK_Callback+0x3dc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d102      	bne.n	8000b6e <HAL_SYSTICK_Callback+0x3ca>
					_pulse_count = 0;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_SYSTICK_Callback+0x3e0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010000 	.word	0x40010000
 8000b78:	20009fc0 	.word	0x20009fc0
 8000b7c:	20009fa4 	.word	0x20009fa4
 8000b80:	20000354 	.word	0x20000354
 8000b84:	200002c8 	.word	0x200002c8
 8000b88:	20009fbc 	.word	0x20009fbc
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	20000000 	.word	0x20000000

08000b94 <enableTriggerOut>:

void enableTriggerOut(char *buff)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if(buff[0] == '1')
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b31      	cmp	r3, #49	; 0x31
 8000ba2:	d102      	bne.n	8000baa <enableTriggerOut+0x16>
	{
		flag_pulse_out = 1;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <enableTriggerOut+0x30>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	}

	if(buff[0] == '2')
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b32      	cmp	r3, #50	; 0x32
 8000bb0:	d102      	bne.n	8000bb8 <enableTriggerOut+0x24>
	{
		flag_pulse_out = 2;
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <enableTriggerOut+0x30>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
	}
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20009fa4 	.word	0x20009fa4

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  uint32_t b_shot = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 fce1 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8b1 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 fa93 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be2:	f000 fa71 	bl	80010c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000be6:	f000 f917 	bl	8000e18 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bea:	f000 fa21 	bl	8001030 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000bee:	f008 fa29 	bl	8009044 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000bf2:	f000 f963 	bl	8000ebc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	 //// TESTING
  ////HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	4842      	ldr	r0, [pc, #264]	; (8000d04 <main+0x13c>)
 8000bfc:	f002 f87c 	bl	8002cf8 <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	483f      	ldr	r0, [pc, #252]	; (8000d04 <main+0x13c>)
 8000c06:	f002 f877 	bl	8002cf8 <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	483e      	ldr	r0, [pc, #248]	; (8000d08 <main+0x140>)
 8000c10:	f002 f872 	bl	8002cf8 <HAL_GPIO_WritePin>

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 8000c14:	2301      	movs	r3, #1
 8000c16:	461a      	mov	r2, r3
 8000c18:	493c      	ldr	r1, [pc, #240]	; (8000d0c <main+0x144>)
 8000c1a:	483d      	ldr	r0, [pc, #244]	; (8000d10 <main+0x148>)
 8000c1c:	f000 fea8 	bl	8001970 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8000c20:	483c      	ldr	r0, [pc, #240]	; (8000d14 <main+0x14c>)
 8000c22:	f003 ff7f 	bl	8004b24 <HAL_TIM_Base_Start>

  // <PWM OUTPUT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c26:	2100      	movs	r1, #0
 8000c28:	483b      	ldr	r0, [pc, #236]	; (8000d18 <main+0x150>)
 8000c2a:	f004 f82f 	bl	8004c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4839      	ldr	r0, [pc, #228]	; (8000d18 <main+0x150>)
 8000c32:	f004 f82b 	bl	8004c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c36:	2108      	movs	r1, #8
 8000c38:	4837      	ldr	r0, [pc, #220]	; (8000d18 <main+0x150>)
 8000c3a:	f004 f827 	bl	8004c8c <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <main+0x154>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34
  b_shot = HAL_GetTick();
 8000c44:	f000 fd10 	bl	8001668 <HAL_GetTick>
 8000c48:	6038      	str	r0, [r7, #0]
  HAL_Delay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fd18 	bl	8001680 <HAL_Delay>
  TIM1->CCR1 = 0;
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <main+0x154>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <main+0x154>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <main+0x154>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 1000))
 8000c62:	f000 fd01 	bl	8001668 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d927      	bls.n	8000cc2 <main+0xfa>
	  {
		  a_shot = HAL_GetTick();
 8000c72:	f000 fcf9 	bl	8001668 <HAL_GetTick>
 8000c76:	6078      	str	r0, [r7, #4]
		  if(adcConversionComplete == 1)
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <main+0x158>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d120      	bne.n	8000cc2 <main+0xfa>
		  {
			  adcConversionComplete = 0;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <main+0x158>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  //sprintf(strA1, "A1:%d,Rate:%d,Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
			  sprintf(strA1, "A1:%d,Kalman:%d,Map:%d,Rate:%d\n", ad1_raw[0], kalman_adc_int, ad1_audio, conv_rate); // @suppress("Float formatting support")
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <main+0x144>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <main+0x15c>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <main+0x160>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <main+0x164>)
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	9201      	str	r2, [sp, #4]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4923      	ldr	r1, [pc, #140]	; (8000d30 <main+0x168>)
 8000ca4:	4823      	ldr	r0, [pc, #140]	; (8000d34 <main+0x16c>)
 8000ca6:	f008 fef5 	bl	8009a94 <siprintf>
			  CDC_Transmit_FS(strA1, strlen(strA1));
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <main+0x16c>)
 8000cac:	f7ff fa98 	bl	80001e0 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481f      	ldr	r0, [pc, #124]	; (8000d34 <main+0x16c>)
 8000cb8:	f008 fa9a 	bl	80091f0 <CDC_Transmit_FS>
			  conv_rate = 0;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <main+0x164>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		  }

		  //// CDC_Transmit_FS(".", 1);
	  }

	  if(HAL_GetTick() > (b_shot + 3000))
 8000cc2:	f000 fcd1 	bl	8001668 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d902      	bls.n	8000cd8 <main+0x110>
	  {
		  b_shot = HAL_GetTick();
 8000cd2:	f000 fcc9 	bl	8001668 <HAL_GetTick>
 8000cd6:	6038      	str	r0, [r7, #0]

		  //ad1_audio = ad1_raw[0] / 32;
		  //TIM1->CCR1 = ad1_audio;
	  }

	  if(flag_usbrx == 1)
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <main+0x170>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d1bf      	bne.n	8000c62 <main+0x9a>
	  {
		  CDC_Transmit_FS(usb_rx_buffer, strlen(usb_rx_buffer));
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <main+0x174>)
 8000ce4:	f7ff fa7c 	bl	80001e0 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	4813      	ldr	r0, [pc, #76]	; (8000d3c <main+0x174>)
 8000cf0:	f008 fa7e 	bl	80091f0 <CDC_Transmit_FS>
		  flag_usbrx = 0;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <main+0x170>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		  enableTriggerOut(usb_rx_buffer);
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <main+0x174>)
 8000cfc:	f7ff ff4a 	bl	8000b94 <enableTriggerOut>
	  if(HAL_GetTick() > (a_shot + 1000))
 8000d00:	e7af      	b.n	8000c62 <main+0x9a>
 8000d02:	bf00      	nop
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	20000344 	.word	0x20000344
 8000d10:	20000190 	.word	0x20000190
 8000d14:	20000280 	.word	0x20000280
 8000d18:	20000238 	.word	0x20000238
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	20000350 	.word	0x20000350
 8000d24:	20009fb8 	.word	0x20009fb8
 8000d28:	2000035c 	.word	0x2000035c
 8000d2c:	20000358 	.word	0x20000358
 8000d30:	0800a3f4 	.word	0x0800a3f4
 8000d34:	20000310 	.word	0x20000310
 8000d38:	2000030c 	.word	0x2000030c
 8000d3c:	200002cc 	.word	0x200002cc

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2230      	movs	r2, #48	; 0x30
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f008 fec0 	bl	8009ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <SystemClock_Config+0xd0>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <SystemClock_Config+0xd0>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <SystemClock_Config+0xd0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <SystemClock_Config+0xd4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <SystemClock_Config+0xd4>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <SystemClock_Config+0xd4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da0:	2301      	movs	r3, #1
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000daa:	2302      	movs	r3, #2
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000db4:	2319      	movs	r3, #25
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000db8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fa2a 	bl	8004224 <HAL_RCC_OscConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dd6:	f000 fa07 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	230f      	movs	r3, #15
 8000ddc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2302      	movs	r3, #2
 8000de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2102      	movs	r1, #2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fc8c 	bl	8004714 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e02:	f000 f9f1 	bl	80011e8 <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3750      	adds	r7, #80	; 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40007000 	.word	0x40007000

08000e18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <MX_ADC1_Init+0xa0>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e5c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e7e:	f000 fc23 	bl	80016c8 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e88:	f000 f9ae 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_ADC1_Init+0x9c>)
 8000e9e:	f000 fe75 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f99e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000190 	.word	0x20000190
 8000eb8:	40012000 	.word	0x40012000

08000ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f008 fded 	bl	8009ad4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000efa:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <MX_TIM1_Init+0x170>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f02:	2220      	movs	r2, #32
 8000f04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32;
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f0e:	2220      	movs	r2, #32
 8000f10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f24:	4840      	ldr	r0, [pc, #256]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f26:	f003 fdad 	bl	8004a84 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f30:	f000 f95a 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4839      	ldr	r0, [pc, #228]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f42:	f004 f815 	bl	8004f70 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f4c:	f000 f94c 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f50:	4835      	ldr	r0, [pc, #212]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f52:	f003 fe41 	bl	8004bd8 <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f5c:	f000 f944 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	482e      	ldr	r0, [pc, #184]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000f70:	f004 fb92 	bl	8005698 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f7a:	f000 f935 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 8;
 8000f82:	2308      	movs	r3, #8
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4821      	ldr	r0, [pc, #132]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000fa4:	f003 ff22 	bl	8004dec <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fae:	f000 f91b 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000fbc:	f003 ff16 	bl	8004dec <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000fc6:	f000 f90f 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_TIM1_Init+0x16c>)
 8000fd8:	f003 ff08 	bl	8004dec <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000fe2:	f000 f901 	bl	80011e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM1_Init+0x16c>)
 800100a:	f004 fbb3 	bl	8005774 <HAL_TIMEx_ConfigBreakDeadTime>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001014:	f000 f8e8 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM1_Init+0x16c>)
 800101a:	f000 f9c9 	bl	80013b0 <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3758      	adds	r7, #88	; 0x58
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000238 	.word	0x20000238
 800102c:	40010000 	.word	0x40010000

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM2_Init+0x94>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM2_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001062:	2232      	movs	r2, #50	; 0x32
 8001064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM2_Init+0x94>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001074:	f003 fd06 	bl	8004a84 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f8b3 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM2_Init+0x94>)
 8001090:	f003 ff6e 	bl	8004f70 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f8a5 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109e:	2320      	movs	r3, #32
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM2_Init+0x94>)
 80010ac:	f004 faf4 	bl	8005698 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 f897 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000280 	.word	0x20000280

080010c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_DMA_Init+0x3c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <MX_DMA_Init+0x3c>)
 80010d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_DMA_Init+0x3c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2038      	movs	r0, #56	; 0x38
 80010f0:	f001 f8d1 	bl	8002296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010f4:	2038      	movs	r0, #56	; 0x38
 80010f6:	f001 f8ea 	bl	80022ce <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_GPIO_Init+0xd4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_GPIO_Init+0xd4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_GPIO_Init+0xd4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	481a      	ldr	r0, [pc, #104]	; (80011e0 <MX_GPIO_Init+0xd8>)
 8001178:	f001 fdbe 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <MX_GPIO_Init+0xd8>)
 8001182:	f001 fdb9 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2101      	movs	r1, #1
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <MX_GPIO_Init+0xdc>)
 800118c:	f001 fdb4 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2106      	movs	r1, #6
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_GPIO_Init+0xdc>)
 8001196:	f001 fdaf 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <MX_GPIO_Init+0xd8>)
 80011b2:	f001 fc1d 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011b6:	2307      	movs	r3, #7
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_GPIO_Init+0xdc>)
 80011ce:	f001 fc0f 	bl	80029f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a33      	ldr	r2, [pc, #204]	; (8001330 <HAL_ADC_MspInit+0xec>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d15f      	bne.n	8001326 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a2a      	ldr	r2, [pc, #168]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_ADC_MspInit+0xf0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800129e:	2302      	movs	r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4821      	ldr	r0, [pc, #132]	; (8001338 <HAL_ADC_MspInit+0xf4>)
 80012b2:	f001 fb9d 	bl	80029f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_ADC_MspInit+0xfc>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fa:	4810      	ldr	r0, [pc, #64]	; (800133c <HAL_ADC_MspInit+0xf8>)
 80012fc:	f001 f808 	bl	8002310 <HAL_DMA_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001306:	f7ff ff6f 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_ADC_MspInit+0xf8>)
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_ADC_MspInit+0xf8>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2012      	movs	r0, #18
 800131c:	f000 ffbb 	bl	8002296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001320:	2012      	movs	r0, #18
 8001322:	f000 ffd4 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000
 800133c:	200001d8 	.word	0x200001d8
 8001340:	40026410 	.word	0x40026410

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <HAL_TIM_Base_MspInit+0x64>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10e      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001372:	e012      	b.n	800139a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d10d      	bne.n	800139a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_TIM_MspPostInit+0x68>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11e      	bne.n	8001410 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80013ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_TIM_MspPostInit+0x70>)
 800140c:	f001 faf0 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010000 	.word	0x40010000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8e6 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001474:	f000 ff45 	bl	8002302 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <ADC_IRQHandler+0x10>)
 8001482:	f000 f964 	bl	800174e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000190 	.word	0x20000190

08001490 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001496:	f001 f841 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001d8 	.word	0x200001d8

080014a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <OTG_FS_IRQHandler+0x10>)
 80014aa:	f001 fd8e 	bl	8002fca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000acac 	.word	0x2000acac

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f008 fafc 	bl	8009ae4 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20010000 	.word	0x20010000
 8001518:	00000400 	.word	0x00000400
 800151c:	20009fc4 	.word	0x20009fc4
 8001520:	2000b520 	.word	0x2000b520

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001572:	f7ff ffd7 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f008 fabb 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff fb25 	bl	8000bc8 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800158c:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 8001590:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001594:	2000b520 	.word	0x2000b520

08001598 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <DMA1_Stream0_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 fe5b 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fe10 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fe73 	bl	80022ea <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 fe3b 	bl	8002296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000028 	.word	0x20000028
 8001638:	20000030 	.word	0x20000030
 800163c:	2000002c 	.word	0x2000002c

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000030 	.word	0x20000030
 8001664:	20009fc8 	.word	0x20009fc8

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20009fc8 	.word	0x20009fc8

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000030 	.word	0x20000030

080016c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e033      	b.n	8001746 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fdac 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800170e:	f023 0302 	bic.w	r3, r3, #2
 8001712:	f043 0202 	orr.w	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fb58 	bl	8001dd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	f043 0201 	orr.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
 8001736:	e001      	b.n	800173c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d049      	beq.n	8001818 <HAL_ADC_IRQHandler+0xca>
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d046      	beq.n	8001818 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d12b      	bne.n	8001808 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d127      	bne.n	8001808 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d119      	bne.n	8001808 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0220 	bic.w	r2, r2, #32
 80017e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7fe ff3f 	bl	800068c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0212 	mvn.w	r2, #18
 8001816:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d057      	beq.n	80018de <HAL_ADC_IRQHandler+0x190>
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d054      	beq.n	80018de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d139      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12b      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001880:	2b00      	cmp	r3, #0
 8001882:	d124      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11d      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d119      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fbfc 	bl	80020cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 020c 	mvn.w	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d017      	beq.n	8001924 <HAL_ADC_IRQHandler+0x1d6>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d014      	beq.n	8001924 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d10d      	bne.n	8001924 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f925 	bl	8001b64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0201 	mvn.w	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001932:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <HAL_ADC_IRQHandler+0x218>
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0220 	mvn.w	r2, #32
 8001954:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f90e 	bl	8001b78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0220 	mvn.w	r2, #32
 8001964:	601a      	str	r2, [r3, #0]
  }
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_ADC_Start_DMA+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e0ce      	b.n	8001b2c <HAL_ADC_Start_DMA+0x1bc>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d018      	beq.n	80019d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b4:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_ADC_Start_DMA+0x1c4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5f      	ldr	r2, [pc, #380]	; (8001b38 <HAL_ADC_Start_DMA+0x1c8>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9a      	lsrs	r2, r3, #18
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e4:	d107      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 8086 	bne.w	8001b12 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a44:	d106      	bne.n	8001a54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f023 0206 	bic.w	r2, r3, #6
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_ADC_Start_DMA+0x1cc>)
 8001a64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	4a35      	ldr	r2, [pc, #212]	; (8001b40 <HAL_ADC_Start_DMA+0x1d0>)
 8001a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <HAL_ADC_Start_DMA+0x1d4>)
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	4a33      	ldr	r2, [pc, #204]	; (8001b48 <HAL_ADC_Start_DMA+0x1d8>)
 8001a7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	334c      	adds	r3, #76	; 0x4c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f000 fcd8 	bl	800246c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d129      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e020      	b.n	8001b2a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_ADC_Start_DMA+0x1dc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11b      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x1ba>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d114      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e00b      	b.n	8001b2a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000028 	.word	0x20000028
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	40012300 	.word	0x40012300
 8001b40:	08001fc9 	.word	0x08001fc9
 8001b44:	08002083 	.word	0x08002083
 8001b48:	0800209f 	.word	0x0800209f
 8001b4c:	40012000 	.word	0x40012000

08001b50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e105      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x228>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d925      	bls.n	8001c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	400a      	ands	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4403      	add	r3, r0
 8001bf6:	3b1e      	subs	r3, #30
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	e022      	b.n	8001c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	2207      	movs	r2, #7
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4403      	add	r3, r0
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d824      	bhi.n	8001c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	221f      	movs	r2, #31
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b05      	subs	r3, #5
 8001c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	e04c      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d824      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b23      	subs	r3, #35	; 0x23
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b23      	subs	r3, #35	; 0x23
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	e023      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b41      	subs	r3, #65	; 0x41
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b41      	subs	r3, #65	; 0x41
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_ADC_ConfigChannel+0x234>)
 8001d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_ADC_ConfigChannel+0x238>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1cc>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_ADC_ConfigChannel+0x238>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d123      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x1e6>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d11b      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_ADC_ConfigChannel+0x240>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	20000028 	.word	0x20000028
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <ADC_Init+0x1f0>)
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	021a      	lsls	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <ADC_Init+0x1f4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e00f      	b.n	8001ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0202 	bic.w	r2, r2, #2
 8001edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e1b      	ldrb	r3, [r3, #24]
 8001ee8:	005a      	lsls	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	3b01      	subs	r3, #1
 8001f28:	035a      	lsls	r2, r3, #13
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	e007      	b.n	8001f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	051a      	lsls	r2, r3, #20
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f86:	025a      	lsls	r2, r3, #9
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6899      	ldr	r1, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	029a      	lsls	r2, r3, #10
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40012300 	.word	0x40012300
 8001fc4:	0f000001 	.word	0x0f000001

08001fc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d13c      	bne.n	800205c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d12b      	bne.n	8002054 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d127      	bne.n	8002054 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800201c:	2b00      	cmp	r3, #0
 800201e:	d119      	bne.n	8002054 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0220 	bic.w	r2, r2, #32
 800202e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7fe fb19 	bl	800068c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800205a:	e00e      	b.n	800207a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fd85 	bl	8001b78 <HAL_ADC_ErrorCallback>
}
 800206e:	e004      	b.n	800207a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fd5d 	bl	8001b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fd5a 	bl	8001b78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4907      	ldr	r1, [pc, #28]	; (800217c <__NVIC_EnableIRQ+0x38>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	; (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff29 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff3e 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff8e 	bl	80021d4 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5d 	bl	8002180 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff31 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffa2 	bl	800223c <SysTick_Config>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002306:	f7fe fa4d 	bl	80007a4 <HAL_SYSTICK_Callback>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff f9a4 	bl	8001668 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e099      	b.n	8002460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234c:	e00f      	b.n	800236e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234e:	f7ff f98b 	bl	8001668 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b05      	cmp	r3, #5
 800235a:	d908      	bls.n	800236e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e078      	b.n	8002460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_DMA_Init+0x158>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4313      	orrs	r3, r2
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0307 	bic.w	r3, r3, #7
 80023ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d117      	bne.n	8002432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fa6f 	bl	80028f8 <DMA_CheckFifoParam>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800242e:	2301      	movs	r3, #1
 8002430:	e016      	b.n	8002460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa26 	bl	800288c <DMA_CalcBaseAndBitshift>
 8002440:	4603      	mov	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	223f      	movs	r2, #63	; 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	f010803f 	.word	0xf010803f

0800246c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_DMA_Start_IT+0x26>
 800248e:	2302      	movs	r3, #2
 8002490:	e040      	b.n	8002514 <HAL_DMA_Start_IT+0xa8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12f      	bne.n	8002506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f9b8 	bl	8002830 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0216 	orr.w	r2, r2, #22
 80024da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002528:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_DMA_IRQHandler+0x248>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a8e      	ldr	r2, [pc, #568]	; (8002768 <HAL_DMA_IRQHandler+0x24c>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a9b      	lsrs	r3, r3, #10
 8002534:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2208      	movs	r2, #8
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01a      	beq.n	8002588 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2208      	movs	r2, #8
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2201      	movs	r2, #1
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2204      	movs	r2, #4
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d012      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2204      	movs	r2, #4
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2210      	movs	r2, #16
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d043      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03c      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2210      	movs	r2, #16
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d018      	beq.n	800265e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d024      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
 800264a:	e01f      	b.n	800268c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e016      	b.n	800268c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0208 	bic.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2220      	movs	r2, #32
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 808f 	beq.w	80027bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8087 	beq.w	80027bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2220      	movs	r2, #32
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d136      	bne.n	8002734 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0216 	bic.w	r2, r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x1da>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d07e      	beq.n	8002828 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
        }
        return;
 8002732:	e079      	b.n	8002828 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01d      	beq.n	800277e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	2b00      	cmp	r3, #0
 8002756:	d031      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e02c      	b.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
 8002762:	bf00      	nop
 8002764:	20000028 	.word	0x20000028
 8002768:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
 800277c:	e01e      	b.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10f      	bne.n	80027ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0210 	bic.w	r2, r2, #16
 800279a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d032      	beq.n	800282a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2205      	movs	r2, #5
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d307      	bcc.n	8002804 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f2      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x2cc>
 8002802:	e000      	b.n	8002806 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002804:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e000      	b.n	800282a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002828:	bf00      	nop
    }
  }
}
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d108      	bne.n	8002870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800286e:	e007      	b.n	8002880 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3b10      	subs	r3, #16
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <DMA_CalcBaseAndBitshift+0x64>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <DMA_CalcBaseAndBitshift+0x68>)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d909      	bls.n	80028ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	659a      	str	r2, [r3, #88]	; 0x58
 80028cc:	e007      	b.n	80028de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	aaaaaaab 	.word	0xaaaaaaab
 80028f4:	0800a46c 	.word	0x0800a46c

080028f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11f      	bne.n	8002952 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d856      	bhi.n	80029c6 <DMA_CheckFifoParam+0xce>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <DMA_CheckFifoParam+0x28>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002931 	.word	0x08002931
 8002924:	08002943 	.word	0x08002943
 8002928:	08002931 	.word	0x08002931
 800292c:	080029c7 	.word	0x080029c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d046      	beq.n	80029ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002940:	e043      	b.n	80029ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800294a:	d140      	bne.n	80029ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002950:	e03d      	b.n	80029ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d121      	bne.n	80029a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d837      	bhi.n	80029d2 <DMA_CheckFifoParam+0xda>
 8002962:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <DMA_CheckFifoParam+0x70>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	08002979 	.word	0x08002979
 800296c:	0800297f 	.word	0x0800297f
 8002970:	08002979 	.word	0x08002979
 8002974:	08002991 	.word	0x08002991
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e030      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d025      	beq.n	80029d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e022      	b.n	80029d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002998:	d11f      	bne.n	80029da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800299e:	e01c      	b.n	80029da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d903      	bls.n	80029ae <DMA_CheckFifoParam+0xb6>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d003      	beq.n	80029b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029ac:	e018      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
      break;
 80029b2:	e015      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e00b      	b.n	80029de <DMA_CheckFifoParam+0xe6>
      break;
 80029c6:	bf00      	nop
 80029c8:	e00a      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ca:	bf00      	nop
 80029cc:	e008      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ce:	bf00      	nop
 80029d0:	e006      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e004      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
    }
  } 
  
  return status; 
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e159      	b.n	8002cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8148 	bne.w	8002cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a2 	beq.w	8002cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_GPIO_Init+0x2e8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <HAL_GPIO_Init+0x2e8>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <HAL_GPIO_Init+0x2e8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_GPIO_Init+0x2ec>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a49      	ldr	r2, [pc, #292]	; (8002ce0 <HAL_GPIO_Init+0x2f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d019      	beq.n	8002bf2 <HAL_GPIO_Init+0x202>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x2f4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x1fe>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_GPIO_Init+0x2f8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x1fa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_GPIO_Init+0x2fc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x1f6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a45      	ldr	r2, [pc, #276]	; (8002cf0 <HAL_GPIO_Init+0x300>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x1f2>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x204>
 8002be2:	2307      	movs	r3, #7
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x204>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x204>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x204>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x204>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c04:	4935      	ldr	r1, [pc, #212]	; (8002cdc <HAL_GPIO_Init+0x2ec>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	f67f aea2 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2c:	b08f      	sub	sp, #60	; 0x3c
 8002d2e:	af0a      	add	r7, sp, #40	; 0x28
 8002d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e10f      	b.n	8002f5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f006 fb92 	bl	8009480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fe61 	bl	8005a42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	687e      	ldr	r6, [r7, #4]
 8002d88:	466d      	mov	r5, sp
 8002d8a:	f106 0410 	add.w	r4, r6, #16
 8002d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d9e:	1d33      	adds	r3, r6, #4
 8002da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f002 fd38 	bl	8005818 <USB_CoreInit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0d0      	b.n	8002f5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fe4f 	bl	8005a64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e04a      	b.n	8002e62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	333d      	adds	r3, #61	; 0x3d
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	333c      	adds	r3, #60	; 0x3c
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	b298      	uxth	r0, r3
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3344      	adds	r3, #68	; 0x44
 8002e08:	4602      	mov	r2, r0
 8002e0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3340      	adds	r3, #64	; 0x40
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3348      	adds	r3, #72	; 0x48
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	334c      	adds	r3, #76	; 0x4c
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3354      	adds	r3, #84	; 0x54
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d3af      	bcc.n	8002dcc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e044      	b.n	8002efc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3b5      	bcc.n	8002e72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	687e      	ldr	r6, [r7, #4]
 8002f0e:	466d      	mov	r5, sp
 8002f10:	f106 0410 	add.w	r4, r6, #16
 8002f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f24:	1d33      	adds	r3, r6, #4
 8002f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f28:	6838      	ldr	r0, [r7, #0]
 8002f2a:	f002 fde7 	bl	8005afc <USB_DevInit>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e00d      	b.n	8002f5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 ff36 	bl	8006dc6 <USB_DevDisconnect>

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_PCD_Start+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e020      	b.n	8002fc2 <HAL_PCD_Start+0x5e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d109      	bne.n	8002fa4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d005      	beq.n	8002fa4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fd39 	bl	8005a20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fee6 	bl	8006d84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b08d      	sub	sp, #52	; 0x34
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 ffa4 	bl	8006f2e <USB_GetMode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 848a 	bne.w	8003902 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 ff08 	bl	8006e08 <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8480 	beq.w	8003900 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fef5 	bl	8006e08 <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 0202 	and.w	r2, r2, #2
 8003036:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fee3 	bl	8006e08 <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b10      	cmp	r3, #16
 800304a:	d161      	bne.n	8003110 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0210 	bic.w	r2, r2, #16
 800305a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	0c5b      	lsrs	r3, r3, #17
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	2b02      	cmp	r3, #2
 8003086:	d124      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d035      	beq.n	8003100 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800309e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6a38      	ldr	r0, [r7, #32]
 80030a8:	f003 fd1a 	bl	8006ae0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b8:	441a      	add	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ca:	441a      	add	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	621a      	str	r2, [r3, #32]
 80030d0:	e016      	b.n	8003100 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	0c5b      	lsrs	r3, r3, #17
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d110      	bne.n	8003100 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e4:	2208      	movs	r2, #8
 80030e6:	4619      	mov	r1, r3
 80030e8:	6a38      	ldr	r0, [r7, #32]
 80030ea:	f003 fcf9 	bl	8006ae0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fa:	441a      	add	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0210 	orr.w	r2, r2, #16
 800310e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fe77 	bl	8006e08 <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003120:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003124:	f040 80a7 	bne.w	8003276 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fe7c 	bl	8006e2e <USB_ReadDevAllOutEpInterrupt>
 8003136:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003138:	e099      	b.n	800326e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 808e 	beq.w	8003262 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fea0 	bl	8006e96 <USB_ReadDevOutEPInterrupt>
 8003156:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	2301      	movs	r3, #1
 8003172:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fec2 	bl	8003f00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2308      	movs	r3, #8
 8003196:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ff98 	bl	80040d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	2310      	movs	r3, #16
 80031ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d030      	beq.n	8003228 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d109      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	78db      	ldrb	r3, [r3, #3]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2200      	movs	r2, #0
 8003208:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f006 fa31 	bl	8009678 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	461a      	mov	r2, r3
 8003224:	2302      	movs	r3, #2
 8003226:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2320      	movs	r3, #32
 8003242:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003260:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af62 	bne.w	800313a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fdc4 	bl	8006e08 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800328a:	f040 80db 	bne.w	8003444 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fde5 	bl	8006e62 <USB_ReadDevAllInEpInterrupt>
 8003298:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800329e:	e0cd      	b.n	800343c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80c2 	beq.w	8003430 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fe0b 	bl	8006ed2 <USB_ReadDevInEPInterrupt>
 80032bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d057      	beq.n	8003378 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	2201      	movs	r2, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69f9      	ldr	r1, [r7, #28]
 80032e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e8:	4013      	ands	r3, r2
 80032ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f8:	461a      	mov	r2, r3
 80032fa:	2301      	movs	r3, #1
 80032fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d132      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	334c      	adds	r3, #76	; 0x4c
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4403      	add	r3, r0
 8003326:	3348      	adds	r3, #72	; 0x48
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4419      	add	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	334c      	adds	r3, #76	; 0x4c
 800333c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d113      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003364:	461a      	mov	r2, r3
 8003366:	2101      	movs	r1, #1
 8003368:	f003 fe12 	bl	8006f90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f006 f905 	bl	8009582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	2308      	movs	r3, #8
 8003392:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2310      	movs	r3, #16
 80033ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c6:	461a      	mov	r2, r3
 80033c8:	2340      	movs	r3, #64	; 0x40
 80033ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d8:	6a38      	ldr	r0, [r7, #32]
 80033da:	f002 fcf3 	bl	8005dc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	3338      	adds	r3, #56	; 0x38
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f006 f948 	bl	800969c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2302      	movs	r3, #2
 800341c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fcdb 	bl	8003de6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	3301      	adds	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	f47f af2e 	bne.w	80032a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fcdd 	bl	8006e08 <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003458:	d122      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fec2 	bl	800420c <HAL_PCDEx_LPM_Callback>
 8003488:	e002      	b.n	8003490 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f006 f8e6 	bl	800965c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800349e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 fcaf 	bl	8006e08 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d112      	bne.n	80034dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f006 f8a2 	bl	8009610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 fc91 	bl	8006e08 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	f040 80b7 	bne.w	8003662 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2110      	movs	r1, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f002 fc58 	bl	8005dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003518:	e046      	b.n	80035a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003526:	461a      	mov	r2, r3
 8003528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800352c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	440a      	add	r2, r1
 8003544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800354c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003560:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	440a      	add	r2, r1
 8003578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003580:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	440a      	add	r2, r1
 8003598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800359c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	3301      	adds	r3, #1
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3b3      	bcc.n	800351a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035de:	f043 030b 	orr.w	r3, r3, #11
 80035e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f4:	f043 030b 	orr.w	r3, r3, #11
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	e015      	b.n	8003628 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800360a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800360e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003612:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003622:	f043 030b 	orr.w	r3, r3, #11
 8003626:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003636:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800363a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800364c:	461a      	mov	r2, r3
 800364e:	f003 fc9f 	bl	8006f90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fbce 	bl	8006e08 <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	d124      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fc64 	bl	8006f4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f002 fc19 	bl	8005ebe <USB_GetDevSpeed>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	f001 f9e8 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 800369c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4620      	mov	r0, r4
 80036a8:	f002 f918 	bl	80058dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f005 ff90 	bl	80095d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fb9e 	bl	8006e08 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d10a      	bne.n	80036ec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f005 ff6d 	bl	80095b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 0208 	and.w	r2, r2, #8
 80036ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 fb89 	bl	8006e08 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d122      	bne.n	8003746 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e014      	b.n	800373c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb27 	bl	8003d84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	3301      	adds	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	429a      	cmp	r2, r3
 8003744:	d3e5      	bcc.n	8003712 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fb5c 	bl	8006e08 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d13b      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800375c:	2301      	movs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	e02b      	b.n	80037ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3340      	adds	r3, #64	; 0x40
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d115      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003788:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	da12      	bge.n	80037b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	333f      	adds	r3, #63	; 0x3f
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fae8 	bl	8003d84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	3301      	adds	r3, #1
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d3ce      	bcc.n	8003762 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fb15 	bl	8006e08 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e8:	d155      	bne.n	8003896 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e045      	b.n	800387c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d12e      	bne.n	8003876 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003818:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	da2b      	bge.n	8003876 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800382a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800382e:	429a      	cmp	r2, r3
 8003830:	d121      	bne.n	8003876 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003872:	6053      	str	r3, [r2, #4]
            break;
 8003874:	e007      	b.n	8003886 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	3301      	adds	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b4      	bcc.n	80037f0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fab4 	bl	8006e08 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d10a      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f005 ff07 	bl	80096c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 fa9e 	bl	8006e08 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d115      	bne.n	8003902 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f005 fef7 	bl	80096dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e000      	b.n	8003902 <HAL_PCD_IRQHandler+0x938>
      return;
 8003900:	bf00      	nop
    }
  }
}
 8003902:	3734      	adds	r7, #52	; 0x34
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}

08003908 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_SetAddress+0x1a>
 800391e:	2302      	movs	r3, #2
 8003920:	e013      	b.n	800394a <HAL_PCD_SetAddress+0x42>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f9fc 	bl	8006d38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	461a      	mov	r2, r3
 8003960:	4603      	mov	r3, r0
 8003962:	70fb      	strb	r3, [r7, #3]
 8003964:	460b      	mov	r3, r1
 8003966:	803b      	strh	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	da0f      	bge.n	8003998 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	3338      	adds	r3, #56	; 0x38
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	705a      	strb	r2, [r3, #1]
 8003996:	e00f      	b.n	80039b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039c4:	883a      	ldrh	r2, [r7, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	78ba      	ldrb	r2, [r7, #2]
 80039ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d102      	bne.n	80039ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_PCD_EP_Open+0xaa>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e00e      	b.n	8003a1a <HAL_PCD_EP_Open+0xc8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68f9      	ldr	r1, [r7, #12]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 fa7c 	bl	8005f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a18:	7afb      	ldrb	r3, [r7, #11]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da0f      	bge.n	8003a56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	3338      	adds	r3, #56	; 0x38
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	705a      	strb	r2, [r3, #1]
 8003a54:	e00f      	b.n	8003a76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_PCD_EP_Close+0x6e>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <HAL_PCD_EP_Close+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 faba 	bl	8006018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af8:	7afb      	ldrb	r3, [r7, #11]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b12:	7afb      	ldrb	r3, [r7, #11]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	6979      	ldr	r1, [r7, #20]
 8003b2a:	f002 fd99 	bl	8006660 <USB_EP0StartXfer>
 8003b2e:	e008      	b.n	8003b42 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	f002 fb47 	bl	80061d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	3338      	adds	r3, #56	; 0x38
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	f002 fd37 	bl	8006660 <USB_EP0StartXfer>
 8003bf2:	e008      	b.n	8003c06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6979      	ldr	r1, [r7, #20]
 8003c02:	f002 fae5 	bl	80061d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d901      	bls.n	8003c2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e050      	b.n	8003cd0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da0f      	bge.n	8003c56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	3338      	adds	r3, #56	; 0x38
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
 8003c54:	e00d      	b.n	8003c72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_PCD_EP_SetStall+0x82>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e01e      	b.n	8003cd0 <HAL_PCD_EP_SetStall+0xc0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f002 ff75 	bl	8006b90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	b2d9      	uxtb	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f003 f965 	bl	8006f90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d901      	bls.n	8003cf6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e042      	b.n	8003d7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da0f      	bge.n	8003d1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	3338      	adds	r3, #56	; 0x38
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	3304      	adds	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	705a      	strb	r2, [r3, #1]
 8003d1c:	e00f      	b.n	8003d3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_PCD_EP_ClrStall+0x86>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e00e      	b.n	8003d7c <HAL_PCD_EP_ClrStall+0xa4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 ff7d 	bl	8006c6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da0c      	bge.n	8003db2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3338      	adds	r3, #56	; 0x38
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e00c      	b.n	8003dcc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fd9c 	bl	8006910 <USB_EPStopXfer>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08a      	sub	sp, #40	; 0x28
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3338      	adds	r3, #56	; 0x38
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d901      	bls.n	8003e1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06c      	b.n	8003ef8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d902      	bls.n	8003e3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3303      	adds	r3, #3
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e42:	e02b      	b.n	8003e9c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d902      	bls.n	8003e60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	3303      	adds	r3, #3
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6919      	ldr	r1, [r3, #16]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f002 fdf0 	bl	8006a64 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	441a      	add	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d809      	bhi.n	8003ec6 <PCD_WriteEmptyTxFifo+0xe0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1a      	ldr	r2, [r3, #32]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d203      	bcs.n	8003ec6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1be      	bne.n	8003e44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d811      	bhi.n	8003ef6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2201      	movs	r2, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	6939      	ldr	r1, [r7, #16]
 8003eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	333c      	adds	r3, #60	; 0x3c
 8003f18:	3304      	adds	r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d17b      	bne.n	800402e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4a61      	ldr	r2, [pc, #388]	; (80040c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	f240 80b9 	bls.w	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80b3 	beq.w	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	461a      	mov	r2, r3
 8003f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f68:	6093      	str	r3, [r2, #8]
 8003f6a:	e0a7      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	2320      	movs	r3, #32
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	e098      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 8093 	bne.w	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d90f      	bls.n	8003fbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	6093      	str	r3, [r2, #8]
 8003fbc:	e07e      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	0159      	lsls	r1, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	440b      	add	r3, r1
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fea:	1ad2      	subs	r2, r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d114      	bne.n	8004020 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004008:	461a      	mov	r2, r3
 800400a:	2101      	movs	r1, #1
 800400c:	f002 ffc0 	bl	8006f90 <USB_EP0_OutStart>
 8004010:	e006      	b.n	8004020 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f005 fa90 	bl	800954c <HAL_PCD_DataOutStageCallback>
 800402c:	e046      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d124      	bne.n	8004080 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	461a      	mov	r2, r3
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e032      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2320      	movs	r3, #32
 8004070:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f005 fa67 	bl	800954c <HAL_PCD_DataOutStageCallback>
 800407e:	e01d      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d114      	bne.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a8:	461a      	mov	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f002 ff70 	bl	8006f90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f005 fa48 	bl	800954c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	4f54300a 	.word	0x4f54300a
 80040cc:	4f54310a 	.word	0x4f54310a

080040d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	333c      	adds	r3, #60	; 0x3c
 80040e8:	3304      	adds	r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <PCD_EP_OutSetupPacket_int+0x88>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d90e      	bls.n	8004124 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	461a      	mov	r2, r3
 800411e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004122:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f005 f9ff 	bl	8009528 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <PCD_EP_OutSetupPacket_int+0x88>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d90c      	bls.n	800414c <PCD_EP_OutSetupPacket_int+0x7c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d108      	bne.n	800414c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004144:	461a      	mov	r2, r3
 8004146:	2101      	movs	r1, #1
 8004148:	f002 ff22 	bl	8006f90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	4f54300a 	.word	0x4f54300a

0800415c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
 8004168:	4613      	mov	r3, r2
 800416a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800417a:	883b      	ldrh	r3, [r7, #0]
 800417c:	0419      	lsls	r1, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	430a      	orrs	r2, r1
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
 8004188:	e028      	b.n	80041dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4413      	add	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e00d      	b.n	80041ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	3340      	adds	r3, #64	; 0x40
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	3301      	adds	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	3b01      	subs	r3, #1
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d3ec      	bcc.n	800419e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041c4:	883b      	ldrh	r3, [r7, #0]
 80041c6:	0418      	lsls	r0, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4302      	orrs	r2, r0
 80041d4:	3340      	adds	r3, #64	; 0x40
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e267      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d075      	beq.n	800432e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004242:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b04      	cmp	r3, #4
 800424c:	d00c      	beq.n	8004268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424e:	4b85      	ldr	r3, [pc, #532]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004256:	2b08      	cmp	r3, #8
 8004258:	d112      	bne.n	8004280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4b82      	ldr	r3, [pc, #520]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004266:	d10b      	bne.n	8004280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	4b7e      	ldr	r3, [pc, #504]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05b      	beq.n	800432c <HAL_RCC_OscConfig+0x108>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d157      	bne.n	800432c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e242      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x74>
 800428a:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a75      	ldr	r2, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0xb0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x98>
 80042a2:	4b70      	ldr	r3, [pc, #448]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6f      	ldr	r2, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6c      	ldr	r2, [pc, #432]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0xb0>
 80042bc:	4b69      	ldr	r3, [pc, #420]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a68      	ldr	r2, [pc, #416]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b66      	ldr	r3, [pc, #408]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fd f9c4 	bl	8001668 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd f9c0 	bl	8001668 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e207      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b5b      	ldr	r3, [pc, #364]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xc0>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fd f9b0 	bl	8001668 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7fd f9ac 	bl	8001668 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e1f3      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b51      	ldr	r3, [pc, #324]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0xe8>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d063      	beq.n	8004402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b47      	ldr	r3, [pc, #284]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434e:	2b08      	cmp	r3, #8
 8004350:	d11c      	bne.n	800438c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b44      	ldr	r3, [pc, #272]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x152>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e1c7      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4937      	ldr	r1, [pc, #220]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	e03a      	b.n	8004402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d020      	beq.n	80043d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCC_OscConfig+0x244>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd f965 	bl	8001668 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fd f961 	bl	8001668 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1a8      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4925      	ldr	r1, [pc, #148]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
 80043d4:	e015      	b.n	8004402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_RCC_OscConfig+0x244>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd f944 	bl	8001668 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e4:	f7fd f940 	bl	8001668 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e187      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d036      	beq.n	800447c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <HAL_RCC_OscConfig+0x248>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd f924 	bl	8001668 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004424:	f7fd f920 	bl	8001668 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e167      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_OscConfig+0x240>)
 8004438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x200>
 8004442:	e01b      	b.n	800447c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_OscConfig+0x248>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fd f90d 	bl	8001668 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	e00e      	b.n	8004470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004452:	f7fd f909 	bl	8001668 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d907      	bls.n	8004470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e150      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
 8004464:	40023800 	.word	0x40023800
 8004468:	42470000 	.word	0x42470000
 800446c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b88      	ldr	r3, [pc, #544]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ea      	bne.n	8004452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8097 	beq.w	80045b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b81      	ldr	r3, [pc, #516]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b7d      	ldr	r3, [pc, #500]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b7a      	ldr	r3, [pc, #488]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b77      	ldr	r3, [pc, #476]	; (8004698 <HAL_RCC_OscConfig+0x474>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b74      	ldr	r3, [pc, #464]	; (8004698 <HAL_RCC_OscConfig+0x474>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a73      	ldr	r2, [pc, #460]	; (8004698 <HAL_RCC_OscConfig+0x474>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fd f8c9 	bl	8001668 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fd f8c5 	bl	8001668 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e10c      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_OscConfig+0x474>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x2ea>
 8004500:	4b64      	ldr	r3, [pc, #400]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a63      	ldr	r2, [pc, #396]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e01c      	b.n	8004548 <HAL_RCC_OscConfig+0x324>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b05      	cmp	r3, #5
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x30c>
 8004516:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a5e      	ldr	r2, [pc, #376]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	4b5c      	ldr	r3, [pc, #368]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a5b      	ldr	r2, [pc, #364]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0x324>
 8004530:	4b58      	ldr	r3, [pc, #352]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a57      	ldr	r2, [pc, #348]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
 800453c:	4b55      	ldr	r3, [pc, #340]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a54      	ldr	r2, [pc, #336]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004542:	f023 0304 	bic.w	r3, r3, #4
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fd f88a 	bl	8001668 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	e00a      	b.n	800456e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fd f886 	bl	8001668 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0cb      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ee      	beq.n	8004558 <HAL_RCC_OscConfig+0x334>
 800457a:	e014      	b.n	80045a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457c:	f7fd f874 	bl	8001668 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd f870 	bl	8001668 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0b5      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459a:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1ee      	bne.n	8004584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	4a38      	ldr	r2, [pc, #224]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a1 	beq.w	8004704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d05c      	beq.n	8004688 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d141      	bne.n	800465a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCC_OscConfig+0x478>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fd f844 	bl	8001668 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd f840 	bl	8001668 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e087      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	491b      	ldr	r1, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x478>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fd f819 	bl	8001668 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd f815 	bl	8001668 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e05c      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x416>
 8004658:	e054      	b.n	8004704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x478>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd f802 	bl	8001668 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fc fffe 	bl	8001668 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e045      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_OscConfig+0x470>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x444>
 8004686:	e03d      	b.n	8004704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e038      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
 8004694:	40023800 	.word	0x40023800
 8004698:	40007000 	.word	0x40007000
 800469c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_RCC_OscConfig+0x4ec>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d028      	beq.n	8004700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d121      	bne.n	8004700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11a      	bne.n	8004700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d8:	4293      	cmp	r3, r2
 80046da:	d111      	bne.n	8004700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0cc      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b68      	ldr	r3, [pc, #416]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d90c      	bls.n	8004750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b65      	ldr	r3, [pc, #404]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0b8      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004768:	4b59      	ldr	r3, [pc, #356]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004780:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a52      	ldr	r2, [pc, #328]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800478a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478c:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	494d      	ldr	r1, [pc, #308]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d044      	beq.n	8004834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d119      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e07f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e06f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e067      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f2:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0203 	bic.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4934      	ldr	r1, [pc, #208]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	4313      	orrs	r3, r2
 8004802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004804:	f7fc ff30 	bl	8001668 <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	e00a      	b.n	8004822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fc ff2c 	bl	8001668 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e04f      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 020c 	and.w	r2, r3, #12
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d1eb      	bne.n	800480c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d20c      	bcs.n	800485c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b20      	ldr	r3, [pc, #128]	; (80048cc <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e032      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4916      	ldr	r1, [pc, #88]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	490e      	ldr	r1, [pc, #56]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800489a:	f000 f821 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 800489e:	4602      	mov	r2, r0
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	490a      	ldr	r1, [pc, #40]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	5ccb      	ldrb	r3, [r1, r3]
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc fe90 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023c00 	.word	0x40023c00
 80048d0:	40023800 	.word	0x40023800
 80048d4:	0800a45c 	.word	0x0800a45c
 80048d8:	20000028 	.word	0x20000028
 80048dc:	2000002c 	.word	0x2000002c

080048e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b090      	sub	sp, #64	; 0x40
 80048e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	2300      	movs	r3, #0
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f8:	4b59      	ldr	r3, [pc, #356]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 030c 	and.w	r3, r3, #12
 8004900:	2b08      	cmp	r3, #8
 8004902:	d00d      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x40>
 8004904:	2b08      	cmp	r3, #8
 8004906:	f200 80a1 	bhi.w	8004a4c <HAL_RCC_GetSysClockFreq+0x16c>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x34>
 800490e:	2b04      	cmp	r3, #4
 8004910:	d003      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x3a>
 8004912:	e09b      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004914:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004918:	e09b      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800491a:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800491c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800491e:	e098      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004920:	4b4f      	ldr	r3, [pc, #316]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800492a:	4b4d      	ldr	r3, [pc, #308]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004936:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	099b      	lsrs	r3, r3, #6
 800493c:	2200      	movs	r2, #0
 800493e:	623b      	str	r3, [r7, #32]
 8004940:	627a      	str	r2, [r7, #36]	; 0x24
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004948:	2100      	movs	r1, #0
 800494a:	4b47      	ldr	r3, [pc, #284]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800494c:	fb03 f201 	mul.w	r2, r3, r1
 8004950:	2300      	movs	r3, #0
 8004952:	fb00 f303 	mul.w	r3, r0, r3
 8004956:	4413      	add	r3, r2
 8004958:	4a43      	ldr	r2, [pc, #268]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800495a:	fba0 1202 	umull	r1, r2, r0, r2
 800495e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004960:	460a      	mov	r2, r1
 8004962:	62ba      	str	r2, [r7, #40]	; 0x28
 8004964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004966:	4413      	add	r3, r2
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	2200      	movs	r2, #0
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800497a:	f7fb fc89 	bl	8000290 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4613      	mov	r3, r2
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004986:	e053      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004988:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	099b      	lsrs	r3, r3, #6
 800498e:	2200      	movs	r2, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	617a      	str	r2, [r7, #20]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800499a:	f04f 0b00 	mov.w	fp, #0
 800499e:	4652      	mov	r2, sl
 80049a0:	465b      	mov	r3, fp
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	0159      	lsls	r1, r3, #5
 80049ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b0:	0150      	lsls	r0, r2, #5
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	ebb2 080a 	subs.w	r8, r2, sl
 80049ba:	eb63 090b 	sbc.w	r9, r3, fp
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049d2:	ebb2 0408 	subs.w	r4, r2, r8
 80049d6:	eb63 0509 	sbc.w	r5, r3, r9
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	00eb      	lsls	r3, r5, #3
 80049e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e8:	00e2      	lsls	r2, r4, #3
 80049ea:	4614      	mov	r4, r2
 80049ec:	461d      	mov	r5, r3
 80049ee:	eb14 030a 	adds.w	r3, r4, sl
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	eb45 030b 	adc.w	r3, r5, fp
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a06:	4629      	mov	r1, r5
 8004a08:	028b      	lsls	r3, r1, #10
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a10:	4621      	mov	r1, r4
 8004a12:	028a      	lsls	r2, r1, #10
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a24:	f7fb fc34 	bl	8000290 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3740      	adds	r7, #64	; 0x40
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800
 8004a64:	00f42400 	.word	0x00f42400
 8004a68:	017d7840 	.word	0x017d7840

08004a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000028 	.word	0x20000028

08004a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fc4a 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fb1c 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e03c      	b.n	8004bb6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIM_Base_Start+0xa0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d013      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_TIM_Base_Start+0xa4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_TIM_Base_Start+0xa8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_TIM_Base_Start+0xac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIM_Base_Start+0x5c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <HAL_TIM_Base_Start+0xb0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d111      	bne.n	8004ba4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d010      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	e007      	b.n	8004bb4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40014000 	.word	0x40014000

08004bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f839 	bl	8004c76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f000 fa72 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <HAL_TIM_PWM_Start+0x24>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e022      	b.n	8004cf6 <HAL_TIM_PWM_Start+0x6a>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d109      	bne.n	8004cca <HAL_TIM_PWM_Start+0x3e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e015      	b.n	8004cf6 <HAL_TIM_PWM_Start+0x6a>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d109      	bne.n	8004ce4 <HAL_TIM_PWM_Start+0x58>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e008      	b.n	8004cf6 <HAL_TIM_PWM_Start+0x6a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e068      	b.n	8004dd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x82>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d0c:	e013      	b.n	8004d36 <HAL_TIM_PWM_Start+0xaa>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x92>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1c:	e00b      	b.n	8004d36 <HAL_TIM_PWM_Start+0xaa>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2c:	e003      	b.n	8004d36 <HAL_TIM_PWM_Start+0xaa>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fc84 	bl	800564c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <HAL_TIM_PWM_Start+0x14c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d107      	bne.n	8004d5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_TIM_PWM_Start+0x14c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x10e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d013      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x10e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_TIM_PWM_Start+0x150>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x10e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <HAL_TIM_PWM_Start+0x154>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x10e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <HAL_TIM_PWM_Start+0x158>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x10e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <HAL_TIM_PWM_Start+0x15c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d111      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b06      	cmp	r3, #6
 8004daa:	d010      	beq.n	8004dce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	e007      	b.n	8004dce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40014000 	.word	0x40014000

08004dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e0ae      	b.n	8004f68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	f200 809f 	bhi.w	8004f58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004f59 	.word	0x08004f59
 8004e28:	08004f59 	.word	0x08004f59
 8004e2c:	08004f59 	.word	0x08004f59
 8004e30:	08004e95 	.word	0x08004e95
 8004e34:	08004f59 	.word	0x08004f59
 8004e38:	08004f59 	.word	0x08004f59
 8004e3c:	08004f59 	.word	0x08004f59
 8004e40:	08004ed7 	.word	0x08004ed7
 8004e44:	08004f59 	.word	0x08004f59
 8004e48:	08004f59 	.word	0x08004f59
 8004e4c:	08004f59 	.word	0x08004f59
 8004e50:	08004f17 	.word	0x08004f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f9d0 	bl	8005200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0208 	orr.w	r2, r2, #8
 8004e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0204 	bic.w	r2, r2, #4
 8004e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	619a      	str	r2, [r3, #24]
      break;
 8004e92:	e064      	b.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fa16 	bl	80052cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6999      	ldr	r1, [r3, #24]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	021a      	lsls	r2, r3, #8
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	619a      	str	r2, [r3, #24]
      break;
 8004ed4:	e043      	b.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fa61 	bl	80053a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0208 	orr.w	r2, r2, #8
 8004ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	61da      	str	r2, [r3, #28]
      break;
 8004f14:	e023      	b.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 faab 	bl	8005478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	61da      	str	r2, [r3, #28]
      break;
 8004f56:	e002      	b.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0b4      	b.n	80050f6 <HAL_TIM_ConfigClockSource+0x186>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc4:	d03e      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0xd4>
 8004fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fca:	f200 8087 	bhi.w	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	f000 8086 	beq.w	80050e2 <HAL_TIM_ConfigClockSource+0x172>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	d87f      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b70      	cmp	r3, #112	; 0x70
 8004fde:	d01a      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0xa6>
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d87b      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d050      	beq.n	800508a <HAL_TIM_ConfigClockSource+0x11a>
 8004fe8:	2b60      	cmp	r3, #96	; 0x60
 8004fea:	d877      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b50      	cmp	r3, #80	; 0x50
 8004fee:	d03c      	beq.n	800506a <HAL_TIM_ConfigClockSource+0xfa>
 8004ff0:	2b50      	cmp	r3, #80	; 0x50
 8004ff2:	d873      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d058      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0x13a>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d86f      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d064      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x15a>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d86b      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d060      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x15a>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d867      	bhi.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05c      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	2b10      	cmp	r3, #16
 8005012:	d05a      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	e062      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6899      	ldr	r1, [r3, #8]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f000 faf1 	bl	800560c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	609a      	str	r2, [r3, #8]
      break;
 8005042:	e04f      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6899      	ldr	r1, [r3, #8]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f000 fada 	bl	800560c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005066:	609a      	str	r2, [r3, #8]
      break;
 8005068:	e03c      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6859      	ldr	r1, [r3, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	461a      	mov	r2, r3
 8005078:	f000 fa4e 	bl	8005518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2150      	movs	r1, #80	; 0x50
 8005082:	4618      	mov	r0, r3
 8005084:	f000 faa7 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 8005088:	e02c      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	f000 fa6d 	bl	8005576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2160      	movs	r1, #96	; 0x60
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fa97 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050a8:	e01c      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f000 fa2e 	bl	8005518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2140      	movs	r1, #64	; 0x40
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa87 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050c8:	e00c      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f000 fa7e 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050da:	e003      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	e000      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <TIM_Base_SetConfig+0xe4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a31      	ldr	r2, [pc, #196]	; (80051e8 <TIM_Base_SetConfig+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a30      	ldr	r2, [pc, #192]	; (80051ec <TIM_Base_SetConfig+0xec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x38>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <TIM_Base_SetConfig+0xf0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <TIM_Base_SetConfig+0xe4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01b      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d017      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <TIM_Base_SetConfig+0xe8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a21      	ldr	r2, [pc, #132]	; (80051ec <TIM_Base_SetConfig+0xec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <TIM_Base_SetConfig+0xf0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <TIM_Base_SetConfig+0xf4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <TIM_Base_SetConfig+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <TIM_Base_SetConfig+0xfc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <TIM_Base_SetConfig+0xe4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d103      	bne.n	80051d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	615a      	str	r2, [r3, #20]
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0302 	bic.w	r3, r3, #2
 8005248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <TIM_OC1_SetConfig+0xc8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10c      	bne.n	8005276 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0308 	bic.w	r3, r3, #8
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <TIM_OC1_SetConfig+0xc8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d111      	bne.n	80052a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000

080052cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <TIM_OC2_SetConfig+0xd4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10d      	bne.n	8005348 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <TIM_OC2_SetConfig+0xd4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d113      	bne.n	8005378 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000

080053a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <TIM_OC3_SetConfig+0xd0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10d      	bne.n	800541e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <TIM_OC3_SetConfig+0xd0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d113      	bne.n	800544e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800542c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000

08005478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	031b      	lsls	r3, r3, #12
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a10      	ldr	r2, [pc, #64]	; (8005514 <TIM_OC4_SetConfig+0x9c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000

08005518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0201 	bic.w	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f023 030a 	bic.w	r3, r3, #10
 8005554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005576:	b480      	push	{r7}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0210 	bic.w	r2, r3, #16
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	031b      	lsls	r3, r3, #12
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f043 0307 	orr.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	431a      	orrs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e050      	b.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d018      	beq.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d013      	beq.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00e      	beq.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d009      	beq.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a13      	ldr	r2, [pc, #76]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d10c      	bne.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	4313      	orrs	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40014000 	.word	0x40014000

08005774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800578c:	2302      	movs	r3, #2
 800578e:	e03d      	b.n	800580c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005818:	b084      	sub	sp, #16
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	f107 001c 	add.w	r0, r7, #28
 8005826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d122      	bne.n	8005876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d105      	bne.n	800586a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fbee 	bl	800704c <USB_CoreReset>
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e01a      	b.n	80058ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fbe2 	bl	800704c <USB_CoreReset>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800588c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
 800589e:	e005      	b.n	80058ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d10b      	bne.n	80058ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f043 0206 	orr.w	r2, r3, #6
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d6:	b004      	add	sp, #16
 80058d8:	4770      	bx	lr
	...

080058dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d165      	bne.n	80059bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4a41      	ldr	r2, [pc, #260]	; (80059f8 <USB_SetTurnaroundTime+0x11c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d906      	bls.n	8005906 <USB_SetTurnaroundTime+0x2a>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4a40      	ldr	r2, [pc, #256]	; (80059fc <USB_SetTurnaroundTime+0x120>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d202      	bcs.n	8005906 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005900:	230f      	movs	r3, #15
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e062      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4a3c      	ldr	r2, [pc, #240]	; (80059fc <USB_SetTurnaroundTime+0x120>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d306      	bcc.n	800591c <USB_SetTurnaroundTime+0x40>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a3b      	ldr	r2, [pc, #236]	; (8005a00 <USB_SetTurnaroundTime+0x124>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d202      	bcs.n	800591c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005916:	230e      	movs	r3, #14
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e057      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a38      	ldr	r2, [pc, #224]	; (8005a00 <USB_SetTurnaroundTime+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d306      	bcc.n	8005932 <USB_SetTurnaroundTime+0x56>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a37      	ldr	r2, [pc, #220]	; (8005a04 <USB_SetTurnaroundTime+0x128>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d202      	bcs.n	8005932 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800592c:	230d      	movs	r3, #13
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e04c      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <USB_SetTurnaroundTime+0x128>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d306      	bcc.n	8005948 <USB_SetTurnaroundTime+0x6c>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4a32      	ldr	r2, [pc, #200]	; (8005a08 <USB_SetTurnaroundTime+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d802      	bhi.n	8005948 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005942:	230c      	movs	r3, #12
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e041      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <USB_SetTurnaroundTime+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d906      	bls.n	800595e <USB_SetTurnaroundTime+0x82>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a2e      	ldr	r2, [pc, #184]	; (8005a0c <USB_SetTurnaroundTime+0x130>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d802      	bhi.n	800595e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005958:	230b      	movs	r3, #11
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e036      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a2a      	ldr	r2, [pc, #168]	; (8005a0c <USB_SetTurnaroundTime+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d906      	bls.n	8005974 <USB_SetTurnaroundTime+0x98>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <USB_SetTurnaroundTime+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d802      	bhi.n	8005974 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800596e:	230a      	movs	r3, #10
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e02b      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <USB_SetTurnaroundTime+0x134>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d906      	bls.n	800598a <USB_SetTurnaroundTime+0xae>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4a25      	ldr	r2, [pc, #148]	; (8005a14 <USB_SetTurnaroundTime+0x138>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d202      	bcs.n	800598a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005984:	2309      	movs	r3, #9
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e020      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <USB_SetTurnaroundTime+0x138>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d306      	bcc.n	80059a0 <USB_SetTurnaroundTime+0xc4>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <USB_SetTurnaroundTime+0x13c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d802      	bhi.n	80059a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800599a:	2308      	movs	r3, #8
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e015      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <USB_SetTurnaroundTime+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d906      	bls.n	80059b6 <USB_SetTurnaroundTime+0xda>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <USB_SetTurnaroundTime+0x140>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d202      	bcs.n	80059b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059b0:	2307      	movs	r3, #7
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e00a      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059b6:	2306      	movs	r3, #6
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e007      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059c2:	2309      	movs	r3, #9
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e001      	b.n	80059cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059c8:	2309      	movs	r3, #9
 80059ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	029b      	lsls	r3, r3, #10
 80059e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	00d8acbf 	.word	0x00d8acbf
 80059fc:	00e4e1c0 	.word	0x00e4e1c0
 8005a00:	00f42400 	.word	0x00f42400
 8005a04:	01067380 	.word	0x01067380
 8005a08:	011a499f 	.word	0x011a499f
 8005a0c:	01312cff 	.word	0x01312cff
 8005a10:	014ca43f 	.word	0x014ca43f
 8005a14:	016e3600 	.word	0x016e3600
 8005a18:	01a6ab1f 	.word	0x01a6ab1f
 8005a1c:	01e84800 	.word	0x01e84800

08005a20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f043 0201 	orr.w	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d115      	bne.n	8005ab2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a92:	2001      	movs	r0, #1
 8005a94:	f7fb fdf4 	bl	8001680 <HAL_Delay>
      ms++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 fa45 	bl	8006f2e <USB_GetMode>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d01e      	beq.n	8005ae8 <USB_SetCurrentMode+0x84>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b31      	cmp	r3, #49	; 0x31
 8005aae:	d9f0      	bls.n	8005a92 <USB_SetCurrentMode+0x2e>
 8005ab0:	e01a      	b.n	8005ae8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d115      	bne.n	8005ae4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f7fb fddb 	bl	8001680 <HAL_Delay>
      ms++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fa2c 	bl	8006f2e <USB_GetMode>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <USB_SetCurrentMode+0x84>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b31      	cmp	r3, #49	; 0x31
 8005ae0:	d9f0      	bls.n	8005ac4 <USB_SetCurrentMode+0x60>
 8005ae2:	e001      	b.n	8005ae8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e005      	b.n	8005af4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b32      	cmp	r3, #50	; 0x32
 8005aec:	d101      	bne.n	8005af2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005afc:	b084      	sub	sp, #16
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e009      	b.n	8005b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3340      	adds	r3, #64	; 0x40
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b0e      	cmp	r3, #14
 8005b34:	d9f2      	bls.n	8005b1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11c      	bne.n	8005b76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
 8005b74:	e00b      	b.n	8005b8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	461a      	mov	r2, r3
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10c      	bne.n	8005bce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f965 	bl	8005e8c <USB_SetDevSpeed>
 8005bc2:	e008      	b.n	8005bd6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f960 	bl	8005e8c <USB_SetDevSpeed>
 8005bcc:	e003      	b.n	8005bd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bce:	2103      	movs	r1, #3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f95b 	bl	8005e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8f3 	bl	8005dc4 <USB_FlushTxFifo>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f91f 	bl	8005e2c <USB_FlushRxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	461a      	mov	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e043      	b.n	8005caa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d118      	bne.n	8005c6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e013      	b.n	8005c7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e008      	b.n	8005c7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3b7      	bcc.n	8005c22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e043      	b.n	8005d40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cce:	d118      	bne.n	8005d02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e013      	b.n	8005d14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e008      	b.n	8005d14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	461a      	mov	r2, r3
 8005d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3b7      	bcc.n	8005cb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <USB_DevInit+0x2c4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d107      	bne.n	8005db0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	803c3800 	.word	0x803c3800

08005dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <USB_FlushTxFifo+0x64>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e01b      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	daf2      	bge.n	8005dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	019b      	lsls	r3, r3, #6
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <USB_FlushTxFifo+0x64>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	00030d40 	.word	0x00030d40

08005e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <USB_FlushRxFifo+0x5c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e018      	b.n	8005e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	daf2      	bge.n	8005e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <USB_FlushRxFifo+0x5c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e006      	b.n	8005e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d0f0      	beq.n	8005e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	00030d40 	.word	0x00030d40

08005e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
 8005ee2:	e00a      	b.n	8005efa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d002      	beq.n	8005ef0 <USB_GetDevSpeed+0x32>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b06      	cmp	r3, #6
 8005eee:	d102      	bne.n	8005ef6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	75fb      	strb	r3, [r7, #23]
 8005ef4:	e001      	b.n	8005efa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ef6:	230f      	movs	r3, #15
 8005ef8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d13a      	bne.n	8005f9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d155      	bne.n	8006008 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f80:	4313      	orrs	r3, r2
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e036      	b.n	8006008 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	2101      	movs	r1, #1
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d11a      	bne.n	8006008 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	791b      	ldrb	r3, [r3, #4]
 8005fec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006006:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d161      	bne.n	80060f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604a:	d11f      	bne.n	800608c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006066:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800606a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800608a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ac:	4013      	ands	r3, r2
 80060ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060d0:	4013      	ands	r3, r2
 80060d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	0159      	lsls	r1, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	4619      	mov	r1, r3
 80060f0:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <USB_DeactivateEndpoint+0x1b0>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
 80060f6:	e060      	b.n	80061ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610e:	d11f      	bne.n	8006150 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800612e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800614e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f303 	lsl.w	r3, r1, r3
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	43db      	mvns	r3, r3
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006170:	4013      	ands	r3, r2
 8006172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	43db      	mvns	r3, r3
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006194:	4013      	ands	r3, r2
 8006196:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	0159      	lsls	r1, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	440b      	add	r3, r1
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	4619      	mov	r1, r3
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <USB_DeactivateEndpoint+0x1b4>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	ec337800 	.word	0xec337800
 80061cc:	eff37800 	.word	0xeff37800

080061d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	f040 815c 	bne.w	80064aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d132      	bne.n	8006260 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006218:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800621c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800623c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006258:	0cdb      	lsrs	r3, r3, #19
 800625a:	04db      	lsls	r3, r3, #19
 800625c:	6113      	str	r3, [r2, #16]
 800625e:	e074      	b.n	800634a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627a:	0cdb      	lsrs	r3, r3, #19
 800627c:	04db      	lsls	r3, r3, #19
 800627e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800629e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	440b      	add	r3, r1
 80062bc:	1e59      	subs	r1, r3, #1
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80062c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062c8:	4b9d      	ldr	r3, [pc, #628]	; (8006540 <USB_EPStartXfer+0x370>)
 80062ca:	400b      	ands	r3, r1
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	0148      	lsls	r0, r1, #5
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	4401      	add	r1, r0
 80062d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062d8:	4313      	orrs	r3, r2
 80062da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f2:	69b9      	ldr	r1, [r7, #24]
 80062f4:	0148      	lsls	r0, r1, #5
 80062f6:	69f9      	ldr	r1, [r7, #28]
 80062f8:	4401      	add	r1, r0
 80062fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062fe:	4313      	orrs	r3, r2
 8006300:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d11f      	bne.n	800634a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006324:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006328:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006348:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d14b      	bne.n	80063e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	791b      	ldrb	r3, [r3, #4]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d128      	bne.n	80063c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d110      	bne.n	80063a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	e00f      	b.n	80063c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e133      	b.n	8006650 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006406:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d015      	beq.n	800643c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 811b 	beq.w	8006650 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	69f9      	ldr	r1, [r7, #28]
 8006432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006436:	4313      	orrs	r3, r2
 8006438:	634b      	str	r3, [r1, #52]	; 0x34
 800643a:	e109      	b.n	8006650 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d110      	bne.n	800646e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e00f      	b.n	800648e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	b298      	uxth	r0, r3
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4603      	mov	r3, r0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fade 	bl	8006a64 <USB_WritePacket>
 80064a8:	e0d2      	b.n	8006650 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	0cdb      	lsrs	r3, r3, #19
 80064c6:	04db      	lsls	r3, r3, #19
 80064c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d126      	bne.n	8006544 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650c:	69b9      	ldr	r1, [r7, #24]
 800650e:	0148      	lsls	r0, r1, #5
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	4401      	add	r1, r0
 8006514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006518:	4313      	orrs	r3, r2
 800651a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800653a:	6113      	str	r3, [r2, #16]
 800653c:	e03a      	b.n	80065b4 <USB_EPStartXfer+0x3e4>
 800653e:	bf00      	nop
 8006540:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4413      	add	r3, r2
 800654e:	1e5a      	subs	r2, r3, #1
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	fbb2 f3f3 	udiv	r3, r2, r3
 8006558:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	fb03 f202 	mul.w	r2, r3, r2
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	8afb      	ldrh	r3, [r7, #22]
 8006578:	04d9      	lsls	r1, r3, #19
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <USB_EPStartXfer+0x48c>)
 800657c:	400b      	ands	r3, r1
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	0148      	lsls	r0, r1, #5
 8006582:	69f9      	ldr	r1, [r7, #28]
 8006584:	4401      	add	r1, r0
 8006586:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800658a:	4313      	orrs	r3, r2
 800658c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	0148      	lsls	r0, r1, #5
 80065a8:	69f9      	ldr	r1, [r7, #28]
 80065aa:	4401      	add	r1, r0
 80065ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065b0:	4313      	orrs	r3, r2
 80065b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10d      	bne.n	80065d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6919      	ldr	r1, [r3, #16]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	460a      	mov	r2, r1
 80065d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	791b      	ldrb	r3, [r3, #4]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d128      	bne.n	8006630 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d110      	bne.n	8006610 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e00f      	b.n	8006630 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	1ff80000 	.word	0x1ff80000

08006660 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 80ce 	bne.w	800681e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d132      	bne.n	80066f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	0cdb      	lsrs	r3, r3, #19
 80066ea:	04db      	lsls	r3, r3, #19
 80066ec:	6113      	str	r3, [r2, #16]
 80066ee:	e04e      	b.n	800678e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	0cdb      	lsrs	r3, r3, #19
 800670c:	04db      	lsls	r3, r3, #19
 800670e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800672e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006732:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d903      	bls.n	8006748 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677e:	6939      	ldr	r1, [r7, #16]
 8006780:	0148      	lsls	r0, r1, #5
 8006782:	6979      	ldr	r1, [r7, #20]
 8006784:	4401      	add	r1, r0
 8006786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800678a:	4313      	orrs	r3, r2
 800678c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d11e      	bne.n	80067d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	461a      	mov	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e097      	b.n	8006902 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8083 	beq.w	8006902 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f303 	lsl.w	r3, r1, r3
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006818:	4313      	orrs	r3, r2
 800681a:	634b      	str	r3, [r1, #52]	; 0x34
 800681c:	e071      	b.n	8006902 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006838:	0cdb      	lsrs	r3, r3, #19
 800683a:	04db      	lsls	r3, r3, #19
 800683c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006858:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800685c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006860:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b0:	6939      	ldr	r1, [r7, #16]
 80068b2:	0148      	lsls	r0, r1, #5
 80068b4:	6979      	ldr	r1, [r7, #20]
 80068b6:	4401      	add	r1, r0
 80068b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068bc:	4313      	orrs	r3, r2
 80068be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10d      	bne.n	80068e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6919      	ldr	r1, [r3, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	460a      	mov	r2, r1
 80068e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006900:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d14a      	bne.n	80069c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006946:	f040 8086 	bne.w	8006a56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	7812      	ldrb	r2, [r2, #0]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800696c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006990:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f242 7210 	movw	r2, #10000	; 0x2710
 800699e:	4293      	cmp	r3, r2
 80069a0:	d902      	bls.n	80069a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
          break;
 80069a6:	e056      	b.n	8006a56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c0:	d0e7      	beq.n	8006992 <USB_EPStopXfer+0x82>
 80069c2:	e048      	b.n	8006a56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069dc:	d13b      	bne.n	8006a56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	7812      	ldrb	r2, [r2, #0]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d902      	bls.n	8006a3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3a:	e00c      	b.n	8006a56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a54:	d0e7      	beq.n	8006a26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b089      	sub	sp, #36	; 0x24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	460b      	mov	r3, r1
 8006a74:	71fb      	strb	r3, [r7, #7]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d123      	bne.n	8006ad2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a8a:	88bb      	ldrh	r3, [r7, #4]
 8006a8c:	3303      	adds	r3, #3
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e018      	b.n	8006aca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	031a      	lsls	r2, r3, #12
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3e2      	bcc.n	8006a98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3724      	adds	r7, #36	; 0x24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b08b      	sub	sp, #44	; 0x2c
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	089b      	lsrs	r3, r3, #2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	e014      	b.n	8006b36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	3301      	adds	r3, #1
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	3301      	adds	r3, #1
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	3301      	adds	r3, #1
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	6a3a      	ldr	r2, [r7, #32]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3e6      	bcc.n	8006b0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b3e:	8bfb      	ldrh	r3, [r7, #30]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01e      	beq.n	8006b82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f107 0310 	add.w	r3, r7, #16
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	701a      	strb	r2, [r3, #0]
      i++;
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	3301      	adds	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b76:	8bfb      	ldrh	r3, [r7, #30]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b7c:	8bfb      	ldrh	r3, [r7, #30]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ea      	bne.n	8006b58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	372c      	adds	r7, #44	; 0x2c
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	785b      	ldrb	r3, [r3, #1]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d12c      	bne.n	8006c06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	db12      	blt.n	8006be4 <USB_EPSetStall+0x54>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00f      	beq.n	8006be4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0151      	lsls	r1, r2, #5
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	440a      	add	r2, r1
 8006bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e02b      	b.n	8006c5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	db12      	blt.n	8006c3e <USB_EPSetStall+0xae>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00f      	beq.n	8006c3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d128      	bne.n	8006cda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d003      	beq.n	8006cb8 <USB_EPClearStall+0x4c>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	791b      	ldrb	r3, [r3, #4]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d138      	bne.n	8006d2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e027      	b.n	8006d2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d003      	beq.n	8006d0a <USB_EPClearStall+0x9e>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d10f      	bne.n	8006d2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db2:	f023 0302 	bic.w	r3, r3, #2
 8006db6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006de0:	f023 0303 	bic.w	r3, r3, #3
 8006de4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df4:	f043 0302 	orr.w	r3, r3, #2
 8006df8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	0c1b      	lsrs	r3, r3, #16
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b085      	sub	sp, #20
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	4013      	ands	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	b29b      	uxth	r3, r3
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b087      	sub	sp, #28
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	fa22 f303 	lsr.w	r3, r2, r3
 8006f02:	01db      	lsls	r3, r3, #7
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f20:	68bb      	ldr	r3, [r7, #8]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f68:	f023 0307 	bic.w	r3, r3, #7
 8006f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	333c      	adds	r3, #60	; 0x3c
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	4a26      	ldr	r2, [pc, #152]	; (8007048 <USB_EP0_OutStart+0xb8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d90a      	bls.n	8006fca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc4:	d101      	bne.n	8006fca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e037      	b.n	800703a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f043 0318 	orr.w	r3, r3, #24
 8006ffc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007010:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d10f      	bne.n	8007038 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	4f54300a 	.word	0x4f54300a

0800704c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <USB_CoreReset+0x64>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d901      	bls.n	800706a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e01b      	b.n	80070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	daf2      	bge.n	8007058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f043 0201 	orr.w	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <USB_CoreReset+0x64>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d0f0      	beq.n	8007082 <USB_CoreReset+0x36>

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	00030d40 	.word	0x00030d40

080070b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070c4:	f002 fca2 	bl	8009a0c <USBD_static_malloc>
 80070c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32b0      	adds	r2, #176	; 0xb0
 80070da:	2100      	movs	r1, #0
 80070dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0d4      	b.n	800728e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070e8:	2100      	movs	r1, #0
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f002 fcf2 	bl	8009ad4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32b0      	adds	r2, #176	; 0xb0
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32b0      	adds	r2, #176	; 0xb0
 800710a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7c1b      	ldrb	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d138      	bne.n	800718e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800711c:	4b5e      	ldr	r3, [pc, #376]	; (8007298 <USBD_CDC_Init+0x1e4>)
 800711e:	7819      	ldrb	r1, [r3, #0]
 8007120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007124:	2202      	movs	r2, #2
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f002 fb4d 	bl	80097c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800712c:	4b5a      	ldr	r3, [pc, #360]	; (8007298 <USBD_CDC_Init+0x1e4>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 020f 	and.w	r2, r3, #15
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	3324      	adds	r3, #36	; 0x24
 8007142:	2201      	movs	r2, #1
 8007144:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007146:	4b55      	ldr	r3, [pc, #340]	; (800729c <USBD_CDC_Init+0x1e8>)
 8007148:	7819      	ldrb	r1, [r3, #0]
 800714a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800714e:	2202      	movs	r2, #2
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f002 fb38 	bl	80097c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007156:	4b51      	ldr	r3, [pc, #324]	; (800729c <USBD_CDC_Init+0x1e8>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800716e:	2201      	movs	r2, #1
 8007170:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007172:	4b4b      	ldr	r3, [pc, #300]	; (80072a0 <USBD_CDC_Init+0x1ec>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	3326      	adds	r3, #38	; 0x26
 8007188:	2210      	movs	r2, #16
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e035      	b.n	80071fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <USBD_CDC_Init+0x1e4>)
 8007190:	7819      	ldrb	r1, [r3, #0]
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	2202      	movs	r2, #2
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f002 fb15 	bl	80097c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800719c:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <USBD_CDC_Init+0x1e4>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3324      	adds	r3, #36	; 0x24
 80071b2:	2201      	movs	r2, #1
 80071b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <USBD_CDC_Init+0x1e8>)
 80071b8:	7819      	ldrb	r1, [r3, #0]
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	2202      	movs	r2, #2
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 fb01 	bl	80097c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071c4:	4b35      	ldr	r3, [pc, #212]	; (800729c <USBD_CDC_Init+0x1e8>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 020f 	and.w	r2, r3, #15
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071dc:	2201      	movs	r2, #1
 80071de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071e0:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <USBD_CDC_Init+0x1ec>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f003 020f 	and.w	r2, r3, #15
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	3326      	adds	r3, #38	; 0x26
 80071f6:	2210      	movs	r2, #16
 80071f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071fa:	4b29      	ldr	r3, [pc, #164]	; (80072a0 <USBD_CDC_Init+0x1ec>)
 80071fc:	7819      	ldrb	r1, [r3, #0]
 80071fe:	2308      	movs	r3, #8
 8007200:	2203      	movs	r2, #3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fadf 	bl	80097c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007208:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <USBD_CDC_Init+0x1ec>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3324      	adds	r3, #36	; 0x24
 800721e:	2201      	movs	r2, #1
 8007220:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	33b0      	adds	r3, #176	; 0xb0
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007258:	2302      	movs	r3, #2
 800725a:	e018      	b.n	800728e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7c1b      	ldrb	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <USBD_CDC_Init+0x1e8>)
 8007266:	7819      	ldrb	r1, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800726e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fb96 	bl	80099a4 <USBD_LL_PrepareReceive>
 8007278:	e008      	b.n	800728c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800727a:	4b08      	ldr	r3, [pc, #32]	; (800729c <USBD_CDC_Init+0x1e8>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007284:	2340      	movs	r3, #64	; 0x40
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f002 fb8c 	bl	80099a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200000bb 	.word	0x200000bb
 800729c:	200000bc 	.word	0x200000bc
 80072a0:	200000bd 	.word	0x200000bd

080072a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072b0:	4b3a      	ldr	r3, [pc, #232]	; (800739c <USBD_CDC_DeInit+0xf8>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f002 faab 	bl	8009812 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072bc:	4b37      	ldr	r3, [pc, #220]	; (800739c <USBD_CDC_DeInit+0xf8>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3324      	adds	r3, #36	; 0x24
 80072d2:	2200      	movs	r2, #0
 80072d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072d6:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <USBD_CDC_DeInit+0xfc>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 fa98 	bl	8009812 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072e2:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <USBD_CDC_DeInit+0xfc>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f003 020f 	and.w	r2, r3, #15
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072fa:	2200      	movs	r2, #0
 80072fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <USBD_CDC_DeInit+0x100>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f002 fa84 	bl	8009812 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800730a:	4b26      	ldr	r3, [pc, #152]	; (80073a4 <USBD_CDC_DeInit+0x100>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	f003 020f 	and.w	r2, r3, #15
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	2200      	movs	r2, #0
 8007322:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007324:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <USBD_CDC_DeInit+0x100>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3326      	adds	r3, #38	; 0x26
 800733a:	2200      	movs	r2, #0
 800733c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	32b0      	adds	r2, #176	; 0xb0
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01f      	beq.n	8007390 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	33b0      	adds	r3, #176	; 0xb0
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	; 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	4618      	mov	r0, r3
 8007374:	f002 fb58 	bl	8009a28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32b0      	adds	r2, #176	; 0xb0
 8007382:	2100      	movs	r1, #0
 8007384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200000bb 	.word	0x200000bb
 80073a0:	200000bc 	.word	0x200000bc
 80073a4:	200000bd 	.word	0x200000bd

080073a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	32b0      	adds	r2, #176	; 0xb0
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e0bf      	b.n	8007558 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d050      	beq.n	8007486 <USBD_CDC_Setup+0xde>
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	f040 80af 	bne.w	8007548 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d03a      	beq.n	8007468 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b25b      	sxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da1b      	bge.n	8007434 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	33b0      	adds	r3, #176	; 0xb0
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007412:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	88d2      	ldrh	r2, [r2, #6]
 8007418:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	88db      	ldrh	r3, [r3, #6]
 800741e:	2b07      	cmp	r3, #7
 8007420:	bf28      	it	cs
 8007422:	2307      	movcs	r3, #7
 8007424:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	89fa      	ldrh	r2, [r7, #14]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fd89 	bl	8008f44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007432:	e090      	b.n	8007556 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785a      	ldrb	r2, [r3, #1]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	88db      	ldrh	r3, [r3, #6]
 8007442:	2b3f      	cmp	r3, #63	; 0x3f
 8007444:	d803      	bhi.n	800744e <USBD_CDC_Setup+0xa6>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	88db      	ldrh	r3, [r3, #6]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	e000      	b.n	8007450 <USBD_CDC_Setup+0xa8>
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007456:	6939      	ldr	r1, [r7, #16]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800745e:	461a      	mov	r2, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 fd9b 	bl	8008f9c <USBD_CtlPrepareRx>
      break;
 8007466:	e076      	b.n	8007556 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	33b0      	adds	r3, #176	; 0xb0
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	7850      	ldrb	r0, [r2, #1]
 800747e:	2200      	movs	r2, #0
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	4798      	blx	r3
      break;
 8007484:	e067      	b.n	8007556 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b0b      	cmp	r3, #11
 800748c:	d851      	bhi.n	8007532 <USBD_CDC_Setup+0x18a>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBD_CDC_Setup+0xec>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074c5 	.word	0x080074c5
 8007498:	08007541 	.word	0x08007541
 800749c:	08007533 	.word	0x08007533
 80074a0:	08007533 	.word	0x08007533
 80074a4:	08007533 	.word	0x08007533
 80074a8:	08007533 	.word	0x08007533
 80074ac:	08007533 	.word	0x08007533
 80074b0:	08007533 	.word	0x08007533
 80074b4:	08007533 	.word	0x08007533
 80074b8:	08007533 	.word	0x08007533
 80074bc:	080074ef 	.word	0x080074ef
 80074c0:	08007519 	.word	0x08007519
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d107      	bne.n	80074e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074d0:	f107 030a 	add.w	r3, r7, #10
 80074d4:	2202      	movs	r2, #2
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fd33 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074de:	e032      	b.n	8007546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fcbd 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	75fb      	strb	r3, [r7, #23]
          break;
 80074ec:	e02b      	b.n	8007546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d107      	bne.n	800750a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074fa:	f107 030d 	add.w	r3, r7, #13
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fd1e 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007508:	e01d      	b.n	8007546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fca8 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	75fb      	strb	r3, [r7, #23]
          break;
 8007516:	e016      	b.n	8007546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b03      	cmp	r3, #3
 8007522:	d00f      	beq.n	8007544 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fc9b 	bl	8008e62 <USBD_CtlError>
            ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007530:	e008      	b.n	8007544 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fc94 	bl	8008e62 <USBD_CtlError>
          ret = USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	75fb      	strb	r3, [r7, #23]
          break;
 800753e:	e002      	b.n	8007546 <USBD_CDC_Setup+0x19e>
          break;
 8007540:	bf00      	nop
 8007542:	e008      	b.n	8007556 <USBD_CDC_Setup+0x1ae>
          break;
 8007544:	bf00      	nop
      }
      break;
 8007546:	e006      	b.n	8007556 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fc89 	bl	8008e62 <USBD_CtlError>
      ret = USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	bf00      	nop
  }

  return (uint8_t)ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007572:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32b0      	adds	r2, #176	; 0xb0
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	e065      	b.n	8007656 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	32b0      	adds	r2, #176	; 0xb0
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	f003 020f 	and.w	r2, r3, #15
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	440b      	add	r3, r1
 80075ac:	3318      	adds	r3, #24
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d02f      	beq.n	8007614 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	f003 020f 	and.w	r2, r3, #15
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	3318      	adds	r3, #24
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	f003 010f 	and.w	r1, r3, #15
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	460b      	mov	r3, r1
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	440b      	add	r3, r1
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4403      	add	r3, r0
 80075dc:	3348      	adds	r3, #72	; 0x48
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d112      	bne.n	8007614 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	3318      	adds	r3, #24
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007606:	78f9      	ldrb	r1, [r7, #3]
 8007608:	2300      	movs	r3, #0
 800760a:	2200      	movs	r2, #0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f002 f9a8 	bl	8009962 <USBD_LL_Transmit>
 8007612:	e01f      	b.n	8007654 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	33b0      	adds	r3, #176	; 0xb0
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d010      	beq.n	8007654 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	33b0      	adds	r3, #176	; 0xb0
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32b0      	adds	r2, #176	; 0xb0
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e01a      	b.n	80076c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f002 f9a6 	bl	80099e6 <USBD_LL_GetRxDataSize>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	33b0      	adds	r3, #176	; 0xb0
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076c0:	4611      	mov	r1, r2
 80076c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	32b0      	adds	r2, #176	; 0xb0
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e025      	b.n	800773c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	33b0      	adds	r3, #176	; 0xb0
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01a      	beq.n	800773a <USBD_CDC_EP0_RxReady+0x6c>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800770a:	2bff      	cmp	r3, #255	; 0xff
 800770c:	d015      	beq.n	800773a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	33b0      	adds	r3, #176	; 0xb0
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007726:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800772e:	b292      	uxth	r2, r2
 8007730:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800774c:	2182      	movs	r1, #130	; 0x82
 800774e:	4818      	ldr	r0, [pc, #96]	; (80077b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007750:	f000 fd4f 	bl	80081f2 <USBD_GetEpDesc>
 8007754:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007756:	2101      	movs	r1, #1
 8007758:	4815      	ldr	r0, [pc, #84]	; (80077b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800775a:	f000 fd4a 	bl	80081f2 <USBD_GetEpDesc>
 800775e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007760:	2181      	movs	r1, #129	; 0x81
 8007762:	4813      	ldr	r0, [pc, #76]	; (80077b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007764:	f000 fd45 	bl	80081f2 <USBD_GetEpDesc>
 8007768:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2210      	movs	r2, #16
 8007774:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d006      	beq.n	800778a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	2200      	movs	r2, #0
 8007780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007798:	711a      	strb	r2, [r3, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2243      	movs	r2, #67	; 0x43
 80077a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000078 	.word	0x20000078

080077b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077bc:	2182      	movs	r1, #130	; 0x82
 80077be:	4818      	ldr	r0, [pc, #96]	; (8007820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077c0:	f000 fd17 	bl	80081f2 <USBD_GetEpDesc>
 80077c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077c6:	2101      	movs	r1, #1
 80077c8:	4815      	ldr	r0, [pc, #84]	; (8007820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077ca:	f000 fd12 	bl	80081f2 <USBD_GetEpDesc>
 80077ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077d0:	2181      	movs	r1, #129	; 0x81
 80077d2:	4813      	ldr	r0, [pc, #76]	; (8007820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077d4:	f000 fd0d 	bl	80081f2 <USBD_GetEpDesc>
 80077d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2210      	movs	r2, #16
 80077e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2200      	movs	r2, #0
 80077f0:	711a      	strb	r2, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f042 0202 	orr.w	r2, r2, #2
 80077f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	711a      	strb	r2, [r3, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f042 0202 	orr.w	r2, r2, #2
 800780c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2243      	movs	r2, #67	; 0x43
 8007812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000078 	.word	0x20000078

08007824 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800782c:	2182      	movs	r1, #130	; 0x82
 800782e:	4818      	ldr	r0, [pc, #96]	; (8007890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007830:	f000 fcdf 	bl	80081f2 <USBD_GetEpDesc>
 8007834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007836:	2101      	movs	r1, #1
 8007838:	4815      	ldr	r0, [pc, #84]	; (8007890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800783a:	f000 fcda 	bl	80081f2 <USBD_GetEpDesc>
 800783e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007840:	2181      	movs	r1, #129	; 0x81
 8007842:	4813      	ldr	r0, [pc, #76]	; (8007890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007844:	f000 fcd5 	bl	80081f2 <USBD_GetEpDesc>
 8007848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2210      	movs	r2, #16
 8007854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d006      	beq.n	800786a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2200      	movs	r2, #0
 8007860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007864:	711a      	strb	r2, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007878:	711a      	strb	r2, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2243      	movs	r2, #67	; 0x43
 8007882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000078 	.word	0x20000078

08007894 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	220a      	movs	r2, #10
 80078a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000034 	.word	0x20000034

080078b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e009      	b.n	80078dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	33b0      	adds	r3, #176	; 0xb0
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	32b0      	adds	r2, #176	; 0xb0
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800790a:	2303      	movs	r3, #3
 800790c:	e008      	b.n	8007920 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32b0      	adds	r2, #176	; 0xb0
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e004      	b.n	800795a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	32b0      	adds	r2, #176	; 0xb0
 800797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32b0      	adds	r2, #176	; 0xb0
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	e025      	b.n	80079e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11f      	bne.n	80079e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <USBD_CDC_TransmitPacket+0x88>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 020f 	and.w	r2, r3, #15
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4403      	add	r3, r0
 80079c6:	3318      	adds	r3, #24
 80079c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <USBD_CDC_TransmitPacket+0x88>)
 80079cc:	7819      	ldrb	r1, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 ffc1 	bl	8009962 <USBD_LL_Transmit>

    ret = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200000bb 	.word	0x200000bb

080079f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32b0      	adds	r2, #176	; 0xb0
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32b0      	adds	r2, #176	; 0xb0
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e018      	b.n	8007a54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7c1b      	ldrb	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <USBD_CDC_ReceivePacket+0x68>)
 8007a2c:	7819      	ldrb	r1, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 ffb3 	bl	80099a4 <USBD_LL_PrepareReceive>
 8007a3e:	e008      	b.n	8007a52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a40:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <USBD_CDC_ReceivePacket+0x68>)
 8007a42:	7819      	ldrb	r1, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 ffa9 	bl	80099a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	200000bc 	.word	0x200000bc

08007a60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e01f      	b.n	8007ab8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 fe23 	bl	80096f8 <USBD_LL_Init>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e025      	b.n	8007b24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32ae      	adds	r2, #174	; 0xae
 8007aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00f      	beq.n	8007b14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32ae      	adds	r2, #174	; 0xae
 8007afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	f107 020e 	add.w	r2, r7, #14
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 fe2b 	bl	8009790 <USBD_LL_Start>
 8007b3a:	4603      	mov	r3, r0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	4611      	mov	r1, r2
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f908 	bl	8008dee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bec:	461a      	mov	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d01a      	beq.n	8007c38 <USBD_LL_SetupStage+0x72>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d822      	bhi.n	8007c4c <USBD_LL_SetupStage+0x86>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <USBD_LL_SetupStage+0x4a>
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d00a      	beq.n	8007c24 <USBD_LL_SetupStage+0x5e>
 8007c0e:	e01d      	b.n	8007c4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fb5f 	bl	80082dc <USBD_StdDevReq>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73fb      	strb	r3, [r7, #15]
      break;
 8007c22:	e020      	b.n	8007c66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fbc7 	bl	80083c0 <USBD_StdItfReq>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]
      break;
 8007c36:	e016      	b.n	8007c66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc29 	bl	8008498 <USBD_StdEPReq>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	e00c      	b.n	8007c66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fdf8 	bl	8009850 <USBD_LL_StallEP>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
      break;
 8007c64:	bf00      	nop
  }

  return ret;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c82:	7afb      	ldrb	r3, [r7, #11]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d16e      	bne.n	8007d66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 8098 	bne.w	8007dcc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d913      	bls.n	8007cd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	bf28      	it	cs
 8007cc2:	4613      	movcs	r3, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f001 f984 	bl	8008fd6 <USBD_CtlContinueRx>
 8007cce:	e07d      	b.n	8007dcc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d014      	beq.n	8007d08 <USBD_LL_DataOutStage+0x98>
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d81d      	bhi.n	8007d1e <USBD_LL_DataOutStage+0xae>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <USBD_LL_DataOutStage+0x7c>
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d003      	beq.n	8007cf2 <USBD_LL_DataOutStage+0x82>
 8007cea:	e018      	b.n	8007d1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75bb      	strb	r3, [r7, #22]
            break;
 8007cf0:	e018      	b.n	8007d24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa5e 	bl	80081be <USBD_CoreFindIF>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75bb      	strb	r3, [r7, #22]
            break;
 8007d06:	e00d      	b.n	8007d24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	4619      	mov	r1, r3
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fa60 	bl	80081d8 <USBD_CoreFindEP>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d1c:	e002      	b.n	8007d24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75bb      	strb	r3, [r7, #22]
            break;
 8007d22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d24:	7dbb      	ldrb	r3, [r7, #22]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d113      	bne.n	8007d5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d36:	7dba      	ldrb	r2, [r7, #22]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	32ae      	adds	r2, #174	; 0xae
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d46:	7dba      	ldrb	r2, [r7, #22]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d4e:	7dba      	ldrb	r2, [r7, #22]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	32ae      	adds	r2, #174	; 0xae
 8007d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f001 f94a 	bl	8008ff8 <USBD_CtlSendStatus>
 8007d64:	e032      	b.n	8007dcc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fa31 	bl	80081d8 <USBD_CoreFindEP>
 8007d76:	4603      	mov	r3, r0
 8007d78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d7a:	7dbb      	ldrb	r3, [r7, #22]
 8007d7c:	2bff      	cmp	r3, #255	; 0xff
 8007d7e:	d025      	beq.n	8007dcc <USBD_LL_DataOutStage+0x15c>
 8007d80:	7dbb      	ldrb	r3, [r7, #22]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d122      	bne.n	8007dcc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d117      	bne.n	8007dc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d92:	7dba      	ldrb	r2, [r7, #22]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	32ae      	adds	r2, #174	; 0xae
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007da2:	7dba      	ldrb	r2, [r7, #22]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007daa:	7dba      	ldrb	r2, [r7, #22]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	32ae      	adds	r2, #174	; 0xae
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	7afa      	ldrb	r2, [r7, #11]
 8007db8:	4611      	mov	r1, r2
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	4798      	blx	r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	e000      	b.n	8007dce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	460b      	mov	r3, r1
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d16f      	bne.n	8007eca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3314      	adds	r3, #20
 8007dee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d15a      	bne.n	8007eb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d914      	bls.n	8007e30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f001 f8ac 	bl	8008f7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	2100      	movs	r1, #0
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f001 fdbb 	bl	80099a4 <USBD_LL_PrepareReceive>
 8007e2e:	e03f      	b.n	8007eb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d11c      	bne.n	8007e76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d316      	bcc.n	8007e76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d20f      	bcs.n	8007e76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 f88d 	bl	8008f7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 fd98 	bl	80099a4 <USBD_LL_PrepareReceive>
 8007e74:	e01c      	b.n	8007eb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d10f      	bne.n	8007ea2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 fcd3 	bl	8009850 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 f8b7 	bl	800901e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d03a      	beq.n	8007f30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fe42 	bl	8007b44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ec8:	e032      	b.n	8007f30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f97f 	bl	80081d8 <USBD_CoreFindEP>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	2bff      	cmp	r3, #255	; 0xff
 8007ee2:	d025      	beq.n	8007f30 <USBD_LL_DataInStage+0x15a>
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d122      	bne.n	8007f30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d11c      	bne.n	8007f30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ef6:	7dfa      	ldrb	r2, [r7, #23]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	32ae      	adds	r2, #174	; 0xae
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d014      	beq.n	8007f30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f06:	7dfa      	ldrb	r2, [r7, #23]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f0e:	7dfa      	ldrb	r2, [r7, #23]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	32ae      	adds	r2, #174	; 0xae
 8007f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	7afa      	ldrb	r2, [r7, #11]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	e000      	b.n	8007f32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d014      	beq.n	8007fa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6852      	ldr	r2, [r2, #4]
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	4611      	mov	r1, r2
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fa0:	2340      	movs	r3, #64	; 0x40
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fc0d 	bl	80097c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2240      	movs	r2, #64	; 0x40
 8007fb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fbff 	bl	80097c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2240      	movs	r2, #64	; 0x40
 8007fd2:	621a      	str	r2, [r3, #32]

  return ret;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2204      	movs	r2, #4
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b04      	cmp	r3, #4
 800803c:	d106      	bne.n	800804c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008044:	b2da      	uxtb	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b03      	cmp	r3, #3
 800806c:	d110      	bne.n	8008090 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	32ae      	adds	r2, #174	; 0xae
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e01c      	b.n	80080f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d115      	bne.n	80080f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	32ae      	adds	r2, #174	; 0xae
 80080e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	4611      	mov	r1, r2
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	32ae      	adds	r2, #174	; 0xae
 8008114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	e01c      	b.n	800815a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b03      	cmp	r3, #3
 800812a:	d115      	bne.n	8008158 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	; 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	; 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6852      	ldr	r2, [r2, #4]
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	4611      	mov	r1, r2
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081b0:	2303      	movs	r3, #3
 80081b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	429a      	cmp	r2, r3
 8008218:	d920      	bls.n	800825c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008222:	e013      	b.n	800824c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008224:	f107 030a 	add.w	r3, r7, #10
 8008228:	4619      	mov	r1, r3
 800822a:	6978      	ldr	r0, [r7, #20]
 800822c:	f000 f81b 	bl	8008266 <USBD_GetNextDesc>
 8008230:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b05      	cmp	r3, #5
 8008238:	d108      	bne.n	800824c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	789b      	ldrb	r3, [r3, #2]
 8008242:	78fa      	ldrb	r2, [r7, #3]
 8008244:	429a      	cmp	r2, r3
 8008246:	d008      	beq.n	800825a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	885b      	ldrh	r3, [r3, #2]
 8008250:	b29a      	uxth	r2, r3
 8008252:	897b      	ldrh	r3, [r7, #10]
 8008254:	429a      	cmp	r2, r3
 8008256:	d8e5      	bhi.n	8008224 <USBD_GetEpDesc+0x32>
 8008258:	e000      	b.n	800825c <USBD_GetEpDesc+0x6a>
          break;
 800825a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800825c:	693b      	ldr	r3, [r7, #16]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	4413      	add	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008292:	68fb      	ldr	r3, [r7, #12]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	3301      	adds	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082be:	8a3b      	ldrh	r3, [r7, #16]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	b21a      	sxth	r2, r3
 80082c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b21b      	sxth	r3, r3
 80082cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082ce:	89fb      	ldrh	r3, [r7, #14]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	371c      	adds	r7, #28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d005      	beq.n	8008302 <USBD_StdDevReq+0x26>
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d857      	bhi.n	80083aa <USBD_StdDevReq+0xce>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00f      	beq.n	800831e <USBD_StdDevReq+0x42>
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d153      	bne.n	80083aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	32ae      	adds	r2, #174	; 0xae
 800830c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
      break;
 800831c:	e04a      	b.n	80083b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b09      	cmp	r3, #9
 8008324:	d83b      	bhi.n	800839e <USBD_StdDevReq+0xc2>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_StdDevReq+0x50>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008381 	.word	0x08008381
 8008330:	08008395 	.word	0x08008395
 8008334:	0800839f 	.word	0x0800839f
 8008338:	0800838b 	.word	0x0800838b
 800833c:	0800839f 	.word	0x0800839f
 8008340:	0800835f 	.word	0x0800835f
 8008344:	08008355 	.word	0x08008355
 8008348:	0800839f 	.word	0x0800839f
 800834c:	08008377 	.word	0x08008377
 8008350:	08008369 	.word	0x08008369
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa3c 	bl	80087d4 <USBD_GetDescriptor>
          break;
 800835c:	e024      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fba1 	bl	8008aa8 <USBD_SetAddress>
          break;
 8008366:	e01f      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fbe0 	bl	8008b30 <USBD_SetConfig>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
          break;
 8008374:	e018      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc83 	bl	8008c84 <USBD_GetConfig>
          break;
 800837e:	e013      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fcb4 	bl	8008cf0 <USBD_GetStatus>
          break;
 8008388:	e00e      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fce3 	bl	8008d58 <USBD_SetFeature>
          break;
 8008392:	e009      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fd07 	bl	8008daa <USBD_ClrFeature>
          break;
 800839c:	e004      	b.n	80083a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fd5e 	bl	8008e62 <USBD_CtlError>
          break;
 80083a6:	bf00      	nop
      }
      break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fd58 	bl	8008e62 <USBD_CtlError>
      break;
 80083b2:	bf00      	nop
  }

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop

080083c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d005      	beq.n	80083e6 <USBD_StdItfReq+0x26>
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d852      	bhi.n	8008484 <USBD_StdItfReq+0xc4>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <USBD_StdItfReq+0x26>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d14e      	bne.n	8008484 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d840      	bhi.n	8008476 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	889b      	ldrh	r3, [r3, #4]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d836      	bhi.n	800846c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fed9 	bl	80081be <USBD_CoreFindIF>
 800840c:	4603      	mov	r3, r0
 800840e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2bff      	cmp	r3, #255	; 0xff
 8008414:	d01d      	beq.n	8008452 <USBD_StdItfReq+0x92>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11a      	bne.n	8008452 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800841c:	7bba      	ldrb	r2, [r7, #14]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32ae      	adds	r2, #174	; 0xae
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800842c:	7bba      	ldrb	r2, [r7, #14]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008434:	7bba      	ldrb	r2, [r7, #14]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	32ae      	adds	r2, #174	; 0xae
 800843a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800844a:	e004      	b.n	8008456 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008450:	e001      	b.n	8008456 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008452:	2303      	movs	r3, #3
 8008454:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d110      	bne.n	8008480 <USBD_StdItfReq+0xc0>
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fdc7 	bl	8008ff8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800846a:	e009      	b.n	8008480 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fcf7 	bl	8008e62 <USBD_CtlError>
          break;
 8008474:	e004      	b.n	8008480 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fcf2 	bl	8008e62 <USBD_CtlError>
          break;
 800847e:	e000      	b.n	8008482 <USBD_StdItfReq+0xc2>
          break;
 8008480:	bf00      	nop
      }
      break;
 8008482:	e004      	b.n	800848e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fceb 	bl	8008e62 <USBD_CtlError>
      break;
 800848c:	bf00      	nop
  }

  return ret;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	889b      	ldrh	r3, [r3, #4]
 80084aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	d007      	beq.n	80084c8 <USBD_StdEPReq+0x30>
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	f200 817f 	bhi.w	80087bc <USBD_StdEPReq+0x324>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02a      	beq.n	8008518 <USBD_StdEPReq+0x80>
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	f040 817a 	bne.w	80087bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff fe83 	bl	80081d8 <USBD_CoreFindEP>
 80084d2:	4603      	mov	r3, r0
 80084d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084d6:	7b7b      	ldrb	r3, [r7, #13]
 80084d8:	2bff      	cmp	r3, #255	; 0xff
 80084da:	f000 8174 	beq.w	80087c6 <USBD_StdEPReq+0x32e>
 80084de:	7b7b      	ldrb	r3, [r7, #13]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f040 8170 	bne.w	80087c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084e6:	7b7a      	ldrb	r2, [r7, #13]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084ee:	7b7a      	ldrb	r2, [r7, #13]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	32ae      	adds	r2, #174	; 0xae
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 8163 	beq.w	80087c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008500:	7b7a      	ldrb	r2, [r7, #13]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	32ae      	adds	r2, #174	; 0xae
 8008506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008516:	e156      	b.n	80087c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b03      	cmp	r3, #3
 800851e:	d008      	beq.n	8008532 <USBD_StdEPReq+0x9a>
 8008520:	2b03      	cmp	r3, #3
 8008522:	f300 8145 	bgt.w	80087b0 <USBD_StdEPReq+0x318>
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 809b 	beq.w	8008662 <USBD_StdEPReq+0x1ca>
 800852c:	2b01      	cmp	r3, #1
 800852e:	d03c      	beq.n	80085aa <USBD_StdEPReq+0x112>
 8008530:	e13e      	b.n	80087b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d002      	beq.n	8008544 <USBD_StdEPReq+0xac>
 800853e:	2b03      	cmp	r3, #3
 8008540:	d016      	beq.n	8008570 <USBD_StdEPReq+0xd8>
 8008542:	e02c      	b.n	800859e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00d      	beq.n	8008566 <USBD_StdEPReq+0xce>
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b80      	cmp	r3, #128	; 0x80
 800854e:	d00a      	beq.n	8008566 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f97b 	bl	8009850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 f977 	bl	8009850 <USBD_LL_StallEP>
 8008562:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008564:	e020      	b.n	80085a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fc7a 	bl	8008e62 <USBD_CtlError>
              break;
 800856e:	e01b      	b.n	80085a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	885b      	ldrh	r3, [r3, #2]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10e      	bne.n	8008596 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <USBD_StdEPReq+0xfe>
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b80      	cmp	r3, #128	; 0x80
 8008582:	d008      	beq.n	8008596 <USBD_StdEPReq+0xfe>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	88db      	ldrh	r3, [r3, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f95d 	bl	8009850 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fd2e 	bl	8008ff8 <USBD_CtlSendStatus>

              break;
 800859c:	e004      	b.n	80085a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fc5e 	bl	8008e62 <USBD_CtlError>
              break;
 80085a6:	bf00      	nop
          }
          break;
 80085a8:	e107      	b.n	80087ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d002      	beq.n	80085bc <USBD_StdEPReq+0x124>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d016      	beq.n	80085e8 <USBD_StdEPReq+0x150>
 80085ba:	e04b      	b.n	8008654 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00d      	beq.n	80085de <USBD_StdEPReq+0x146>
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b80      	cmp	r3, #128	; 0x80
 80085c6:	d00a      	beq.n	80085de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f93f 	bl	8009850 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 f93b 	bl	8009850 <USBD_LL_StallEP>
 80085da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085dc:	e040      	b.n	8008660 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fc3e 	bl	8008e62 <USBD_CtlError>
              break;
 80085e6:	e03b      	b.n	8008660 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	885b      	ldrh	r3, [r3, #2]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d136      	bne.n	800865e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d004      	beq.n	8008604 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 f945 	bl	800988e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fcf7 	bl	8008ff8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fde2 	bl	80081d8 <USBD_CoreFindEP>
 8008614:	4603      	mov	r3, r0
 8008616:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008618:	7b7b      	ldrb	r3, [r7, #13]
 800861a:	2bff      	cmp	r3, #255	; 0xff
 800861c:	d01f      	beq.n	800865e <USBD_StdEPReq+0x1c6>
 800861e:	7b7b      	ldrb	r3, [r7, #13]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11c      	bne.n	800865e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008624:	7b7a      	ldrb	r2, [r7, #13]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800862c:	7b7a      	ldrb	r2, [r7, #13]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32ae      	adds	r2, #174	; 0xae
 8008632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d010      	beq.n	800865e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800863c:	7b7a      	ldrb	r2, [r7, #13]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32ae      	adds	r2, #174	; 0xae
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	4798      	blx	r3
 800864e:	4603      	mov	r3, r0
 8008650:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008652:	e004      	b.n	800865e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc03 	bl	8008e62 <USBD_CtlError>
              break;
 800865c:	e000      	b.n	8008660 <USBD_StdEPReq+0x1c8>
              break;
 800865e:	bf00      	nop
          }
          break;
 8008660:	e0ab      	b.n	80087ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d002      	beq.n	8008674 <USBD_StdEPReq+0x1dc>
 800866e:	2b03      	cmp	r3, #3
 8008670:	d032      	beq.n	80086d8 <USBD_StdEPReq+0x240>
 8008672:	e097      	b.n	80087a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <USBD_StdEPReq+0x1f2>
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	2b80      	cmp	r3, #128	; 0x80
 800867e:	d004      	beq.n	800868a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbed 	bl	8008e62 <USBD_CtlError>
                break;
 8008688:	e091      	b.n	80087ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	da0b      	bge.n	80086aa <USBD_StdEPReq+0x212>
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	3310      	adds	r3, #16
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	3304      	adds	r3, #4
 80086a8:	e00b      	b.n	80086c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	3304      	adds	r3, #4
 80086c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2202      	movs	r2, #2
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fc37 	bl	8008f44 <USBD_CtlSendData>
              break;
 80086d6:	e06a      	b.n	80087ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da11      	bge.n	8008704 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	f003 020f 	and.w	r2, r3, #15
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	3324      	adds	r3, #36	; 0x24
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d117      	bne.n	800872a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fbb0 	bl	8008e62 <USBD_CtlError>
                  break;
 8008702:	e054      	b.n	80087ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 020f 	and.w	r2, r3, #15
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fb9d 	bl	8008e62 <USBD_CtlError>
                  break;
 8008728:	e041      	b.n	80087ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872e:	2b00      	cmp	r3, #0
 8008730:	da0b      	bge.n	800874a <USBD_StdEPReq+0x2b2>
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	3310      	adds	r3, #16
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4413      	add	r3, r2
 8008746:	3304      	adds	r3, #4
 8008748:	e00b      	b.n	8008762 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <USBD_StdEPReq+0x2d8>
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d103      	bne.n	8008778 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e00e      	b.n	8008796 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f8a5 	bl	80098cc <USBD_LL_IsStallEP>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e002      	b.n	8008796 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2202      	movs	r2, #2
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fbd1 	bl	8008f44 <USBD_CtlSendData>
              break;
 80087a2:	e004      	b.n	80087ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb5b 	bl	8008e62 <USBD_CtlError>
              break;
 80087ac:	bf00      	nop
          }
          break;
 80087ae:	e004      	b.n	80087ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fb55 	bl	8008e62 <USBD_CtlError>
          break;
 80087b8:	bf00      	nop
      }
      break;
 80087ba:	e005      	b.n	80087c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb4f 	bl	8008e62 <USBD_CtlError>
      break;
 80087c4:	e000      	b.n	80087c8 <USBD_StdEPReq+0x330>
      break;
 80087c6:	bf00      	nop
  }

  return ret;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b06      	cmp	r3, #6
 80087f6:	f200 8128 	bhi.w	8008a4a <USBD_GetDescriptor+0x276>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <USBD_GetDescriptor+0x2c>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	0800881d 	.word	0x0800881d
 8008804:	08008835 	.word	0x08008835
 8008808:	08008875 	.word	0x08008875
 800880c:	08008a4b 	.word	0x08008a4b
 8008810:	08008a4b 	.word	0x08008a4b
 8008814:	080089eb 	.word	0x080089eb
 8008818:	08008a17 	.word	0x08008a17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
      break;
 8008832:	e112      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7c1b      	ldrb	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10d      	bne.n	8008858 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	f107 0208 	add.w	r2, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	2202      	movs	r2, #2
 8008854:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008856:	e100      	b.n	8008a5a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	f107 0208 	add.w	r2, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	2202      	movs	r2, #2
 8008870:	701a      	strb	r2, [r3, #0]
      break;
 8008872:	e0f2      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	885b      	ldrh	r3, [r3, #2]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b05      	cmp	r3, #5
 800887c:	f200 80ac 	bhi.w	80089d8 <USBD_GetDescriptor+0x204>
 8008880:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBD_GetDescriptor+0xb4>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088a1 	.word	0x080088a1
 800888c:	080088d5 	.word	0x080088d5
 8008890:	08008909 	.word	0x08008909
 8008894:	0800893d 	.word	0x0800893d
 8008898:	08008971 	.word	0x08008971
 800889c:	080089a5 	.word	0x080089a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c2:	e091      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 facb 	bl	8008e62 <USBD_CtlError>
            err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
          break;
 80088d2:	e089      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00b      	beq.n	80088f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	7c12      	ldrb	r2, [r2, #16]
 80088ec:	f107 0108 	add.w	r1, r7, #8
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f6:	e077      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fab1 	bl	8008e62 <USBD_CtlError>
            err++;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	3301      	adds	r3, #1
 8008904:	72fb      	strb	r3, [r7, #11]
          break;
 8008906:	e06f      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892a:	e05d      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa97 	bl	8008e62 <USBD_CtlError>
            err++;
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	3301      	adds	r3, #1
 8008938:	72fb      	strb	r3, [r7, #11]
          break;
 800893a:	e055      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e043      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa7d 	bl	8008e62 <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e03b      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e029      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa63 	bl	8008e62 <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e021      	b.n	80089e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e00f      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa49 	bl	8008e62 <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e007      	b.n	80089e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa41 	bl	8008e62 <USBD_CtlError>
          err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089e6:	bf00      	nop
      }
      break;
 80089e8:	e037      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7c1b      	ldrb	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	f107 0208 	add.w	r2, r7, #8
 80089fe:	4610      	mov	r0, r2
 8008a00:	4798      	blx	r3
 8008a02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a04:	e029      	b.n	8008a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa2a 	bl	8008e62 <USBD_CtlError>
        err++;
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	3301      	adds	r3, #1
 8008a12:	72fb      	strb	r3, [r7, #11]
      break;
 8008a14:	e021      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	7c1b      	ldrb	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10d      	bne.n	8008a3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	f107 0208 	add.w	r2, r7, #8
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4798      	blx	r3
 8008a2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	2207      	movs	r2, #7
 8008a36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a38:	e00f      	b.n	8008a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa10 	bl	8008e62 <USBD_CtlError>
        err++;
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	3301      	adds	r3, #1
 8008a46:	72fb      	strb	r3, [r7, #11]
      break;
 8008a48:	e007      	b.n	8008a5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa08 	bl	8008e62 <USBD_CtlError>
      err++;
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	3301      	adds	r3, #1
 8008a56:	72fb      	strb	r3, [r7, #11]
      break;
 8008a58:	bf00      	nop
  }

  if (err != 0U)
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d11e      	bne.n	8008a9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	88db      	ldrh	r3, [r3, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d016      	beq.n	8008a96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a68:	893b      	ldrh	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88da      	ldrh	r2, [r3, #6]
 8008a72:	893b      	ldrh	r3, [r7, #8]
 8008a74:	4293      	cmp	r3, r2
 8008a76:	bf28      	it	cs
 8008a78:	4613      	movcs	r3, r2
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a7e:	893b      	ldrh	r3, [r7, #8]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa5d 	bl	8008f44 <USBD_CtlSendData>
 8008a8a:	e009      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9e7 	bl	8008e62 <USBD_CtlError>
 8008a94:	e004      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 faae 	bl	8008ff8 <USBD_CtlSendStatus>
 8008a9c:	e000      	b.n	8008aa0 <USBD_GetDescriptor+0x2cc>
    return;
 8008a9e:	bf00      	nop
  }
}
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop

08008aa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	889b      	ldrh	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d131      	bne.n	8008b1e <USBD_SetAddress+0x76>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	88db      	ldrh	r3, [r3, #6]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d12d      	bne.n	8008b1e <USBD_SetAddress+0x76>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ac8:	d829      	bhi.n	8008b1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d104      	bne.n	8008aec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9bc 	bl	8008e62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	e01d      	b.n	8008b28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7bfa      	ldrb	r2, [r7, #15]
 8008af0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 ff13 	bl	8009924 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa7a 	bl	8008ff8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b12:	e009      	b.n	8008b28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1c:	e004      	b.n	8008b28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f99e 	bl	8008e62 <USBD_CtlError>
  }
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	4b4e      	ldr	r3, [pc, #312]	; (8008c80 <USBD_SetConfig+0x150>)
 8008b46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b48:	4b4d      	ldr	r3, [pc, #308]	; (8008c80 <USBD_SetConfig+0x150>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d905      	bls.n	8008b5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f985 	bl	8008e62 <USBD_CtlError>
    return USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e08c      	b.n	8008c76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d002      	beq.n	8008b6e <USBD_SetConfig+0x3e>
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d029      	beq.n	8008bc0 <USBD_SetConfig+0x90>
 8008b6c:	e075      	b.n	8008c5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b6e:	4b44      	ldr	r3, [pc, #272]	; (8008c80 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d020      	beq.n	8008bb8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b76:	4b42      	ldr	r3, [pc, #264]	; (8008c80 <USBD_SetConfig+0x150>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b80:	4b3f      	ldr	r3, [pc, #252]	; (8008c80 <USBD_SetConfig+0x150>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fe ffe7 	bl	8007b5a <USBD_SetClassConfig>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f962 	bl	8008e62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ba6:	e065      	b.n	8008c74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa25 	bl	8008ff8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bb6:	e05d      	b.n	8008c74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa1d 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008bbe:	e059      	b.n	8008c74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bc0:	4b2f      	ldr	r3, [pc, #188]	; (8008c80 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d112      	bne.n	8008bee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bd0:	4b2b      	ldr	r3, [pc, #172]	; (8008c80 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bda:	4b29      	ldr	r3, [pc, #164]	; (8008c80 <USBD_SetConfig+0x150>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fe ffd6 	bl	8007b92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa06 	bl	8008ff8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bec:	e042      	b.n	8008c74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bee:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <USBD_SetConfig+0x150>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d02a      	beq.n	8008c52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7fe ffc4 	bl	8007b92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c0a:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c14:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <USBD_SetConfig+0x150>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fe ff9d 	bl	8007b5a <USBD_SetClassConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00f      	beq.n	8008c4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f918 	bl	8008e62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7fe ffa9 	bl	8007b92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c48:	e014      	b.n	8008c74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9d4 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008c50:	e010      	b.n	8008c74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9d0 	bl	8008ff8 <USBD_CtlSendStatus>
      break;
 8008c58:	e00c      	b.n	8008c74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f900 	bl	8008e62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <USBD_SetConfig+0x150>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe ff92 	bl	8007b92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
      break;
 8008c72:	bf00      	nop
  }

  return ret;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20009fcc 	.word	0x20009fcc

08008c84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	88db      	ldrh	r3, [r3, #6]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d004      	beq.n	8008ca0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f8e2 	bl	8008e62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c9e:	e023      	b.n	8008ce8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	dc02      	bgt.n	8008cb2 <USBD_GetConfig+0x2e>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dc03      	bgt.n	8008cb8 <USBD_GetConfig+0x34>
 8008cb0:	e015      	b.n	8008cde <USBD_GetConfig+0x5a>
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d00b      	beq.n	8008cce <USBD_GetConfig+0x4a>
 8008cb6:	e012      	b.n	8008cde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f93c 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008ccc:	e00c      	b.n	8008ce8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f934 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008cdc:	e004      	b.n	8008ce8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f8be 	bl	8008e62 <USBD_CtlError>
        break;
 8008ce6:	bf00      	nop
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d81e      	bhi.n	8008d46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d004      	beq.n	8008d1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f8a5 	bl	8008e62 <USBD_CtlError>
        break;
 8008d18:	e01a      	b.n	8008d50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f043 0202 	orr.w	r2, r3, #2
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f900 	bl	8008f44 <USBD_CtlSendData>
      break;
 8008d44:	e004      	b.n	8008d50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f88a 	bl	8008e62 <USBD_CtlError>
      break;
 8008d4e:	bf00      	nop
  }
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	885b      	ldrh	r3, [r3, #2]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d107      	bne.n	8008d7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f940 	bl	8008ff8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d78:	e013      	b.n	8008da2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d10b      	bne.n	8008d9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	0a1b      	lsrs	r3, r3, #8
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f930 	bl	8008ff8 <USBD_CtlSendStatus>
}
 8008d98:	e003      	b.n	8008da2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f860 	bl	8008e62 <USBD_CtlError>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d80b      	bhi.n	8008dda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d10c      	bne.n	8008de4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f910 	bl	8008ff8 <USBD_CtlSendStatus>
      }
      break;
 8008dd8:	e004      	b.n	8008de4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f840 	bl	8008e62 <USBD_CtlError>
      break;
 8008de2:	e000      	b.n	8008de6 <USBD_ClrFeature+0x3c>
      break;
 8008de4:	bf00      	nop
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fa41 	bl	80082a0 <SWAPBYTE>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fa34 	bl	80082a0 <SWAPBYTE>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fa27 	bl	80082a0 <SWAPBYTE>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	80da      	strh	r2, [r3, #6]
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e6c:	2180      	movs	r1, #128	; 0x80
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fcee 	bl	8009850 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e74:	2100      	movs	r1, #0
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcea 	bl	8009850 <USBD_LL_StallEP>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d036      	beq.n	8008f08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e9e:	6938      	ldr	r0, [r7, #16]
 8008ea0:	f000 f836 	bl	8008f10 <USBD_GetLen>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7812      	ldrb	r2, [r2, #0]
 8008ebc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4413      	add	r3, r2
 8008eca:	2203      	movs	r2, #3
 8008ecc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ed4:	e013      	b.n	8008efe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
    idx++;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	3301      	adds	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e7      	bne.n	8008ed6 <USBD_GetString+0x52>
 8008f06:	e000      	b.n	8008f0a <USBD_GetString+0x86>
    return;
 8008f08:	bf00      	nop
  }
}
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f20:	e005      	b.n	8008f2e <USBD_GetLen+0x1e>
  {
    len++;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	3301      	adds	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f5      	bne.n	8008f22 <USBD_GetLen+0x12>
  }

  return len;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fcf9 	bl	8009962 <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fce8 	bl	8009962 <USBD_LL_Transmit>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2203      	movs	r2, #3
 8008fac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fcec 	bl	80099a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fcdb 	bl	80099a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fca7 	bl	8009962 <USBD_LL_Transmit>

  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2205      	movs	r2, #5
 800902a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902e:	2300      	movs	r3, #0
 8009030:	2200      	movs	r2, #0
 8009032:	2100      	movs	r1, #0
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fcb5 	bl	80099a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009048:	2200      	movs	r2, #0
 800904a:	4912      	ldr	r1, [pc, #72]	; (8009094 <MX_USB_DEVICE_Init+0x50>)
 800904c:	4812      	ldr	r0, [pc, #72]	; (8009098 <MX_USB_DEVICE_Init+0x54>)
 800904e:	f7fe fd07 	bl	8007a60 <USBD_Init>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009058:	f7f8 f8c6 	bl	80011e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800905c:	490f      	ldr	r1, [pc, #60]	; (800909c <MX_USB_DEVICE_Init+0x58>)
 800905e:	480e      	ldr	r0, [pc, #56]	; (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009060:	f7fe fd2e 	bl	8007ac0 <USBD_RegisterClass>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800906a:	f7f8 f8bd 	bl	80011e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800906e:	490c      	ldr	r1, [pc, #48]	; (80090a0 <MX_USB_DEVICE_Init+0x5c>)
 8009070:	4809      	ldr	r0, [pc, #36]	; (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009072:	f7fe fc1f 	bl	80078b4 <USBD_CDC_RegisterInterface>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800907c:	f7f8 f8b4 	bl	80011e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009080:	4805      	ldr	r0, [pc, #20]	; (8009098 <MX_USB_DEVICE_Init+0x54>)
 8009082:	f7fe fd53 	bl	8007b2c <USBD_Start>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800908c:	f7f8 f8ac 	bl	80011e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009090:	bf00      	nop
 8009092:	bd80      	pop	{r7, pc}
 8009094:	200000d4 	.word	0x200000d4
 8009098:	20009fd0 	.word	0x20009fd0
 800909c:	20000040 	.word	0x20000040
 80090a0:	200000c0 	.word	0x200000c0

080090a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090a8:	2200      	movs	r2, #0
 80090aa:	4905      	ldr	r1, [pc, #20]	; (80090c0 <CDC_Init_FS+0x1c>)
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <CDC_Init_FS+0x20>)
 80090ae:	f7fe fc1b 	bl	80078e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090b2:	4905      	ldr	r1, [pc, #20]	; (80090c8 <CDC_Init_FS+0x24>)
 80090b4:	4803      	ldr	r0, [pc, #12]	; (80090c4 <CDC_Init_FS+0x20>)
 80090b6:	f7fe fc39 	bl	800792c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090bc:	4618      	mov	r0, r3
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	2000a6ac 	.word	0x2000a6ac
 80090c4:	20009fd0 	.word	0x20009fd0
 80090c8:	2000a2ac 	.word	0x2000a2ac

080090cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
 80090e8:	4613      	mov	r3, r2
 80090ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	2b23      	cmp	r3, #35	; 0x23
 80090f0:	d84a      	bhi.n	8009188 <CDC_Control_FS+0xac>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <CDC_Control_FS+0x1c>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009189 	.word	0x08009189
 80090fc:	08009189 	.word	0x08009189
 8009100:	08009189 	.word	0x08009189
 8009104:	08009189 	.word	0x08009189
 8009108:	08009189 	.word	0x08009189
 800910c:	08009189 	.word	0x08009189
 8009110:	08009189 	.word	0x08009189
 8009114:	08009189 	.word	0x08009189
 8009118:	08009189 	.word	0x08009189
 800911c:	08009189 	.word	0x08009189
 8009120:	08009189 	.word	0x08009189
 8009124:	08009189 	.word	0x08009189
 8009128:	08009189 	.word	0x08009189
 800912c:	08009189 	.word	0x08009189
 8009130:	08009189 	.word	0x08009189
 8009134:	08009189 	.word	0x08009189
 8009138:	08009189 	.word	0x08009189
 800913c:	08009189 	.word	0x08009189
 8009140:	08009189 	.word	0x08009189
 8009144:	08009189 	.word	0x08009189
 8009148:	08009189 	.word	0x08009189
 800914c:	08009189 	.word	0x08009189
 8009150:	08009189 	.word	0x08009189
 8009154:	08009189 	.word	0x08009189
 8009158:	08009189 	.word	0x08009189
 800915c:	08009189 	.word	0x08009189
 8009160:	08009189 	.word	0x08009189
 8009164:	08009189 	.word	0x08009189
 8009168:	08009189 	.word	0x08009189
 800916c:	08009189 	.word	0x08009189
 8009170:	08009189 	.word	0x08009189
 8009174:	08009189 	.word	0x08009189
 8009178:	08009189 	.word	0x08009189
 800917c:	08009189 	.word	0x08009189
 8009180:	08009189 	.word	0x08009189
 8009184:	08009189 	.word	0x08009189
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009188:	bf00      	nop
  }

  return (USBD_OK);
 800918a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	480f      	ldr	r0, [pc, #60]	; (80091e4 <CDC_Receive_FS+0x4c>)
 80091a6:	f7fe fbc1 	bl	800792c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091aa:	480e      	ldr	r0, [pc, #56]	; (80091e4 <CDC_Receive_FS+0x4c>)
 80091ac:	f7fe fc22 	bl	80079f4 <USBD_CDC_ReceivePacket>

  	memset (usb_rx_buffer, '\0', 64);  // clear the buffer
 80091b0:	2240      	movs	r2, #64	; 0x40
 80091b2:	2100      	movs	r1, #0
 80091b4:	480c      	ldr	r0, [pc, #48]	; (80091e8 <CDC_Receive_FS+0x50>)
 80091b6:	f000 fc8d 	bl	8009ad4 <memset>
    uint32_t len = (uint32_t)*Len;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
    memcpy(usb_rx_buffer, Buf, len);  // copy the data to the buffer
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4808      	ldr	r0, [pc, #32]	; (80091e8 <CDC_Receive_FS+0x50>)
 80091c6:	f000 fcb9 	bl	8009b3c <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	2100      	movs	r1, #0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fc80 	bl	8009ad4 <memset>

    flag_usbrx = 1;
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <CDC_Receive_FS+0x54>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80091da:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20009fd0 	.word	0x20009fd0
 80091e8:	200002cc 	.word	0x200002cc
 80091ec:	2000030c 	.word	0x2000030c

080091f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <CDC_Transmit_FS+0x48>)
 8009202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009206:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009212:	2301      	movs	r3, #1
 8009214:	e00b      	b.n	800922e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	461a      	mov	r2, r3
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4806      	ldr	r0, [pc, #24]	; (8009238 <CDC_Transmit_FS+0x48>)
 800921e:	f7fe fb63 	bl	80078e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009222:	4805      	ldr	r0, [pc, #20]	; (8009238 <CDC_Transmit_FS+0x48>)
 8009224:	f7fe fba0 	bl	8007968 <USBD_CDC_TransmitPacket>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20009fd0 	.word	0x20009fd0

0800923c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800924e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2212      	movs	r2, #18
 8009270:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009272:	4b03      	ldr	r3, [pc, #12]	; (8009280 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	200000f0 	.word	0x200000f0

08009284 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2204      	movs	r2, #4
 8009294:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20000104 	.word	0x20000104

080092a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d105      	bne.n	80092c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4907      	ldr	r1, [pc, #28]	; (80092dc <USBD_FS_ProductStrDescriptor+0x34>)
 80092be:	4808      	ldr	r0, [pc, #32]	; (80092e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092c0:	f7ff fde0 	bl	8008e84 <USBD_GetString>
 80092c4:	e004      	b.n	80092d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	4904      	ldr	r1, [pc, #16]	; (80092dc <USBD_FS_ProductStrDescriptor+0x34>)
 80092ca:	4805      	ldr	r0, [pc, #20]	; (80092e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092cc:	f7ff fdda 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	2000aaac 	.word	0x2000aaac
 80092e0:	0800a414 	.word	0x0800a414

080092e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	4904      	ldr	r1, [pc, #16]	; (8009304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092f4:	4804      	ldr	r0, [pc, #16]	; (8009308 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092f6:	f7ff fdc5 	bl	8008e84 <USBD_GetString>
  return USBD_StrDesc;
 80092fa:	4b02      	ldr	r3, [pc, #8]	; (8009304 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	2000aaac 	.word	0x2000aaac
 8009308:	0800a42c 	.word	0x0800a42c

0800930c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	221a      	movs	r2, #26
 800931c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800931e:	f000 f843 	bl	80093a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009322:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20000108 	.word	0x20000108

08009330 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4907      	ldr	r1, [pc, #28]	; (8009364 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009346:	4808      	ldr	r0, [pc, #32]	; (8009368 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009348:	f7ff fd9c 	bl	8008e84 <USBD_GetString>
 800934c:	e004      	b.n	8009358 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4904      	ldr	r1, [pc, #16]	; (8009364 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009352:	4805      	ldr	r0, [pc, #20]	; (8009368 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009354:	f7ff fd96 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009358:	4b02      	ldr	r3, [pc, #8]	; (8009364 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	2000aaac 	.word	0x2000aaac
 8009368:	0800a440 	.word	0x0800a440

0800936c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d105      	bne.n	800938a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	4907      	ldr	r1, [pc, #28]	; (80093a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009382:	4808      	ldr	r0, [pc, #32]	; (80093a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009384:	f7ff fd7e 	bl	8008e84 <USBD_GetString>
 8009388:	e004      	b.n	8009394 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4904      	ldr	r1, [pc, #16]	; (80093a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800938e:	4805      	ldr	r0, [pc, #20]	; (80093a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009390:	f7ff fd78 	bl	8008e84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	2000aaac 	.word	0x2000aaac
 80093a4:	0800a44c 	.word	0x0800a44c

080093a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <Get_SerialNum+0x44>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093b4:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <Get_SerialNum+0x48>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ba:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <Get_SerialNum+0x4c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4413      	add	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093ce:	2208      	movs	r2, #8
 80093d0:	4909      	ldr	r1, [pc, #36]	; (80093f8 <Get_SerialNum+0x50>)
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 f814 	bl	8009400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093d8:	2204      	movs	r2, #4
 80093da:	4908      	ldr	r1, [pc, #32]	; (80093fc <Get_SerialNum+0x54>)
 80093dc:	68b8      	ldr	r0, [r7, #8]
 80093de:	f000 f80f 	bl	8009400 <IntToUnicode>
  }
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	1fff7a10 	.word	0x1fff7a10
 80093f0:	1fff7a14 	.word	0x1fff7a14
 80093f4:	1fff7a18 	.word	0x1fff7a18
 80093f8:	2000010a 	.word	0x2000010a
 80093fc:	2000011a 	.word	0x2000011a

08009400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4613      	mov	r3, r2
 800940c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
 8009416:	e027      	b.n	8009468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0f1b      	lsrs	r3, r3, #28
 800941c:	2b09      	cmp	r3, #9
 800941e:	d80b      	bhi.n	8009438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	0f1b      	lsrs	r3, r3, #28
 8009424:	b2da      	uxtb	r2, r3
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	4619      	mov	r1, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	440b      	add	r3, r1
 8009430:	3230      	adds	r2, #48	; 0x30
 8009432:	b2d2      	uxtb	r2, r2
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	e00a      	b.n	800944e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	0f1b      	lsrs	r3, r3, #28
 800943c:	b2da      	uxtb	r2, r3
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	4619      	mov	r1, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	440b      	add	r3, r1
 8009448:	3237      	adds	r2, #55	; 0x37
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	3301      	adds	r3, #1
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	3301      	adds	r3, #1
 8009466:	75fb      	strb	r3, [r7, #23]
 8009468:	7dfa      	ldrb	r2, [r7, #23]
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	429a      	cmp	r2, r3
 800946e:	d3d3      	bcc.n	8009418 <IntToUnicode+0x18>
  }
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	371c      	adds	r7, #28
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
	...

08009480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	609a      	str	r2, [r3, #8]
 8009494:	60da      	str	r2, [r3, #12]
 8009496:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094a0:	d13a      	bne.n	8009518 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a2:	2300      	movs	r3, #0
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	4b1e      	ldr	r3, [pc, #120]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	6313      	str	r3, [r2, #48]	; 0x30
 80094b2:	4b1b      	ldr	r3, [pc, #108]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c4:	2302      	movs	r3, #2
 80094c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094cc:	2303      	movs	r3, #3
 80094ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094d0:	230a      	movs	r3, #10
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	4619      	mov	r1, r3
 80094da:	4812      	ldr	r0, [pc, #72]	; (8009524 <HAL_PCD_MspInit+0xa4>)
 80094dc:	f7f9 fa88 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094e0:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	4a0e      	ldr	r2, [pc, #56]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ea:	6353      	str	r3, [r2, #52]	; 0x34
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f4:	4a0a      	ldr	r2, [pc, #40]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094fa:	6453      	str	r3, [r2, #68]	; 0x44
 80094fc:	4b08      	ldr	r3, [pc, #32]	; (8009520 <HAL_PCD_MspInit+0xa0>)
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	2100      	movs	r1, #0
 800950c:	2043      	movs	r0, #67	; 0x43
 800950e:	f7f8 fec2 	bl	8002296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009512:	2043      	movs	r0, #67	; 0x43
 8009514:	f7f8 fedb 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009518:	bf00      	nop
 800951a:	3728      	adds	r7, #40	; 0x28
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	40023800 	.word	0x40023800
 8009524:	40020000 	.word	0x40020000

08009528 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7fe fb41 	bl	8007bc6 <USBD_LL_SetupStage>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4613      	mov	r3, r2
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	4619      	mov	r1, r3
 8009576:	f7fe fb7b 	bl	8007c70 <USBD_LL_DataOutStage>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009594:	78fa      	ldrb	r2, [r7, #3]
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	334c      	adds	r3, #76	; 0x4c
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7fe fc14 	bl	8007dd6 <USBD_LL_DataInStage>
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fd48 	bl	800805a <USBD_LL_SOF>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095da:	2301      	movs	r3, #1
 80095dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d001      	beq.n	80095ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095e6:	f7f7 fdff 	bl	80011e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fcf2 	bl	8007fde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fc9a 	bl	8007f3a <USBD_LL_Reset>
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fced 	bl	8007ffe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <HAL_PCD_SuspendCallback+0x48>)
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	4a03      	ldr	r2, [pc, #12]	; (8009658 <HAL_PCD_SuspendCallback+0x48>)
 800964a:	f043 0306 	orr.w	r3, r3, #6
 800964e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	e000ed00 	.word	0xe000ed00

0800965c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fcdd 	bl	800802a <USBD_LL_Resume>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fd35 	bl	80080fe <USBD_LL_IsoOUTIncomplete>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fcf1 	bl	800809a <USBD_LL_IsoINIncomplete>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fd47 	bl	8008162 <USBD_LL_DevConnected>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fd44 	bl	8008178 <USBD_LL_DevDisconnected>
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d13c      	bne.n	8009782 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009708:	4a20      	ldr	r2, [pc, #128]	; (800978c <USBD_LL_Init+0x94>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1e      	ldr	r2, [pc, #120]	; (800978c <USBD_LL_Init+0x94>)
 8009714:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009718:	4b1c      	ldr	r3, [pc, #112]	; (800978c <USBD_LL_Init+0x94>)
 800971a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800971e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009720:	4b1a      	ldr	r3, [pc, #104]	; (800978c <USBD_LL_Init+0x94>)
 8009722:	2204      	movs	r2, #4
 8009724:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009726:	4b19      	ldr	r3, [pc, #100]	; (800978c <USBD_LL_Init+0x94>)
 8009728:	2202      	movs	r2, #2
 800972a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800972c:	4b17      	ldr	r3, [pc, #92]	; (800978c <USBD_LL_Init+0x94>)
 800972e:	2200      	movs	r2, #0
 8009730:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <USBD_LL_Init+0x94>)
 8009734:	2202      	movs	r2, #2
 8009736:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009738:	4b14      	ldr	r3, [pc, #80]	; (800978c <USBD_LL_Init+0x94>)
 800973a:	2200      	movs	r2, #0
 800973c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <USBD_LL_Init+0x94>)
 8009740:	2200      	movs	r2, #0
 8009742:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009744:	4b11      	ldr	r3, [pc, #68]	; (800978c <USBD_LL_Init+0x94>)
 8009746:	2200      	movs	r2, #0
 8009748:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800974a:	4b10      	ldr	r3, [pc, #64]	; (800978c <USBD_LL_Init+0x94>)
 800974c:	2200      	movs	r2, #0
 800974e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009750:	4b0e      	ldr	r3, [pc, #56]	; (800978c <USBD_LL_Init+0x94>)
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009756:	480d      	ldr	r0, [pc, #52]	; (800978c <USBD_LL_Init+0x94>)
 8009758:	f7f9 fae7 	bl	8002d2a <HAL_PCD_Init>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009762:	f7f7 fd41 	bl	80011e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009766:	2180      	movs	r1, #128	; 0x80
 8009768:	4808      	ldr	r0, [pc, #32]	; (800978c <USBD_LL_Init+0x94>)
 800976a:	f7fa fd3e 	bl	80041ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800976e:	2240      	movs	r2, #64	; 0x40
 8009770:	2100      	movs	r1, #0
 8009772:	4806      	ldr	r0, [pc, #24]	; (800978c <USBD_LL_Init+0x94>)
 8009774:	f7fa fcf2 	bl	800415c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009778:	2280      	movs	r2, #128	; 0x80
 800977a:	2101      	movs	r1, #1
 800977c:	4803      	ldr	r0, [pc, #12]	; (800978c <USBD_LL_Init+0x94>)
 800977e:	f7fa fced 	bl	800415c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	2000acac 	.word	0x2000acac

08009790 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f9 fbdc 	bl	8002f64 <HAL_PCD_Start>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f942 	bl	8009a3c <USBD_Get_USB_Status>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	4608      	mov	r0, r1
 80097d0:	4611      	mov	r1, r2
 80097d2:	461a      	mov	r2, r3
 80097d4:	4603      	mov	r3, r0
 80097d6:	70fb      	strb	r3, [r7, #3]
 80097d8:	460b      	mov	r3, r1
 80097da:	70bb      	strb	r3, [r7, #2]
 80097dc:	4613      	mov	r3, r2
 80097de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097ee:	78bb      	ldrb	r3, [r7, #2]
 80097f0:	883a      	ldrh	r2, [r7, #0]
 80097f2:	78f9      	ldrb	r1, [r7, #3]
 80097f4:	f7fa f8ad 	bl	8003952 <HAL_PCD_EP_Open>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f91c 	bl	8009a3c <USBD_Get_USB_Status>
 8009804:	4603      	mov	r3, r0
 8009806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009808:	7bbb      	ldrb	r3, [r7, #14]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7fa f8f6 	bl	8003a22 <HAL_PCD_EP_Close>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f8fd 	bl	8009a3c <USBD_Get_USB_Status>
 8009842:	4603      	mov	r3, r0
 8009844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009846:	7bbb      	ldrb	r3, [r7, #14]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7fa f9ce 	bl	8003c10 <HAL_PCD_EP_SetStall>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f8de 	bl	8009a3c <USBD_Get_USB_Status>
 8009880:	4603      	mov	r3, r0
 8009882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009884:	7bbb      	ldrb	r3, [r7, #14]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fa fa13 	bl	8003cd8 <HAL_PCD_EP_ClrStall>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f8bf 	bl	8009a3c <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da0b      	bge.n	8009900 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	4613      	mov	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	333e      	adds	r3, #62	; 0x3e
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	e00b      	b.n	8009918 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	4613      	mov	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	440b      	add	r3, r1
 8009912:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009916:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f7f9 ffe0 	bl	8003908 <HAL_PCD_SetAddress>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f874 	bl	8009a3c <USBD_Get_USB_Status>
 8009954:	4603      	mov	r3, r0
 8009956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009958:	7bbb      	ldrb	r3, [r7, #14]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b086      	sub	sp, #24
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]
 800996e:	460b      	mov	r3, r1
 8009970:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009980:	7af9      	ldrb	r1, [r7, #11]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f7fa f8f9 	bl	8003b7c <HAL_PCD_EP_Transmit>
 800998a:	4603      	mov	r3, r0
 800998c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f853 	bl	8009a3c <USBD_Get_USB_Status>
 8009996:	4603      	mov	r3, r0
 8009998:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800999a:	7dbb      	ldrb	r3, [r7, #22]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	460b      	mov	r3, r1
 80099b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099c2:	7af9      	ldrb	r1, [r7, #11]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	f7fa f875 	bl	8003ab6 <HAL_PCD_EP_Receive>
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f832 	bl	8009a3c <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
 80099da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fa f8a5 	bl	8003b4c <HAL_PCD_EP_GetRxCount>
 8009a02:	4603      	mov	r3, r0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <USBD_static_malloc+0x18>)
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	2000b1b8 	.word	0x2000b1b8

08009a28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d817      	bhi.n	8009a80 <USBD_Get_USB_Status+0x44>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_Get_USB_Status+0x1c>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a69 	.word	0x08009a69
 8009a5c:	08009a6f 	.word	0x08009a6f
 8009a60:	08009a75 	.word	0x08009a75
 8009a64:	08009a7b 	.word	0x08009a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6c:	e00b      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	73fb      	strb	r3, [r7, #15]
    break;
 8009a72:	e008      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e005      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7e:	e002      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	73fb      	strb	r3, [r7, #15]
    break;
 8009a84:	bf00      	nop
  }
  return usb_status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <siprintf>:
 8009a94:	b40e      	push	{r1, r2, r3}
 8009a96:	b500      	push	{lr}
 8009a98:	b09c      	sub	sp, #112	; 0x70
 8009a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a9c:	9002      	str	r0, [sp, #8]
 8009a9e:	9006      	str	r0, [sp, #24]
 8009aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aa4:	4809      	ldr	r0, [pc, #36]	; (8009acc <siprintf+0x38>)
 8009aa6:	9107      	str	r1, [sp, #28]
 8009aa8:	9104      	str	r1, [sp, #16]
 8009aaa:	4909      	ldr	r1, [pc, #36]	; (8009ad0 <siprintf+0x3c>)
 8009aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab0:	9105      	str	r1, [sp, #20]
 8009ab2:	6800      	ldr	r0, [r0, #0]
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	a902      	add	r1, sp, #8
 8009ab8:	f000 f9a0 	bl	8009dfc <_svfiprintf_r>
 8009abc:	9b02      	ldr	r3, [sp, #8]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	b01c      	add	sp, #112	; 0x70
 8009ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ac8:	b003      	add	sp, #12
 8009aca:	4770      	bx	lr
 8009acc:	20000170 	.word	0x20000170
 8009ad0:	ffff0208 	.word	0xffff0208

08009ad4 <memset>:
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <__errno>:
 8009ae4:	4b01      	ldr	r3, [pc, #4]	; (8009aec <__errno+0x8>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000170 	.word	0x20000170

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f000 fc6a 	bl	800a3dc <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	0800a4b0 	.word	0x0800a4b0
 8009b2c:	0800a4b0 	.word	0x0800a4b0
 8009b30:	0800a4b0 	.word	0x0800a4b0
 8009b34:	0800a4b4 	.word	0x0800a4b4

08009b38 <__retarget_lock_acquire_recursive>:
 8009b38:	4770      	bx	lr

08009b3a <__retarget_lock_release_recursive>:
 8009b3a:	4770      	bx	lr

08009b3c <memcpy>:
 8009b3c:	440a      	add	r2, r1
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b44:	d100      	bne.n	8009b48 <memcpy+0xc>
 8009b46:	4770      	bx	lr
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b52:	4291      	cmp	r1, r2
 8009b54:	d1f9      	bne.n	8009b4a <memcpy+0xe>
 8009b56:	bd10      	pop	{r4, pc}

08009b58 <_free_r>:
 8009b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d044      	beq.n	8009be8 <_free_r+0x90>
 8009b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b62:	9001      	str	r0, [sp, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f1a1 0404 	sub.w	r4, r1, #4
 8009b6a:	bfb8      	it	lt
 8009b6c:	18e4      	addlt	r4, r4, r3
 8009b6e:	f000 f8df 	bl	8009d30 <__malloc_lock>
 8009b72:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <_free_r+0x94>)
 8009b74:	9801      	ldr	r0, [sp, #4]
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	b933      	cbnz	r3, 8009b88 <_free_r+0x30>
 8009b7a:	6063      	str	r3, [r4, #4]
 8009b7c:	6014      	str	r4, [r2, #0]
 8009b7e:	b003      	add	sp, #12
 8009b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b84:	f000 b8da 	b.w	8009d3c <__malloc_unlock>
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	d908      	bls.n	8009b9e <_free_r+0x46>
 8009b8c:	6825      	ldr	r5, [r4, #0]
 8009b8e:	1961      	adds	r1, r4, r5
 8009b90:	428b      	cmp	r3, r1
 8009b92:	bf01      	itttt	eq
 8009b94:	6819      	ldreq	r1, [r3, #0]
 8009b96:	685b      	ldreq	r3, [r3, #4]
 8009b98:	1949      	addeq	r1, r1, r5
 8009b9a:	6021      	streq	r1, [r4, #0]
 8009b9c:	e7ed      	b.n	8009b7a <_free_r+0x22>
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	b10b      	cbz	r3, 8009ba8 <_free_r+0x50>
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	d9fa      	bls.n	8009b9e <_free_r+0x46>
 8009ba8:	6811      	ldr	r1, [r2, #0]
 8009baa:	1855      	adds	r5, r2, r1
 8009bac:	42a5      	cmp	r5, r4
 8009bae:	d10b      	bne.n	8009bc8 <_free_r+0x70>
 8009bb0:	6824      	ldr	r4, [r4, #0]
 8009bb2:	4421      	add	r1, r4
 8009bb4:	1854      	adds	r4, r2, r1
 8009bb6:	42a3      	cmp	r3, r4
 8009bb8:	6011      	str	r1, [r2, #0]
 8009bba:	d1e0      	bne.n	8009b7e <_free_r+0x26>
 8009bbc:	681c      	ldr	r4, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	6053      	str	r3, [r2, #4]
 8009bc2:	440c      	add	r4, r1
 8009bc4:	6014      	str	r4, [r2, #0]
 8009bc6:	e7da      	b.n	8009b7e <_free_r+0x26>
 8009bc8:	d902      	bls.n	8009bd0 <_free_r+0x78>
 8009bca:	230c      	movs	r3, #12
 8009bcc:	6003      	str	r3, [r0, #0]
 8009bce:	e7d6      	b.n	8009b7e <_free_r+0x26>
 8009bd0:	6825      	ldr	r5, [r4, #0]
 8009bd2:	1961      	adds	r1, r4, r5
 8009bd4:	428b      	cmp	r3, r1
 8009bd6:	bf04      	itt	eq
 8009bd8:	6819      	ldreq	r1, [r3, #0]
 8009bda:	685b      	ldreq	r3, [r3, #4]
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	bf04      	itt	eq
 8009be0:	1949      	addeq	r1, r1, r5
 8009be2:	6021      	streq	r1, [r4, #0]
 8009be4:	6054      	str	r4, [r2, #4]
 8009be6:	e7ca      	b.n	8009b7e <_free_r+0x26>
 8009be8:	b003      	add	sp, #12
 8009bea:	bd30      	pop	{r4, r5, pc}
 8009bec:	2000b518 	.word	0x2000b518

08009bf0 <sbrk_aligned>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	4e0e      	ldr	r6, [pc, #56]	; (8009c2c <sbrk_aligned+0x3c>)
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	6831      	ldr	r1, [r6, #0]
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	b911      	cbnz	r1, 8009c02 <sbrk_aligned+0x12>
 8009bfc:	f000 fba6 	bl	800a34c <_sbrk_r>
 8009c00:	6030      	str	r0, [r6, #0]
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f000 fba1 	bl	800a34c <_sbrk_r>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d00a      	beq.n	8009c24 <sbrk_aligned+0x34>
 8009c0e:	1cc4      	adds	r4, r0, #3
 8009c10:	f024 0403 	bic.w	r4, r4, #3
 8009c14:	42a0      	cmp	r0, r4
 8009c16:	d007      	beq.n	8009c28 <sbrk_aligned+0x38>
 8009c18:	1a21      	subs	r1, r4, r0
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 fb96 	bl	800a34c <_sbrk_r>
 8009c20:	3001      	adds	r0, #1
 8009c22:	d101      	bne.n	8009c28 <sbrk_aligned+0x38>
 8009c24:	f04f 34ff 	mov.w	r4, #4294967295
 8009c28:	4620      	mov	r0, r4
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	2000b51c 	.word	0x2000b51c

08009c30 <_malloc_r>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	1ccd      	adds	r5, r1, #3
 8009c36:	f025 0503 	bic.w	r5, r5, #3
 8009c3a:	3508      	adds	r5, #8
 8009c3c:	2d0c      	cmp	r5, #12
 8009c3e:	bf38      	it	cc
 8009c40:	250c      	movcc	r5, #12
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	4607      	mov	r7, r0
 8009c46:	db01      	blt.n	8009c4c <_malloc_r+0x1c>
 8009c48:	42a9      	cmp	r1, r5
 8009c4a:	d905      	bls.n	8009c58 <_malloc_r+0x28>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	2600      	movs	r6, #0
 8009c52:	4630      	mov	r0, r6
 8009c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d2c <_malloc_r+0xfc>
 8009c5c:	f000 f868 	bl	8009d30 <__malloc_lock>
 8009c60:	f8d8 3000 	ldr.w	r3, [r8]
 8009c64:	461c      	mov	r4, r3
 8009c66:	bb5c      	cbnz	r4, 8009cc0 <_malloc_r+0x90>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff ffc0 	bl	8009bf0 <sbrk_aligned>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	4604      	mov	r4, r0
 8009c74:	d155      	bne.n	8009d22 <_malloc_r+0xf2>
 8009c76:	f8d8 4000 	ldr.w	r4, [r8]
 8009c7a:	4626      	mov	r6, r4
 8009c7c:	2e00      	cmp	r6, #0
 8009c7e:	d145      	bne.n	8009d0c <_malloc_r+0xdc>
 8009c80:	2c00      	cmp	r4, #0
 8009c82:	d048      	beq.n	8009d16 <_malloc_r+0xe6>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	4631      	mov	r1, r6
 8009c88:	4638      	mov	r0, r7
 8009c8a:	eb04 0903 	add.w	r9, r4, r3
 8009c8e:	f000 fb5d 	bl	800a34c <_sbrk_r>
 8009c92:	4581      	cmp	r9, r0
 8009c94:	d13f      	bne.n	8009d16 <_malloc_r+0xe6>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	1a6d      	subs	r5, r5, r1
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa7 	bl	8009bf0 <sbrk_aligned>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d037      	beq.n	8009d16 <_malloc_r+0xe6>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	442b      	add	r3, r5
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d038      	beq.n	8009d26 <_malloc_r+0xf6>
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	42a2      	cmp	r2, r4
 8009cb8:	d12b      	bne.n	8009d12 <_malloc_r+0xe2>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	605a      	str	r2, [r3, #4]
 8009cbe:	e00f      	b.n	8009ce0 <_malloc_r+0xb0>
 8009cc0:	6822      	ldr	r2, [r4, #0]
 8009cc2:	1b52      	subs	r2, r2, r5
 8009cc4:	d41f      	bmi.n	8009d06 <_malloc_r+0xd6>
 8009cc6:	2a0b      	cmp	r2, #11
 8009cc8:	d917      	bls.n	8009cfa <_malloc_r+0xca>
 8009cca:	1961      	adds	r1, r4, r5
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	6025      	str	r5, [r4, #0]
 8009cd0:	bf18      	it	ne
 8009cd2:	6059      	strne	r1, [r3, #4]
 8009cd4:	6863      	ldr	r3, [r4, #4]
 8009cd6:	bf08      	it	eq
 8009cd8:	f8c8 1000 	streq.w	r1, [r8]
 8009cdc:	5162      	str	r2, [r4, r5]
 8009cde:	604b      	str	r3, [r1, #4]
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f104 060b 	add.w	r6, r4, #11
 8009ce6:	f000 f829 	bl	8009d3c <__malloc_unlock>
 8009cea:	f026 0607 	bic.w	r6, r6, #7
 8009cee:	1d23      	adds	r3, r4, #4
 8009cf0:	1af2      	subs	r2, r6, r3
 8009cf2:	d0ae      	beq.n	8009c52 <_malloc_r+0x22>
 8009cf4:	1b9b      	subs	r3, r3, r6
 8009cf6:	50a3      	str	r3, [r4, r2]
 8009cf8:	e7ab      	b.n	8009c52 <_malloc_r+0x22>
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	6862      	ldr	r2, [r4, #4]
 8009cfe:	d1dd      	bne.n	8009cbc <_malloc_r+0x8c>
 8009d00:	f8c8 2000 	str.w	r2, [r8]
 8009d04:	e7ec      	b.n	8009ce0 <_malloc_r+0xb0>
 8009d06:	4623      	mov	r3, r4
 8009d08:	6864      	ldr	r4, [r4, #4]
 8009d0a:	e7ac      	b.n	8009c66 <_malloc_r+0x36>
 8009d0c:	4634      	mov	r4, r6
 8009d0e:	6876      	ldr	r6, [r6, #4]
 8009d10:	e7b4      	b.n	8009c7c <_malloc_r+0x4c>
 8009d12:	4613      	mov	r3, r2
 8009d14:	e7cc      	b.n	8009cb0 <_malloc_r+0x80>
 8009d16:	230c      	movs	r3, #12
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f000 f80e 	bl	8009d3c <__malloc_unlock>
 8009d20:	e797      	b.n	8009c52 <_malloc_r+0x22>
 8009d22:	6025      	str	r5, [r4, #0]
 8009d24:	e7dc      	b.n	8009ce0 <_malloc_r+0xb0>
 8009d26:	605b      	str	r3, [r3, #4]
 8009d28:	deff      	udf	#255	; 0xff
 8009d2a:	bf00      	nop
 8009d2c:	2000b518 	.word	0x2000b518

08009d30 <__malloc_lock>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__malloc_lock+0x8>)
 8009d32:	f7ff bf01 	b.w	8009b38 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	2000b514 	.word	0x2000b514

08009d3c <__malloc_unlock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	; (8009d44 <__malloc_unlock+0x8>)
 8009d3e:	f7ff befc 	b.w	8009b3a <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	2000b514 	.word	0x2000b514

08009d48 <__ssputs_r>:
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	688e      	ldr	r6, [r1, #8]
 8009d4e:	461f      	mov	r7, r3
 8009d50:	42be      	cmp	r6, r7
 8009d52:	680b      	ldr	r3, [r1, #0]
 8009d54:	4682      	mov	sl, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	4690      	mov	r8, r2
 8009d5a:	d82c      	bhi.n	8009db6 <__ssputs_r+0x6e>
 8009d5c:	898a      	ldrh	r2, [r1, #12]
 8009d5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d62:	d026      	beq.n	8009db2 <__ssputs_r+0x6a>
 8009d64:	6965      	ldr	r5, [r4, #20]
 8009d66:	6909      	ldr	r1, [r1, #16]
 8009d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d6c:	eba3 0901 	sub.w	r9, r3, r1
 8009d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d74:	1c7b      	adds	r3, r7, #1
 8009d76:	444b      	add	r3, r9
 8009d78:	106d      	asrs	r5, r5, #1
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	bf38      	it	cc
 8009d7e:	461d      	movcc	r5, r3
 8009d80:	0553      	lsls	r3, r2, #21
 8009d82:	d527      	bpl.n	8009dd4 <__ssputs_r+0x8c>
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7ff ff53 	bl	8009c30 <_malloc_r>
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	b360      	cbz	r0, 8009de8 <__ssputs_r+0xa0>
 8009d8e:	6921      	ldr	r1, [r4, #16]
 8009d90:	464a      	mov	r2, r9
 8009d92:	f7ff fed3 	bl	8009b3c <memcpy>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	6126      	str	r6, [r4, #16]
 8009da4:	6165      	str	r5, [r4, #20]
 8009da6:	444e      	add	r6, r9
 8009da8:	eba5 0509 	sub.w	r5, r5, r9
 8009dac:	6026      	str	r6, [r4, #0]
 8009dae:	60a5      	str	r5, [r4, #8]
 8009db0:	463e      	mov	r6, r7
 8009db2:	42be      	cmp	r6, r7
 8009db4:	d900      	bls.n	8009db8 <__ssputs_r+0x70>
 8009db6:	463e      	mov	r6, r7
 8009db8:	6820      	ldr	r0, [r4, #0]
 8009dba:	4632      	mov	r2, r6
 8009dbc:	4641      	mov	r1, r8
 8009dbe:	f000 faab 	bl	800a318 <memmove>
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	1b9b      	subs	r3, r3, r6
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	4433      	add	r3, r6
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	f000 fac9 	bl	800a36c <_realloc_r>
 8009dda:	4606      	mov	r6, r0
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d1e0      	bne.n	8009da2 <__ssputs_r+0x5a>
 8009de0:	6921      	ldr	r1, [r4, #16]
 8009de2:	4650      	mov	r0, sl
 8009de4:	f7ff feb8 	bl	8009b58 <_free_r>
 8009de8:	230c      	movs	r3, #12
 8009dea:	f8ca 3000 	str.w	r3, [sl]
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfa:	e7e9      	b.n	8009dd0 <__ssputs_r+0x88>

08009dfc <_svfiprintf_r>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	4698      	mov	r8, r3
 8009e02:	898b      	ldrh	r3, [r1, #12]
 8009e04:	061b      	lsls	r3, r3, #24
 8009e06:	b09d      	sub	sp, #116	; 0x74
 8009e08:	4607      	mov	r7, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	d50e      	bpl.n	8009e2e <_svfiprintf_r+0x32>
 8009e10:	690b      	ldr	r3, [r1, #16]
 8009e12:	b963      	cbnz	r3, 8009e2e <_svfiprintf_r+0x32>
 8009e14:	2140      	movs	r1, #64	; 0x40
 8009e16:	f7ff ff0b 	bl	8009c30 <_malloc_r>
 8009e1a:	6028      	str	r0, [r5, #0]
 8009e1c:	6128      	str	r0, [r5, #16]
 8009e1e:	b920      	cbnz	r0, 8009e2a <_svfiprintf_r+0x2e>
 8009e20:	230c      	movs	r3, #12
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	e0d0      	b.n	8009fcc <_svfiprintf_r+0x1d0>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	616b      	str	r3, [r5, #20]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9309      	str	r3, [sp, #36]	; 0x24
 8009e32:	2320      	movs	r3, #32
 8009e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3c:	2330      	movs	r3, #48	; 0x30
 8009e3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fe4 <_svfiprintf_r+0x1e8>
 8009e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e46:	f04f 0901 	mov.w	r9, #1
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	469a      	mov	sl, r3
 8009e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e52:	b10a      	cbz	r2, 8009e58 <_svfiprintf_r+0x5c>
 8009e54:	2a25      	cmp	r2, #37	; 0x25
 8009e56:	d1f9      	bne.n	8009e4c <_svfiprintf_r+0x50>
 8009e58:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5c:	d00b      	beq.n	8009e76 <_svfiprintf_r+0x7a>
 8009e5e:	465b      	mov	r3, fp
 8009e60:	4622      	mov	r2, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	4638      	mov	r0, r7
 8009e66:	f7ff ff6f 	bl	8009d48 <__ssputs_r>
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f000 80a9 	beq.w	8009fc2 <_svfiprintf_r+0x1c6>
 8009e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e72:	445a      	add	r2, fp
 8009e74:	9209      	str	r2, [sp, #36]	; 0x24
 8009e76:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80a1 	beq.w	8009fc2 <_svfiprintf_r+0x1c6>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e8a:	f10a 0a01 	add.w	sl, sl, #1
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	9307      	str	r3, [sp, #28]
 8009e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e96:	931a      	str	r3, [sp, #104]	; 0x68
 8009e98:	4654      	mov	r4, sl
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	4850      	ldr	r0, [pc, #320]	; (8009fe4 <_svfiprintf_r+0x1e8>)
 8009ea2:	f7f6 f9a5 	bl	80001f0 <memchr>
 8009ea6:	9a04      	ldr	r2, [sp, #16]
 8009ea8:	b9d8      	cbnz	r0, 8009ee2 <_svfiprintf_r+0xe6>
 8009eaa:	06d0      	lsls	r0, r2, #27
 8009eac:	bf44      	itt	mi
 8009eae:	2320      	movmi	r3, #32
 8009eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eb4:	0711      	lsls	r1, r2, #28
 8009eb6:	bf44      	itt	mi
 8009eb8:	232b      	movmi	r3, #43	; 0x2b
 8009eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec4:	d015      	beq.n	8009ef2 <_svfiprintf_r+0xf6>
 8009ec6:	9a07      	ldr	r2, [sp, #28]
 8009ec8:	4654      	mov	r4, sl
 8009eca:	2000      	movs	r0, #0
 8009ecc:	f04f 0c0a 	mov.w	ip, #10
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed6:	3b30      	subs	r3, #48	; 0x30
 8009ed8:	2b09      	cmp	r3, #9
 8009eda:	d94d      	bls.n	8009f78 <_svfiprintf_r+0x17c>
 8009edc:	b1b0      	cbz	r0, 8009f0c <_svfiprintf_r+0x110>
 8009ede:	9207      	str	r2, [sp, #28]
 8009ee0:	e014      	b.n	8009f0c <_svfiprintf_r+0x110>
 8009ee2:	eba0 0308 	sub.w	r3, r0, r8
 8009ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8009eea:	4313      	orrs	r3, r2
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	46a2      	mov	sl, r4
 8009ef0:	e7d2      	b.n	8009e98 <_svfiprintf_r+0x9c>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	1d19      	adds	r1, r3, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	9103      	str	r1, [sp, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfbb      	ittet	lt
 8009efe:	425b      	neglt	r3, r3
 8009f00:	f042 0202 	orrlt.w	r2, r2, #2
 8009f04:	9307      	strge	r3, [sp, #28]
 8009f06:	9307      	strlt	r3, [sp, #28]
 8009f08:	bfb8      	it	lt
 8009f0a:	9204      	strlt	r2, [sp, #16]
 8009f0c:	7823      	ldrb	r3, [r4, #0]
 8009f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009f10:	d10c      	bne.n	8009f2c <_svfiprintf_r+0x130>
 8009f12:	7863      	ldrb	r3, [r4, #1]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d134      	bne.n	8009f82 <_svfiprintf_r+0x186>
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	9203      	str	r2, [sp, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	bfb8      	it	lt
 8009f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f28:	3402      	adds	r4, #2
 8009f2a:	9305      	str	r3, [sp, #20]
 8009f2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ff4 <_svfiprintf_r+0x1f8>
 8009f30:	7821      	ldrb	r1, [r4, #0]
 8009f32:	2203      	movs	r2, #3
 8009f34:	4650      	mov	r0, sl
 8009f36:	f7f6 f95b 	bl	80001f0 <memchr>
 8009f3a:	b138      	cbz	r0, 8009f4c <_svfiprintf_r+0x150>
 8009f3c:	9b04      	ldr	r3, [sp, #16]
 8009f3e:	eba0 000a 	sub.w	r0, r0, sl
 8009f42:	2240      	movs	r2, #64	; 0x40
 8009f44:	4082      	lsls	r2, r0
 8009f46:	4313      	orrs	r3, r2
 8009f48:	3401      	adds	r4, #1
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f50:	4825      	ldr	r0, [pc, #148]	; (8009fe8 <_svfiprintf_r+0x1ec>)
 8009f52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f56:	2206      	movs	r2, #6
 8009f58:	f7f6 f94a 	bl	80001f0 <memchr>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d038      	beq.n	8009fd2 <_svfiprintf_r+0x1d6>
 8009f60:	4b22      	ldr	r3, [pc, #136]	; (8009fec <_svfiprintf_r+0x1f0>)
 8009f62:	bb1b      	cbnz	r3, 8009fac <_svfiprintf_r+0x1b0>
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	3307      	adds	r3, #7
 8009f68:	f023 0307 	bic.w	r3, r3, #7
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	9303      	str	r3, [sp, #12]
 8009f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f72:	4433      	add	r3, r6
 8009f74:	9309      	str	r3, [sp, #36]	; 0x24
 8009f76:	e768      	b.n	8009e4a <_svfiprintf_r+0x4e>
 8009f78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	2001      	movs	r0, #1
 8009f80:	e7a6      	b.n	8009ed0 <_svfiprintf_r+0xd4>
 8009f82:	2300      	movs	r3, #0
 8009f84:	3401      	adds	r4, #1
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f04f 0c0a 	mov.w	ip, #10
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f94:	3a30      	subs	r2, #48	; 0x30
 8009f96:	2a09      	cmp	r2, #9
 8009f98:	d903      	bls.n	8009fa2 <_svfiprintf_r+0x1a6>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0c6      	beq.n	8009f2c <_svfiprintf_r+0x130>
 8009f9e:	9105      	str	r1, [sp, #20]
 8009fa0:	e7c4      	b.n	8009f2c <_svfiprintf_r+0x130>
 8009fa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e7f0      	b.n	8009f8e <_svfiprintf_r+0x192>
 8009fac:	ab03      	add	r3, sp, #12
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	462a      	mov	r2, r5
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <_svfiprintf_r+0x1f4>)
 8009fb4:	a904      	add	r1, sp, #16
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f3af 8000 	nop.w
 8009fbc:	1c42      	adds	r2, r0, #1
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	d1d6      	bne.n	8009f70 <_svfiprintf_r+0x174>
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	065b      	lsls	r3, r3, #25
 8009fc6:	f53f af2d 	bmi.w	8009e24 <_svfiprintf_r+0x28>
 8009fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fcc:	b01d      	add	sp, #116	; 0x74
 8009fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd2:	ab03      	add	r3, sp, #12
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <_svfiprintf_r+0x1f4>)
 8009fda:	a904      	add	r1, sp, #16
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f000 f879 	bl	800a0d4 <_printf_i>
 8009fe2:	e7eb      	b.n	8009fbc <_svfiprintf_r+0x1c0>
 8009fe4:	0800a474 	.word	0x0800a474
 8009fe8:	0800a47e 	.word	0x0800a47e
 8009fec:	00000000 	.word	0x00000000
 8009ff0:	08009d49 	.word	0x08009d49
 8009ff4:	0800a47a 	.word	0x0800a47a

08009ff8 <_printf_common>:
 8009ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	4699      	mov	r9, r3
 800a000:	688a      	ldr	r2, [r1, #8]
 800a002:	690b      	ldr	r3, [r1, #16]
 800a004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a008:	4293      	cmp	r3, r2
 800a00a:	bfb8      	it	lt
 800a00c:	4613      	movlt	r3, r2
 800a00e:	6033      	str	r3, [r6, #0]
 800a010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a014:	4607      	mov	r7, r0
 800a016:	460c      	mov	r4, r1
 800a018:	b10a      	cbz	r2, 800a01e <_printf_common+0x26>
 800a01a:	3301      	adds	r3, #1
 800a01c:	6033      	str	r3, [r6, #0]
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	0699      	lsls	r1, r3, #26
 800a022:	bf42      	ittt	mi
 800a024:	6833      	ldrmi	r3, [r6, #0]
 800a026:	3302      	addmi	r3, #2
 800a028:	6033      	strmi	r3, [r6, #0]
 800a02a:	6825      	ldr	r5, [r4, #0]
 800a02c:	f015 0506 	ands.w	r5, r5, #6
 800a030:	d106      	bne.n	800a040 <_printf_common+0x48>
 800a032:	f104 0a19 	add.w	sl, r4, #25
 800a036:	68e3      	ldr	r3, [r4, #12]
 800a038:	6832      	ldr	r2, [r6, #0]
 800a03a:	1a9b      	subs	r3, r3, r2
 800a03c:	42ab      	cmp	r3, r5
 800a03e:	dc26      	bgt.n	800a08e <_printf_common+0x96>
 800a040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a044:	1e13      	subs	r3, r2, #0
 800a046:	6822      	ldr	r2, [r4, #0]
 800a048:	bf18      	it	ne
 800a04a:	2301      	movne	r3, #1
 800a04c:	0692      	lsls	r2, r2, #26
 800a04e:	d42b      	bmi.n	800a0a8 <_printf_common+0xb0>
 800a050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a054:	4649      	mov	r1, r9
 800a056:	4638      	mov	r0, r7
 800a058:	47c0      	blx	r8
 800a05a:	3001      	adds	r0, #1
 800a05c:	d01e      	beq.n	800a09c <_printf_common+0xa4>
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	6922      	ldr	r2, [r4, #16]
 800a062:	f003 0306 	and.w	r3, r3, #6
 800a066:	2b04      	cmp	r3, #4
 800a068:	bf02      	ittt	eq
 800a06a:	68e5      	ldreq	r5, [r4, #12]
 800a06c:	6833      	ldreq	r3, [r6, #0]
 800a06e:	1aed      	subeq	r5, r5, r3
 800a070:	68a3      	ldr	r3, [r4, #8]
 800a072:	bf0c      	ite	eq
 800a074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a078:	2500      	movne	r5, #0
 800a07a:	4293      	cmp	r3, r2
 800a07c:	bfc4      	itt	gt
 800a07e:	1a9b      	subgt	r3, r3, r2
 800a080:	18ed      	addgt	r5, r5, r3
 800a082:	2600      	movs	r6, #0
 800a084:	341a      	adds	r4, #26
 800a086:	42b5      	cmp	r5, r6
 800a088:	d11a      	bne.n	800a0c0 <_printf_common+0xc8>
 800a08a:	2000      	movs	r0, #0
 800a08c:	e008      	b.n	800a0a0 <_printf_common+0xa8>
 800a08e:	2301      	movs	r3, #1
 800a090:	4652      	mov	r2, sl
 800a092:	4649      	mov	r1, r9
 800a094:	4638      	mov	r0, r7
 800a096:	47c0      	blx	r8
 800a098:	3001      	adds	r0, #1
 800a09a:	d103      	bne.n	800a0a4 <_printf_common+0xac>
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	e7c6      	b.n	800a036 <_printf_common+0x3e>
 800a0a8:	18e1      	adds	r1, r4, r3
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	2030      	movs	r0, #48	; 0x30
 800a0ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0b2:	4422      	add	r2, r4
 800a0b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0bc:	3302      	adds	r3, #2
 800a0be:	e7c7      	b.n	800a050 <_printf_common+0x58>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	47c0      	blx	r8
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d0e6      	beq.n	800a09c <_printf_common+0xa4>
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7d9      	b.n	800a086 <_printf_common+0x8e>
	...

0800a0d4 <_printf_i>:
 800a0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d8:	7e0f      	ldrb	r7, [r1, #24]
 800a0da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0dc:	2f78      	cmp	r7, #120	; 0x78
 800a0de:	4691      	mov	r9, r2
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	469a      	mov	sl, r3
 800a0e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ea:	d807      	bhi.n	800a0fc <_printf_i+0x28>
 800a0ec:	2f62      	cmp	r7, #98	; 0x62
 800a0ee:	d80a      	bhi.n	800a106 <_printf_i+0x32>
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	f000 80d4 	beq.w	800a29e <_printf_i+0x1ca>
 800a0f6:	2f58      	cmp	r7, #88	; 0x58
 800a0f8:	f000 80c0 	beq.w	800a27c <_printf_i+0x1a8>
 800a0fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a104:	e03a      	b.n	800a17c <_printf_i+0xa8>
 800a106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a10a:	2b15      	cmp	r3, #21
 800a10c:	d8f6      	bhi.n	800a0fc <_printf_i+0x28>
 800a10e:	a101      	add	r1, pc, #4	; (adr r1, 800a114 <_printf_i+0x40>)
 800a110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a114:	0800a16d 	.word	0x0800a16d
 800a118:	0800a181 	.word	0x0800a181
 800a11c:	0800a0fd 	.word	0x0800a0fd
 800a120:	0800a0fd 	.word	0x0800a0fd
 800a124:	0800a0fd 	.word	0x0800a0fd
 800a128:	0800a0fd 	.word	0x0800a0fd
 800a12c:	0800a181 	.word	0x0800a181
 800a130:	0800a0fd 	.word	0x0800a0fd
 800a134:	0800a0fd 	.word	0x0800a0fd
 800a138:	0800a0fd 	.word	0x0800a0fd
 800a13c:	0800a0fd 	.word	0x0800a0fd
 800a140:	0800a285 	.word	0x0800a285
 800a144:	0800a1ad 	.word	0x0800a1ad
 800a148:	0800a23f 	.word	0x0800a23f
 800a14c:	0800a0fd 	.word	0x0800a0fd
 800a150:	0800a0fd 	.word	0x0800a0fd
 800a154:	0800a2a7 	.word	0x0800a2a7
 800a158:	0800a0fd 	.word	0x0800a0fd
 800a15c:	0800a1ad 	.word	0x0800a1ad
 800a160:	0800a0fd 	.word	0x0800a0fd
 800a164:	0800a0fd 	.word	0x0800a0fd
 800a168:	0800a247 	.word	0x0800a247
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	1d1a      	adds	r2, r3, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	602a      	str	r2, [r5, #0]
 800a174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a17c:	2301      	movs	r3, #1
 800a17e:	e09f      	b.n	800a2c0 <_printf_i+0x1ec>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	0607      	lsls	r7, r0, #24
 800a186:	f103 0104 	add.w	r1, r3, #4
 800a18a:	6029      	str	r1, [r5, #0]
 800a18c:	d501      	bpl.n	800a192 <_printf_i+0xbe>
 800a18e:	681e      	ldr	r6, [r3, #0]
 800a190:	e003      	b.n	800a19a <_printf_i+0xc6>
 800a192:	0646      	lsls	r6, r0, #25
 800a194:	d5fb      	bpl.n	800a18e <_printf_i+0xba>
 800a196:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	da03      	bge.n	800a1a6 <_printf_i+0xd2>
 800a19e:	232d      	movs	r3, #45	; 0x2d
 800a1a0:	4276      	negs	r6, r6
 800a1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a6:	485a      	ldr	r0, [pc, #360]	; (800a310 <_printf_i+0x23c>)
 800a1a8:	230a      	movs	r3, #10
 800a1aa:	e012      	b.n	800a1d2 <_printf_i+0xfe>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	6820      	ldr	r0, [r4, #0]
 800a1b0:	1d19      	adds	r1, r3, #4
 800a1b2:	6029      	str	r1, [r5, #0]
 800a1b4:	0605      	lsls	r5, r0, #24
 800a1b6:	d501      	bpl.n	800a1bc <_printf_i+0xe8>
 800a1b8:	681e      	ldr	r6, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <_printf_i+0xee>
 800a1bc:	0641      	lsls	r1, r0, #25
 800a1be:	d5fb      	bpl.n	800a1b8 <_printf_i+0xe4>
 800a1c0:	881e      	ldrh	r6, [r3, #0]
 800a1c2:	4853      	ldr	r0, [pc, #332]	; (800a310 <_printf_i+0x23c>)
 800a1c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a1c6:	bf0c      	ite	eq
 800a1c8:	2308      	moveq	r3, #8
 800a1ca:	230a      	movne	r3, #10
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1d2:	6865      	ldr	r5, [r4, #4]
 800a1d4:	60a5      	str	r5, [r4, #8]
 800a1d6:	2d00      	cmp	r5, #0
 800a1d8:	bfa2      	ittt	ge
 800a1da:	6821      	ldrge	r1, [r4, #0]
 800a1dc:	f021 0104 	bicge.w	r1, r1, #4
 800a1e0:	6021      	strge	r1, [r4, #0]
 800a1e2:	b90e      	cbnz	r6, 800a1e8 <_printf_i+0x114>
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	d04b      	beq.n	800a280 <_printf_i+0x1ac>
 800a1e8:	4615      	mov	r5, r2
 800a1ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a1f2:	5dc7      	ldrb	r7, [r0, r7]
 800a1f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1f8:	4637      	mov	r7, r6
 800a1fa:	42bb      	cmp	r3, r7
 800a1fc:	460e      	mov	r6, r1
 800a1fe:	d9f4      	bls.n	800a1ea <_printf_i+0x116>
 800a200:	2b08      	cmp	r3, #8
 800a202:	d10b      	bne.n	800a21c <_printf_i+0x148>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	07de      	lsls	r6, r3, #31
 800a208:	d508      	bpl.n	800a21c <_printf_i+0x148>
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	6861      	ldr	r1, [r4, #4]
 800a20e:	4299      	cmp	r1, r3
 800a210:	bfde      	ittt	le
 800a212:	2330      	movle	r3, #48	; 0x30
 800a214:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a21c:	1b52      	subs	r2, r2, r5
 800a21e:	6122      	str	r2, [r4, #16]
 800a220:	f8cd a000 	str.w	sl, [sp]
 800a224:	464b      	mov	r3, r9
 800a226:	aa03      	add	r2, sp, #12
 800a228:	4621      	mov	r1, r4
 800a22a:	4640      	mov	r0, r8
 800a22c:	f7ff fee4 	bl	8009ff8 <_printf_common>
 800a230:	3001      	adds	r0, #1
 800a232:	d14a      	bne.n	800a2ca <_printf_i+0x1f6>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	b004      	add	sp, #16
 800a23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	f043 0320 	orr.w	r3, r3, #32
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	4833      	ldr	r0, [pc, #204]	; (800a314 <_printf_i+0x240>)
 800a248:	2778      	movs	r7, #120	; 0x78
 800a24a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	6829      	ldr	r1, [r5, #0]
 800a252:	061f      	lsls	r7, r3, #24
 800a254:	f851 6b04 	ldr.w	r6, [r1], #4
 800a258:	d402      	bmi.n	800a260 <_printf_i+0x18c>
 800a25a:	065f      	lsls	r7, r3, #25
 800a25c:	bf48      	it	mi
 800a25e:	b2b6      	uxthmi	r6, r6
 800a260:	07df      	lsls	r7, r3, #31
 800a262:	bf48      	it	mi
 800a264:	f043 0320 	orrmi.w	r3, r3, #32
 800a268:	6029      	str	r1, [r5, #0]
 800a26a:	bf48      	it	mi
 800a26c:	6023      	strmi	r3, [r4, #0]
 800a26e:	b91e      	cbnz	r6, 800a278 <_printf_i+0x1a4>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	f023 0320 	bic.w	r3, r3, #32
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	2310      	movs	r3, #16
 800a27a:	e7a7      	b.n	800a1cc <_printf_i+0xf8>
 800a27c:	4824      	ldr	r0, [pc, #144]	; (800a310 <_printf_i+0x23c>)
 800a27e:	e7e4      	b.n	800a24a <_printf_i+0x176>
 800a280:	4615      	mov	r5, r2
 800a282:	e7bd      	b.n	800a200 <_printf_i+0x12c>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	6826      	ldr	r6, [r4, #0]
 800a288:	6961      	ldr	r1, [r4, #20]
 800a28a:	1d18      	adds	r0, r3, #4
 800a28c:	6028      	str	r0, [r5, #0]
 800a28e:	0635      	lsls	r5, r6, #24
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	d501      	bpl.n	800a298 <_printf_i+0x1c4>
 800a294:	6019      	str	r1, [r3, #0]
 800a296:	e002      	b.n	800a29e <_printf_i+0x1ca>
 800a298:	0670      	lsls	r0, r6, #25
 800a29a:	d5fb      	bpl.n	800a294 <_printf_i+0x1c0>
 800a29c:	8019      	strh	r1, [r3, #0]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	4615      	mov	r5, r2
 800a2a4:	e7bc      	b.n	800a220 <_printf_i+0x14c>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	1d1a      	adds	r2, r3, #4
 800a2aa:	602a      	str	r2, [r5, #0]
 800a2ac:	681d      	ldr	r5, [r3, #0]
 800a2ae:	6862      	ldr	r2, [r4, #4]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f7f5 ff9c 	bl	80001f0 <memchr>
 800a2b8:	b108      	cbz	r0, 800a2be <_printf_i+0x1ea>
 800a2ba:	1b40      	subs	r0, r0, r5
 800a2bc:	6060      	str	r0, [r4, #4]
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c8:	e7aa      	b.n	800a220 <_printf_i+0x14c>
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	47d0      	blx	sl
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d0ad      	beq.n	800a234 <_printf_i+0x160>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	079b      	lsls	r3, r3, #30
 800a2dc:	d413      	bmi.n	800a306 <_printf_i+0x232>
 800a2de:	68e0      	ldr	r0, [r4, #12]
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	4298      	cmp	r0, r3
 800a2e4:	bfb8      	it	lt
 800a2e6:	4618      	movlt	r0, r3
 800a2e8:	e7a6      	b.n	800a238 <_printf_i+0x164>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	47d0      	blx	sl
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d09d      	beq.n	800a234 <_printf_i+0x160>
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	68e3      	ldr	r3, [r4, #12]
 800a2fc:	9903      	ldr	r1, [sp, #12]
 800a2fe:	1a5b      	subs	r3, r3, r1
 800a300:	42ab      	cmp	r3, r5
 800a302:	dcf2      	bgt.n	800a2ea <_printf_i+0x216>
 800a304:	e7eb      	b.n	800a2de <_printf_i+0x20a>
 800a306:	2500      	movs	r5, #0
 800a308:	f104 0619 	add.w	r6, r4, #25
 800a30c:	e7f5      	b.n	800a2fa <_printf_i+0x226>
 800a30e:	bf00      	nop
 800a310:	0800a485 	.word	0x0800a485
 800a314:	0800a496 	.word	0x0800a496

0800a318 <memmove>:
 800a318:	4288      	cmp	r0, r1
 800a31a:	b510      	push	{r4, lr}
 800a31c:	eb01 0402 	add.w	r4, r1, r2
 800a320:	d902      	bls.n	800a328 <memmove+0x10>
 800a322:	4284      	cmp	r4, r0
 800a324:	4623      	mov	r3, r4
 800a326:	d807      	bhi.n	800a338 <memmove+0x20>
 800a328:	1e43      	subs	r3, r0, #1
 800a32a:	42a1      	cmp	r1, r4
 800a32c:	d008      	beq.n	800a340 <memmove+0x28>
 800a32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a336:	e7f8      	b.n	800a32a <memmove+0x12>
 800a338:	4402      	add	r2, r0
 800a33a:	4601      	mov	r1, r0
 800a33c:	428a      	cmp	r2, r1
 800a33e:	d100      	bne.n	800a342 <memmove+0x2a>
 800a340:	bd10      	pop	{r4, pc}
 800a342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a34a:	e7f7      	b.n	800a33c <memmove+0x24>

0800a34c <_sbrk_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	; (800a368 <_sbrk_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 f8ae 	bl	80014b8 <_sbrk>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_sbrk_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_sbrk_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	2000b510 	.word	0x2000b510

0800a36c <_realloc_r>:
 800a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	4680      	mov	r8, r0
 800a372:	4614      	mov	r4, r2
 800a374:	460e      	mov	r6, r1
 800a376:	b921      	cbnz	r1, 800a382 <_realloc_r+0x16>
 800a378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a37c:	4611      	mov	r1, r2
 800a37e:	f7ff bc57 	b.w	8009c30 <_malloc_r>
 800a382:	b92a      	cbnz	r2, 800a390 <_realloc_r+0x24>
 800a384:	f7ff fbe8 	bl	8009b58 <_free_r>
 800a388:	4625      	mov	r5, r4
 800a38a:	4628      	mov	r0, r5
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	f000 f81b 	bl	800a3ca <_malloc_usable_size_r>
 800a394:	4284      	cmp	r4, r0
 800a396:	4607      	mov	r7, r0
 800a398:	d802      	bhi.n	800a3a0 <_realloc_r+0x34>
 800a39a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a39e:	d812      	bhi.n	800a3c6 <_realloc_r+0x5a>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	f7ff fc44 	bl	8009c30 <_malloc_r>
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d0ed      	beq.n	800a38a <_realloc_r+0x1e>
 800a3ae:	42bc      	cmp	r4, r7
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	bf28      	it	cs
 800a3b6:	463a      	movcs	r2, r7
 800a3b8:	f7ff fbc0 	bl	8009b3c <memcpy>
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4640      	mov	r0, r8
 800a3c0:	f7ff fbca 	bl	8009b58 <_free_r>
 800a3c4:	e7e1      	b.n	800a38a <_realloc_r+0x1e>
 800a3c6:	4635      	mov	r5, r6
 800a3c8:	e7df      	b.n	800a38a <_realloc_r+0x1e>

0800a3ca <_malloc_usable_size_r>:
 800a3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ce:	1f18      	subs	r0, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bfbc      	itt	lt
 800a3d4:	580b      	ldrlt	r3, [r1, r0]
 800a3d6:	18c0      	addlt	r0, r0, r3
 800a3d8:	4770      	bx	lr
	...

0800a3dc <_init>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	bf00      	nop
 800a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e2:	bc08      	pop	{r3}
 800a3e4:	469e      	mov	lr, r3
 800a3e6:	4770      	bx	lr

0800a3e8 <_fini>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	bf00      	nop
 800a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ee:	bc08      	pop	{r3}
 800a3f0:	469e      	mov	lr, r3
 800a3f2:	4770      	bx	lr
