
CBtesterA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a18c  0800a18c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a194  0800a194  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3a8  20000174  0800a310  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b51c  0800a310  0002b51c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157d3  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f9  00000000  00000000  000359ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9b  00000000  00000000  0003a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a650  00000000  00000000  0003b473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185d0  00000000  00000000  00055ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009add4  00000000  00000000  0006e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054c0  00000000  00000000  00108e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0c0 	.word	0x0800a0c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800a0c0 	.word	0x0800a0c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <kalman_filter>:
static int kalman_adc_int = 0;

uint8_t  trip1 = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <kalman_filter+0xe0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <kalman_filter+0xe4>)
 80005ae:	ed93 7a00 	vldr	s14, [r3]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <kalman_filter+0xe8>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <kalman_filter+0xec>)
 80005be:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <kalman_filter+0xec>)
 80005c4:	edd3 6a00 	vldr	s13, [r3]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <kalman_filter+0xec>)
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <kalman_filter+0xf0>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <kalman_filter+0xf4>)
 80005de:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <kalman_filter+0xe0>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <kalman_filter+0xf4>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <kalman_filter+0xf4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <kalman_filter+0xec>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <kalman_filter+0xe4>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <kalman_filter+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <kalman_filter+0xec>)
 800062a:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <kalman_filter+0xf8>)
 8000638:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <kalman_filter+0xe0>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000642:	edd7 7a02 	vldr	s15, [r7, #8]
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <kalman_filter+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000652:	edd7 7a02 	vldr	s15, [r7, #8]
 8000656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20009fb4 	.word	0x20009fb4
 8000670:	20009fac 	.word	0x20009fac
 8000674:	2000001c 	.word	0x2000001c
 8000678:	20000024 	.word	0x20000024
 800067c:	20000020 	.word	0x20000020
 8000680:	20009fb0 	.word	0x20009fb0
 8000684:	20009fa8 	.word	0x20009fa8
 8000688:	20009fb8 	.word	0x20009fb8

0800068c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a38      	ldr	r2, [pc, #224]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0]; //32;
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ae:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x76>
	{
		if(buf_idx < 2000)
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c0:	d218      	bcs.n	80006f4 <HAL_ADC_ConvCpltCallback+0x68>
		{
			buf1[buf_idx] = ad1_audio;
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a31      	ldr	r2, [pc, #196]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4933      	ldr	r1, [pc, #204]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			kalman_adc_int = kalman_filter(buf2[buf_idx]);
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff56 	bl	800058c <kalman_filter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 80006e6:	601a      	str	r2, [r3, #0]
			buf_idx++;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a29      	ldr	r2, [pc, #164]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e02e      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 2;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e027      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}
	else if(buf_num == 2)
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d123      	bne.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
	{
		if(buf_idx < 2000)
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000712:	d218      	bcs.n	8000746 <HAL_ADC_ConvCpltCallback+0xba>
		{
			buf2[buf_idx] = ad1_audio;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1c      	ldr	r2, [pc, #112]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	491f      	ldr	r1, [pc, #124]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf1[buf_idx]);
			kalman_adc_int = kalman_filter(buf1[buf_idx]);
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <kalman_filter>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000738:	601a      	str	r2, [r3, #0]
			buf_idx++;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e005      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 1;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		}
	}

	if(kalman_adc_int > 320)
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800075a:	dd07      	ble.n	800076c <HAL_ADC_ConvCpltCallback+0xe0>
	{
		trip1 = 1;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x118>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000768:	f002 f938 	bl	80029dc <HAL_GPIO_WritePin>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 800076c:	2301      	movs	r3, #1
 800076e:	461a      	mov	r2, r3
 8000770:	4905      	ldr	r1, [pc, #20]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <HAL_ADC_ConvCpltCallback+0x120>)
 8000774:	f000 ff6e 	bl	8001654 <HAL_ADC_Start_DMA>

}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000350 	.word	0x20000350
 8000784:	20000358 	.word	0x20000358
 8000788:	20000344 	.word	0x20000344
 800078c:	2000035c 	.word	0x2000035c
 8000790:	20000018 	.word	0x20000018
 8000794:	20000360 	.word	0x20000360
 8000798:	20000364 	.word	0x20000364
 800079c:	20005184 	.word	0x20005184
 80007a0:	20009fb8 	.word	0x20009fb8
 80007a4:	20009fbc 	.word	0x20009fbc
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000190 	.word	0x20000190

080007b0 <HAL_SYSTICK_Callback>:
 * Documentation. Please update the docs in the proper places. This callback may work by applying proper
 * configuration. Instead we are using HAL_GetTick() which is same as millis(). To enable this callback to work
 * add HAL_SYSTICK_IRQHandler(); to stm32f4xx_it.c -> void SysTick_Handler(void)
 */
void HAL_SYSTICK_Callback(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	if(flag_pulse_out == 1)
 80007b4:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <HAL_SYSTICK_Callback+0x128>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	f040 8087 	bne.w	80008cc <HAL_SYSTICK_Callback+0x11c>
	{
		millis++;
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a45      	ldr	r2, [pc, #276]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 80007c6:	6013      	str	r3, [r2, #0]

		if(millis > pulses.stone3)
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b43      	ldr	r3, [pc, #268]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d223      	bcs.n	800081e <HAL_SYSTICK_Callback+0x6e>
		{
			if(_pulse_count < pulses.duration3)
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d973      	bls.n	80008cc <HAL_SYSTICK_Callback+0x11c>
			{
				_pulse_count++;
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a3e      	ldr	r2, [pc, #248]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80007ec:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration3)
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d903      	bls.n	8000804 <HAL_SYSTICK_Callback+0x54>
				{
					TIM1->CCR3 = 200;
 80007fc:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 80007fe:	22c8      	movs	r2, #200	; 0xc8
 8000800:	63da      	str	r2, [r3, #60]	; 0x3c
			{
				_pulse_count = 0;
			}
		}
	}
}
 8000802:	e063      	b.n	80008cc <HAL_SYSTICK_Callback+0x11c>
					TIM1->CCR3 = 0;
 8000804:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 8000806:	2200      	movs	r2, #0
 8000808:	63da      	str	r2, [r3, #60]	; 0x3c
					flag_pulse_out = 0;
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <HAL_SYSTICK_Callback+0x128>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
					millis = 0;
 8000810:	4b32      	ldr	r3, [pc, #200]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
					_pulse_count = 0;
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	e056      	b.n	80008cc <HAL_SYSTICK_Callback+0x11c>
		else if(millis > pulses.stone2)
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	461a      	mov	r2, r3
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d224      	bcs.n	8000876 <HAL_SYSTICK_Callback+0xc6>
			if(_pulse_count < pulses.duration2)
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	461a      	mov	r2, r3
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d912      	bls.n	8000860 <HAL_SYSTICK_Callback+0xb0>
				_pulse_count++;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 8000842:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration2)
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	461a      	mov	r2, r3
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d903      	bls.n	800085a <HAL_SYSTICK_Callback+0xaa>
					TIM1->CCR2 = 200;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 8000854:	22c8      	movs	r2, #200	; 0xc8
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
 8000858:	e002      	b.n	8000860 <HAL_SYSTICK_Callback+0xb0>
					TIM1->CCR2 = 0;
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
			if(millis == pulses.stone3)
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	461a      	mov	r2, r3
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d12e      	bne.n	80008cc <HAL_SYSTICK_Callback+0x11c>
				_pulse_count = 0;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	e02a      	b.n	80008cc <HAL_SYSTICK_Callback+0x11c>
		else if(millis > pulses.stone1)
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d223      	bcs.n	80008cc <HAL_SYSTICK_Callback+0x11c>
			if(_pulse_count < pulses.duration1)
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	461a      	mov	r2, r3
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d912      	bls.n	80008b8 <HAL_SYSTICK_Callback+0x108>
				_pulse_count++;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 800089a:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration1)
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d903      	bls.n	80008b2 <HAL_SYSTICK_Callback+0x102>
					TIM1->CCR1 = 200;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 80008ac:	22c8      	movs	r2, #200	; 0xc8
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
 80008b0:	e002      	b.n	80008b8 <HAL_SYSTICK_Callback+0x108>
					TIM1->CCR1 = 0;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_SYSTICK_Callback+0x138>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
			if(millis == pulses.stone2)
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_SYSTICK_Callback+0x130>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_SYSTICK_Callback+0x12c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d102      	bne.n	80008cc <HAL_SYSTICK_Callback+0x11c>
				_pulse_count = 0;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <HAL_SYSTICK_Callback+0x134>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20009fa4 	.word	0x20009fa4
 80008dc:	20000354 	.word	0x20000354
 80008e0:	20000000 	.word	0x20000000
 80008e4:	200002c8 	.word	0x200002c8
 80008e8:	40010000 	.word	0x40010000

080008ec <enableTriggerOut>:

void enableTriggerOut(char *buff)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	if(buff[0] == '1')
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b31      	cmp	r3, #49	; 0x31
 80008fa:	d102      	bne.n	8000902 <enableTriggerOut+0x16>
	{
		flag_pulse_out = 1;
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <enableTriggerOut+0x24>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
	}
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20009fa4 	.word	0x20009fa4

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  uint32_t b_shot = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fcad 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f89d 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 fa7f 	bl	8000e2c <MX_GPIO_Init>
  MX_DMA_Init();
 800092e:	f000 fa5d 	bl	8000dec <MX_DMA_Init>
  MX_ADC1_Init();
 8000932:	f000 f903 	bl	8000b3c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000936:	f000 fa0d 	bl	8000d54 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800093a:	f008 f9f5 	bl	8008d28 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800093e:	f000 f94f 	bl	8000be0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 8000942:	2301      	movs	r3, #1
 8000944:	461a      	mov	r2, r3
 8000946:	493a      	ldr	r1, [pc, #232]	; (8000a30 <main+0x11c>)
 8000948:	483a      	ldr	r0, [pc, #232]	; (8000a34 <main+0x120>)
 800094a:	f000 fe83 	bl	8001654 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 800094e:	483a      	ldr	r0, [pc, #232]	; (8000a38 <main+0x124>)
 8000950:	f003 ff5a 	bl	8004808 <HAL_TIM_Base_Start>

  // <PWM OUTPUT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000954:	2100      	movs	r1, #0
 8000956:	4839      	ldr	r0, [pc, #228]	; (8000a3c <main+0x128>)
 8000958:	f004 f80a 	bl	8004970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800095c:	2104      	movs	r1, #4
 800095e:	4837      	ldr	r0, [pc, #220]	; (8000a3c <main+0x128>)
 8000960:	f004 f806 	bl	8004970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000964:	2108      	movs	r1, #8
 8000966:	4835      	ldr	r0, [pc, #212]	; (8000a3c <main+0x128>)
 8000968:	f004 f802 	bl	8004970 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <main+0x12c>)
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
  b_shot = HAL_GetTick();
 8000972:	f000 fceb 	bl	800134c <HAL_GetTick>
 8000976:	6038      	str	r0, [r7, #0]
  HAL_Delay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fcf3 	bl	8001364 <HAL_Delay>
  TIM1->CCR1 = 0;
 800097e:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <main+0x12c>)
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <main+0x12c>)
 8000986:	2200      	movs	r2, #0
 8000988:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <main+0x12c>)
 800098c:	2200      	movs	r2, #0
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 1000))
 8000990:	f000 fcdc 	bl	800134c <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800099c:	429a      	cmp	r2, r3
 800099e:	d927      	bls.n	80009f0 <main+0xdc>
	  {
		  a_shot = HAL_GetTick();
 80009a0:	f000 fcd4 	bl	800134c <HAL_GetTick>
 80009a4:	6078      	str	r0, [r7, #4]
		  if(adcConversionComplete == 1)
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <main+0x130>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d120      	bne.n	80009f0 <main+0xdc>
		  {
			  adcConversionComplete = 0;
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <main+0x130>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  //sprintf(strA1, "A1:%d,Rate:%d,Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
			  sprintf(strA1, "A1:%d,Kalman:%d,Map:%d,Rate:%d\n", ad1_raw[0], kalman_adc_int, ad1_audio, conv_rate); // @suppress("Float formatting support")
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <main+0x11c>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <main+0x134>)
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <main+0x138>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <main+0x13c>)
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	460b      	mov	r3, r1
 80009ce:	4602      	mov	r2, r0
 80009d0:	4920      	ldr	r1, [pc, #128]	; (8000a54 <main+0x140>)
 80009d2:	4821      	ldr	r0, [pc, #132]	; (8000a58 <main+0x144>)
 80009d4:	f008 fed0 	bl	8009778 <siprintf>
			  CDC_Transmit_FS(strA1, strlen(strA1));
 80009d8:	481f      	ldr	r0, [pc, #124]	; (8000a58 <main+0x144>)
 80009da:	f7ff fc01 	bl	80001e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <main+0x144>)
 80009e6:	f008 fa75 	bl	8008ed4 <CDC_Transmit_FS>
			  conv_rate = 0;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <main+0x13c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
		  }

		  //// CDC_Transmit_FS(".", 1);
	  }

	  if(HAL_GetTick() > (b_shot + 3000))
 80009f0:	f000 fcac 	bl	800134c <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d902      	bls.n	8000a06 <main+0xf2>
	  {
		  b_shot = HAL_GetTick();
 8000a00:	f000 fca4 	bl	800134c <HAL_GetTick>
 8000a04:	6038      	str	r0, [r7, #0]

		  //ad1_audio = ad1_raw[0] / 32;
		  //TIM1->CCR1 = ad1_audio;
	  }

	  if(flag_usbrx == 1)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <main+0x148>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1bf      	bne.n	8000990 <main+0x7c>
	  {
		  CDC_Transmit_FS(usb_rx_buffer, strlen(usb_rx_buffer));
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <main+0x14c>)
 8000a12:	f7ff fbe5 	bl	80001e0 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <main+0x14c>)
 8000a1e:	f008 fa59 	bl	8008ed4 <CDC_Transmit_FS>
		  flag_usbrx = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <main+0x148>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
		  enableTriggerOut(usb_rx_buffer);
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <main+0x14c>)
 8000a2a:	f7ff ff5f 	bl	80008ec <enableTriggerOut>
	  if(HAL_GetTick() > (a_shot + 1000))
 8000a2e:	e7af      	b.n	8000990 <main+0x7c>
 8000a30:	20000344 	.word	0x20000344
 8000a34:	20000190 	.word	0x20000190
 8000a38:	20000280 	.word	0x20000280
 8000a3c:	20000238 	.word	0x20000238
 8000a40:	40010000 	.word	0x40010000
 8000a44:	20000350 	.word	0x20000350
 8000a48:	20009fb8 	.word	0x20009fb8
 8000a4c:	2000035c 	.word	0x2000035c
 8000a50:	20000358 	.word	0x20000358
 8000a54:	0800a0d8 	.word	0x0800a0d8
 8000a58:	20000310 	.word	0x20000310
 8000a5c:	2000030c 	.word	0x2000030c
 8000a60:	200002cc 	.word	0x200002cc

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2230      	movs	r2, #48	; 0x30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 fea0 	bl	80097b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <SystemClock_Config+0xd0>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <SystemClock_Config+0xd0>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <SystemClock_Config+0xd4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <SystemClock_Config+0xd4>)
 8000ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <SystemClock_Config+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ad8:	2319      	movs	r3, #25
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000adc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fa0a 	bl	8003f08 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afa:	f000 f9e7 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afe:	230f      	movs	r3, #15
 8000b00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b02:	2302      	movs	r3, #2
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fc6c 	bl	80043f8 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b26:	f000 f9d1 	bl	8000ecc <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3750      	adds	r7, #80	; 0x50
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <MX_ADC1_Init+0xa0>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b80:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000ba2:	f000 fc03 	bl	80013ac <HAL_ADC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bac:	f000 f98e 	bl	8000ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000bc2:	f000 fe55 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f97e 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000190 	.word	0x20000190
 8000bdc:	40012000 	.word	0x40012000

08000be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b096      	sub	sp, #88	; 0x58
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2220      	movs	r2, #32
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f008 fdcd 	bl	80097b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1e:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c20:	4a4b      	ldr	r2, [pc, #300]	; (8000d50 <MX_TIM1_Init+0x170>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c26:	2220      	movs	r2, #32
 8000c28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c32:	22fe      	movs	r2, #254	; 0xfe
 8000c34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3c:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c48:	4840      	ldr	r0, [pc, #256]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c4a:	f003 fd8d 	bl	8004768 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c54:	f000 f93a 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c62:	4619      	mov	r1, r3
 8000c64:	4839      	ldr	r0, [pc, #228]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c66:	f003 fff5 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c70:	f000 f92c 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c74:	4835      	ldr	r0, [pc, #212]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c76:	f003 fe21 	bl	80048bc <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c80:	f000 f924 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c90:	4619      	mov	r1, r3
 8000c92:	482e      	ldr	r0, [pc, #184]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000c94:	f004 fb72 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000c9e:	f000 f915 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 8;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000cc8:	f003 ff02 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000cd2:	f000 f8fb 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000ce0:	f003 fef6 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000cea:	f000 f8ef 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000cfc:	f003 fee8 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d06:	f000 f8e1 	bl	8000ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000d2e:	f004 fb93 	bl	8005458 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000d38:	f000 f8c8 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <MX_TIM1_Init+0x16c>)
 8000d3e:	f000 f9a9 	bl	8001094 <HAL_TIM_MspPostInit>

}
 8000d42:	bf00      	nop
 8000d44:	3758      	adds	r7, #88	; 0x58
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000238 	.word	0x20000238
 8000d50:	40010000 	.word	0x40010000

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d86:	2232      	movs	r2, #50	; 0x32
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d98:	f003 fce6 	bl	8004768 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 f893 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000db4:	f003 ff4e 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 f885 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000dd0:	f004 fad4 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000dda:	f000 f877 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000280 	.word	0x20000280

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_DMA_Init+0x3c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2038      	movs	r0, #56	; 0x38
 8000e14:	f001 f8b1 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e18:	2038      	movs	r0, #56	; 0x38
 8000e1a:	f001 f8ca 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_GPIO_Init+0x98>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <MX_GPIO_Init+0x9c>)
 8000e9c:	f001 fd9e 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_GPIO_Init+0x9c>)
 8000eb8:	f001 fc0c 	bl	80026d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a33      	ldr	r2, [pc, #204]	; (8001014 <HAL_ADC_MspInit+0xec>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d15f      	bne.n	800100a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a2a      	ldr	r2, [pc, #168]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_ADC_MspInit+0xf0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f82:	2302      	movs	r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <HAL_ADC_MspInit+0xf4>)
 8000f96:	f001 fb9d 	bl	80026d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <HAL_ADC_MspInit+0xfc>)
 8000f9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000fe0:	f001 f808 	bl	8001ff4 <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fea:	f7ff ff6f 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_ADC_MspInit+0xf8>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2012      	movs	r0, #18
 8001000:	f000 ffbb 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001004:	2012      	movs	r0, #18
 8001006:	f000 ffd4 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012000 	.word	0x40012000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	200001d8 	.word	0x200001d8
 8001024:	40026410 	.word	0x40026410

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_TIM_Base_MspInit+0x64>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10e      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001056:	e012      	b.n	800107e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001060:	d10d      	bne.n	800107e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_TIM_Base_MspInit+0x68>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40010000 	.word	0x40010000
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_TIM_MspPostInit+0x68>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11e      	bne.n	80010f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_MspPostInit+0x6c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_TIM_MspPostInit+0x70>)
 80010f0:	f001 faf0 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010000 	.word	0x40010000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f8e6 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001158:	f000 ff45 	bl	8001fe6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <ADC_IRQHandler+0x10>)
 8001166:	f000 f964 	bl	8001432 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000190 	.word	0x20000190

08001174 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA2_Stream0_IRQHandler+0x10>)
 800117a:	f001 f841 	bl	8002200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001d8 	.word	0x200001d8

08001188 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <OTG_FS_IRQHandler+0x10>)
 800118e:	f001 fd8e 	bl	8002cae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000aca8 	.word	0x2000aca8

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f008 fafc 	bl	80097c8 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20010000 	.word	0x20010000
 80011fc:	00000400 	.word	0x00000400
 8001200:	20009fc0 	.word	0x20009fc0
 8001204:	2000b520 	.word	0x2000b520

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffd7 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f008 fabb 	bl	80097d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fb59 	bl	8000914 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001270:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 8001274:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001278:	2000b51c 	.word	0x2000b51c

0800127c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <DMA1_Stream0_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 fe5b 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fe10 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe73 	bl	8001fce <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 fe3b 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000028 	.word	0x20000028
 800131c:	20000030 	.word	0x20000030
 8001320:	2000002c 	.word	0x2000002c

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000030 	.word	0x20000030
 8001348:	20009fc4 	.word	0x20009fc4

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20009fc4 	.word	0x20009fc4

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030

080013ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e033      	b.n	800142a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fdac 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d118      	bne.n	800141c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013f2:	f023 0302 	bic.w	r3, r3, #2
 80013f6:	f043 0202 	orr.w	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fb58 	bl	8001ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
 800141a:	e001      	b.n	8001420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d049      	beq.n	80014fc <HAL_ADC_IRQHandler+0xca>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d046      	beq.n	80014fc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12b      	bne.n	80014ec <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001498:	2b00      	cmp	r3, #0
 800149a:	d127      	bne.n	80014ec <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d119      	bne.n	80014ec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0220 	bic.w	r2, r2, #32
 80014c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff f8cd 	bl	800068c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f06f 0212 	mvn.w	r2, #18
 80014fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d057      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x190>
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d054      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d139      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001556:	2b00      	cmp	r3, #0
 8001558:	d12b      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d124      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11d      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fbfc 	bl	8001db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 020c 	mvn.w	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d017      	beq.n	8001608 <HAL_ADC_IRQHandler+0x1d6>
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d014      	beq.n	8001608 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10d      	bne.n	8001608 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f925 	bl	8001848 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f06f 0201 	mvn.w	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001616:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d015      	beq.n	800164a <HAL_ADC_IRQHandler+0x218>
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d012      	beq.n	800164a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f043 0202 	orr.w	r2, r3, #2
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0220 	mvn.w	r2, #32
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f90e 	bl	800185c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0220 	mvn.w	r2, #32
 8001648:	601a      	str	r2, [r3, #0]
  }
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Start_DMA+0x1e>
 800166e:	2302      	movs	r3, #2
 8001670:	e0ce      	b.n	8001810 <HAL_ADC_Start_DMA+0x1bc>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d018      	beq.n	80016ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001698:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_ADC_Start_DMA+0x1c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a5f      	ldr	r2, [pc, #380]	; (800181c <HAL_ADC_Start_DMA+0x1c8>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9a      	lsrs	r2, r3, #18
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c8:	d107      	bne.n	80016da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	f040 8086 	bne.w	80017f6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001714:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001728:	d106      	bne.n	8001738 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f023 0206 	bic.w	r2, r3, #6
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	645a      	str	r2, [r3, #68]	; 0x44
 8001736:	e002      	b.n	800173e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_ADC_Start_DMA+0x1cc>)
 8001748:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	4a35      	ldr	r2, [pc, #212]	; (8001824 <HAL_ADC_Start_DMA+0x1d0>)
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	4a34      	ldr	r2, [pc, #208]	; (8001828 <HAL_ADC_Start_DMA+0x1d4>)
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	4a33      	ldr	r2, [pc, #204]	; (800182c <HAL_ADC_Start_DMA+0x1d8>)
 8001760:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800176a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800177a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800178a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	334c      	adds	r3, #76	; 0x4c
 8001796:	4619      	mov	r1, r3
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f000 fcd8 	bl	8002150 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10f      	bne.n	80017cc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d129      	bne.n	800180e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e020      	b.n	800180e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_ADC_Start_DMA+0x1dc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11b      	bne.n	800180e <HAL_ADC_Start_DMA+0x1ba>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d114      	bne.n	800180e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	e00b      	b.n	800180e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f043 0210 	orr.w	r2, r3, #16
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000028 	.word	0x20000028
 800181c:	431bde83 	.word	0x431bde83
 8001820:	40012300 	.word	0x40012300
 8001824:	08001cad 	.word	0x08001cad
 8001828:	08001d67 	.word	0x08001d67
 800182c:	08001d83 	.word	0x08001d83
 8001830:	40012000 	.word	0x40012000

08001834 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1c>
 8001888:	2302      	movs	r3, #2
 800188a:	e105      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x228>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d925      	bls.n	80018e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	2207      	movs	r2, #7
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43da      	mvns	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	400a      	ands	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	4603      	mov	r3, r0
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4403      	add	r3, r0
 80018da:	3b1e      	subs	r3, #30
 80018dc:	409a      	lsls	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e022      	b.n	800192e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6919      	ldr	r1, [r3, #16]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	2207      	movs	r2, #7
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	4603      	mov	r3, r0
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4403      	add	r3, r0
 8001924:	409a      	lsls	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b06      	cmp	r3, #6
 8001934:	d824      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b05      	subs	r3, #5
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b05      	subs	r3, #5
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
 800197e:	e04c      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d824      	bhi.n	80019d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b23      	subs	r3, #35	; 0x23
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b23      	subs	r3, #35	; 0x23
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
 80019d0:	e023      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b41      	subs	r3, #65	; 0x41
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b41      	subs	r3, #65	; 0x41
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_ADC_ConfigChannel+0x234>)
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <HAL_ADC_ConfigChannel+0x238>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d109      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1cc>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_ADC_ConfigChannel+0x238>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d123      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x21e>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d003      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x1e6>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b11      	cmp	r3, #17
 8001a54:	d11b      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d111      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_ADC_ConfigChannel+0x23c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_ADC_ConfigChannel+0x240>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	20000028 	.word	0x20000028
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <ADC_Init+0x1f0>)
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <ADC_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e00f      	b.n	8001bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0202 	bic.w	r2, r2, #2
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	035a      	lsls	r2, r3, #13
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e007      	b.n	8001c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	051a      	lsls	r2, r3, #20
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6a:	025a      	lsls	r2, r3, #9
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	029a      	lsls	r2, r3, #10
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13c      	bne.n	8001d40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d12b      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d127      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d119      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0220 	bic.w	r2, r2, #32
 8001d12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7fe fca7 	bl	800068c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d3e:	e00e      	b.n	8001d5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fd85 	bl	800185c <HAL_ADC_ErrorCallback>
}
 8001d52:	e004      	b.n	8001d5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fd5d 	bl	8001834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fd5a 	bl	800185c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001fea:	f7fe fbe1 	bl	80007b0 <HAL_SYSTICK_Callback>
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff f9a4 	bl	800134c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e099      	b.n	8002144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002030:	e00f      	b.n	8002052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002032:	f7ff f98b 	bl	800134c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b05      	cmp	r3, #5
 800203e:	d908      	bls.n	8002052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e078      	b.n	8002144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e8      	bne.n	8002032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_DMA_Init+0x158>)
 800206c:	4013      	ands	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4313      	orrs	r3, r2
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f023 0307 	bic.w	r3, r3, #7
 80020d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d117      	bne.n	8002116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fa6f 	bl	80025dc <DMA_CheckFifoParam>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2240      	movs	r2, #64	; 0x40
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002112:	2301      	movs	r3, #1
 8002114:	e016      	b.n	8002144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fa26 	bl	8002570 <DMA_CalcBaseAndBitshift>
 8002124:	4603      	mov	r3, r0
 8002126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	223f      	movs	r2, #63	; 0x3f
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	f010803f 	.word	0xf010803f

08002150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_DMA_Start_IT+0x26>
 8002172:	2302      	movs	r3, #2
 8002174:	e040      	b.n	80021f8 <HAL_DMA_Start_IT+0xa8>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12f      	bne.n	80021ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f9b8 	bl	8002514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	223f      	movs	r2, #63	; 0x3f
 80021aa:	409a      	lsls	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0216 	orr.w	r2, r2, #22
 80021be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0208 	orr.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e005      	b.n	80021f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <HAL_DMA_IRQHandler+0x248>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a8e      	ldr	r2, [pc, #568]	; (800244c <HAL_DMA_IRQHandler+0x24c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a9b      	lsrs	r3, r3, #10
 8002218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	2208      	movs	r2, #8
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01a      	beq.n	800226c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2208      	movs	r2, #8
 800225a:	409a      	lsls	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2201      	movs	r2, #1
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2201      	movs	r2, #1
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2204      	movs	r2, #4
 80022a8:	409a      	lsls	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2204      	movs	r2, #4
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0204 	orr.w	r2, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2210      	movs	r2, #16
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d043      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d03c      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2210      	movs	r2, #16
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d018      	beq.n	8002342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d024      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
 800232e:	e01f      	b.n	8002370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e016      	b.n	8002370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2220      	movs	r2, #32
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 808f 	beq.w	80024a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8087 	beq.w	80024a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	2220      	movs	r2, #32
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d136      	bne.n	8002418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0216 	bic.w	r2, r2, #22
 80023b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_DMA_IRQHandler+0x1da>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0208 	bic.w	r2, r2, #8
 80023e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	223f      	movs	r2, #63	; 0x3f
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	2b00      	cmp	r3, #0
 800240c:	d07e      	beq.n	800250c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
        }
        return;
 8002416:	e079      	b.n	800250c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01d      	beq.n	8002462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	2b00      	cmp	r3, #0
 800243a:	d031      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
 8002444:	e02c      	b.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
 8002446:	bf00      	nop
 8002448:	20000028 	.word	0x20000028
 800244c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e01e      	b.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0210 	bic.w	r2, r2, #16
 800247e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d032      	beq.n	800250e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d022      	beq.n	80024fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	3301      	adds	r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d307      	bcc.n	80024e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f2      	bne.n	80024cc <HAL_DMA_IRQHandler+0x2cc>
 80024e6:	e000      	b.n	80024ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	e000      	b.n	800250e <HAL_DMA_IRQHandler+0x30e>
        return;
 800250c:	bf00      	nop
    }
  }
}
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d108      	bne.n	8002554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002552:	e007      	b.n	8002564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3b10      	subs	r3, #16
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <DMA_CalcBaseAndBitshift+0x68>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d909      	bls.n	80025b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	1d1a      	adds	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	; 0x58
 80025b0:	e007      	b.n	80025c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	aaaaaaab 	.word	0xaaaaaaab
 80025d8:	0800a150 	.word	0x0800a150

080025dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d856      	bhi.n	80026aa <DMA_CheckFifoParam+0xce>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <DMA_CheckFifoParam+0x28>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002615 	.word	0x08002615
 8002608:	08002627 	.word	0x08002627
 800260c:	08002615 	.word	0x08002615
 8002610:	080026ab 	.word	0x080026ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d046      	beq.n	80026ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e043      	b.n	80026ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800262e:	d140      	bne.n	80026b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e03d      	b.n	80026b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	d121      	bne.n	8002684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d837      	bhi.n	80026b6 <DMA_CheckFifoParam+0xda>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <DMA_CheckFifoParam+0x70>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002663 	.word	0x08002663
 8002654:	0800265d 	.word	0x0800265d
 8002658:	08002675 	.word	0x08002675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e030      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d025      	beq.n	80026ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002672:	e022      	b.n	80026ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800267c:	d11f      	bne.n	80026be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002682:	e01c      	b.n	80026be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d903      	bls.n	8002692 <DMA_CheckFifoParam+0xb6>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002690:	e018      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      break;
 8002696:	e015      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e00b      	b.n	80026c2 <DMA_CheckFifoParam+0xe6>
      break;
 80026aa:	bf00      	nop
 80026ac:	e00a      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e008      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e006      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e004      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
    }
  } 
  
  return status; 
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e159      	b.n	80029a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8148 	bne.w	800299e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d005      	beq.n	8002726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002722:	2b02      	cmp	r3, #2
 8002724:	d130      	bne.n	8002788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0201 	and.w	r2, r3, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d017      	beq.n	80027c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a2 	beq.w	800299e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b57      	ldr	r3, [pc, #348]	; (80029bc <HAL_GPIO_Init+0x2e8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_GPIO_Init+0x2e8>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_GPIO_Init+0x2e8>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x2ec>)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <HAL_GPIO_Init+0x2f0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x202>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a48      	ldr	r2, [pc, #288]	; (80029c8 <HAL_GPIO_Init+0x2f4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x1fe>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a47      	ldr	r2, [pc, #284]	; (80029cc <HAL_GPIO_Init+0x2f8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x1fa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_GPIO_Init+0x2fc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x1f6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <HAL_GPIO_Init+0x300>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x1f2>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e008      	b.n	80028d8 <HAL_GPIO_Init+0x204>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x204>
 80028ca:	2303      	movs	r3, #3
 80028cc:	e004      	b.n	80028d8 <HAL_GPIO_Init+0x204>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_Init+0x204>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x204>
 80028d6:	2300      	movs	r3, #0
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	f002 0203 	and.w	r2, r2, #3
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	4093      	lsls	r3, r2
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e8:	4935      	ldr	r1, [pc, #212]	; (80029c0 <HAL_GPIO_Init+0x2ec>)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_GPIO_Init+0x304>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800291a:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x304>)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002920:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002944:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_GPIO_Init+0x304>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_GPIO_Init+0x304>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	f67f aea2 	bls.w	80026f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40013800 	.word	0x40013800
 80029c4:	40020000 	.word	0x40020000
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020800 	.word	0x40020800
 80029d0:	40020c00 	.word	0x40020c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40013c00 	.word	0x40013c00

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f8:	e003      	b.n	8002a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fa:	887b      	ldrh	r3, [r7, #2]
 80029fc:	041a      	lsls	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a10:	b08f      	sub	sp, #60	; 0x3c
 8002a12:	af0a      	add	r7, sp, #40	; 0x28
 8002a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e10f      	b.n	8002c40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 fb92 	bl	8009164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 fe61 	bl	8005726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	687e      	ldr	r6, [r7, #4]
 8002a6c:	466d      	mov	r5, sp
 8002a6e:	f106 0410 	add.w	r4, r6, #16
 8002a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a82:	1d33      	adds	r3, r6, #4
 8002a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a86:	6838      	ldr	r0, [r7, #0]
 8002a88:	f002 fd38 	bl	80054fc <USB_CoreInit>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0d0      	b.n	8002c40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fe4f 	bl	8005748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e04a      	b.n	8002b46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	333d      	adds	r3, #61	; 0x3d
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	333c      	adds	r3, #60	; 0x3c
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	b298      	uxth	r0, r3
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	4602      	mov	r2, r0
 8002aee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3340      	adds	r3, #64	; 0x40
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3348      	adds	r3, #72	; 0x48
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334c      	adds	r3, #76	; 0x4c
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3354      	adds	r3, #84	; 0x54
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3af      	bcc.n	8002ab0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e044      	b.n	8002be0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3b5      	bcc.n	8002b56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	687e      	ldr	r6, [r7, #4]
 8002bf2:	466d      	mov	r5, sp
 8002bf4:	f106 0410 	add.w	r4, r6, #16
 8002bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c08:	1d33      	adds	r3, r6, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f002 fde7 	bl	80057e0 <USB_DevInit>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00d      	b.n	8002c40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 ff36 	bl	8006aaa <USB_DevDisconnect>

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_PCD_Start+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e020      	b.n	8002ca6 <HAL_PCD_Start+0x5e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d109      	bne.n	8002c88 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d005      	beq.n	8002c88 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fd39 	bl	8005704 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fee6 	bl	8006a68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b08d      	sub	sp, #52	; 0x34
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 ffa4 	bl	8006c12 <USB_GetMode>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f040 848a 	bne.w	80035e6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 ff08 	bl	8006aec <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8480 	beq.w	80035e4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fef5 	bl	8006aec <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d107      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f002 0202 	and.w	r2, r2, #2
 8002d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fee3 	bl	8006aec <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d161      	bne.n	8002df4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0210 	bic.w	r2, r2, #16
 8002d3e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	0c5b      	lsrs	r3, r3, #17
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d124      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d035      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a38      	ldr	r0, [r7, #32]
 8002d8c:	f003 fd1a 	bl	80067c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d9c:	441a      	add	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dae:	441a      	add	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]
 8002db4:	e016      	b.n	8002de4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	0c5b      	lsrs	r3, r3, #17
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d110      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6a38      	ldr	r0, [r7, #32]
 8002dce:	f003 fcf9 	bl	80067c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dde:	441a      	add	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0210 	orr.w	r2, r2, #16
 8002df2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fe77 	bl	8006aec <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e08:	f040 80a7 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fe7c 	bl	8006b12 <USB_ReadDevAllOutEpInterrupt>
 8002e1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e1c:	e099      	b.n	8002f52 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 808e 	beq.w	8002f46 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fea0 	bl	8006b7a <USB_ReadDevOutEPInterrupt>
 8002e3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e52:	461a      	mov	r2, r3
 8002e54:	2301      	movs	r3, #1
 8002e56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fec2 	bl	8003be4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	2308      	movs	r3, #8
 8002e7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 ff98 	bl	8003db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d030      	beq.n	8002f0c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d109      	bne.n	8002eca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d108      	bne.n	8002efa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f006 fa31 	bl	800935c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	461a      	mov	r2, r3
 8002f08:	2302      	movs	r3, #2
 8002f0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	461a      	mov	r2, r3
 8002f24:	2320      	movs	r3, #32
 8002f26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f44:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f af62 	bne.w	8002e1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fdc4 	bl	8006aec <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f6e:	f040 80db 	bne.w	8003128 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fde5 	bl	8006b46 <USB_ReadDevAllInEpInterrupt>
 8002f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f82:	e0cd      	b.n	8003120 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80c2 	beq.w	8003114 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fe0b 	bl	8006bb6 <USB_ReadDevInEPInterrupt>
 8002fa0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d057      	beq.n	800305c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fcc:	4013      	ands	r3, r2
 8002fce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d132      	bne.n	8003050 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	334c      	adds	r3, #76	; 0x4c
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4403      	add	r3, r0
 800300a:	3348      	adds	r3, #72	; 0x48
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4419      	add	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4403      	add	r3, r0
 800301e:	334c      	adds	r3, #76	; 0x4c
 8003020:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <HAL_PCD_IRQHandler+0x3a2>
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3354      	adds	r3, #84	; 0x54
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	f003 fe12 	bl	8006c74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f006 f905 	bl	8009266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003072:	461a      	mov	r2, r3
 8003074:	2308      	movs	r3, #8
 8003076:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308e:	461a      	mov	r2, r3
 8003090:	2310      	movs	r3, #16
 8003092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d023      	beq.n	8003102 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030bc:	6a38      	ldr	r0, [r7, #32]
 80030be:	f002 fcf3 	bl	8005aa8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3338      	adds	r3, #56	; 0x38
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	78db      	ldrb	r3, [r3, #3]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f006 f948 	bl	8009380 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fc:	461a      	mov	r2, r3
 80030fe:	2302      	movs	r3, #2
 8003100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800310c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fcdb 	bl	8003aca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3301      	adds	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f af2e 	bne.w	8002f84 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fcdd 	bl	8006aec <USB_ReadInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313c:	d122      	bne.n	8003184 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003158:	2b01      	cmp	r3, #1
 800315a:	d108      	bne.n	800316e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003164:	2100      	movs	r1, #0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fec2 	bl	8003ef0 <HAL_PCDEx_LPM_Callback>
 800316c:	e002      	b.n	8003174 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f006 f8e6 	bl	8009340 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fcaf 	bl	8006aec <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d112      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d102      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f006 f8a2 	bl	80092f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fc91 	bl	8006aec <USB_ReadInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	f040 80b7 	bne.w	8003346 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2110      	movs	r1, #16
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 fc58 	bl	8005aa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fc:	e046      	b.n	800328c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320a:	461a      	mov	r2, r3
 800320c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003210:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003222:	0151      	lsls	r1, r2, #5
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	440a      	add	r2, r1
 8003228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800322c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003230:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003244:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003256:	0151      	lsls	r1, r2, #5
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	440a      	add	r2, r1
 800325c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003260:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003264:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	0151      	lsls	r1, r2, #5
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	440a      	add	r2, r1
 800327c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003280:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003284:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	3301      	adds	r3, #1
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003292:	429a      	cmp	r2, r3
 8003294:	d3b3      	bcc.n	80031fe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c2:	f043 030b 	orr.w	r3, r3, #11
 80032c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d8:	f043 030b 	orr.w	r3, r3, #11
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	e015      	b.n	800330c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003306:	f043 030b 	orr.w	r3, r3, #11
 800330a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800331e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003330:	461a      	mov	r2, r3
 8003332:	f003 fc9f 	bl	8006c74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fbce 	bl	8006aec <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335a:	d124      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fc64 	bl	8006c2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f002 fc19 	bl	8005ba2 <USB_GetDevSpeed>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	f001 f9e8 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8003380:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4620      	mov	r0, r4
 800338c:	f002 f918 	bl	80055c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f005 ff90 	bl	80092b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fb9e 	bl	8006aec <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d10a      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f005 ff6d 	bl	800929a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f002 0208 	and.w	r2, r2, #8
 80033ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fb89 	bl	8006aec <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d122      	bne.n	800342a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e014      	b.n	8003420 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb27 	bl	8003a68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	3301      	adds	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	429a      	cmp	r2, r3
 8003428:	d3e5      	bcc.n	80033f6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f003 fb5c 	bl	8006aec <USB_ReadInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343e:	d13b      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	e02b      	b.n	800349e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3340      	adds	r3, #64	; 0x40
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d115      	bne.n	8003498 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800346c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	da12      	bge.n	8003498 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	333f      	adds	r3, #63	; 0x3f
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fae8 	bl	8003a68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	3301      	adds	r3, #1
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d3ce      	bcc.n	8003446 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 fb15 	bl	8006aec <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034cc:	d155      	bne.n	800357a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	e045      	b.n	8003560 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d12e      	bne.n	800355a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da2b      	bge.n	800355a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800350e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003512:	429a      	cmp	r2, r3
 8003514:	d121      	bne.n	800355a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003556:	6053      	str	r3, [r2, #4]
            break;
 8003558:	e007      	b.n	800356a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	429a      	cmp	r2, r3
 8003568:	d3b4      	bcc.n	80034d4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fab4 	bl	8006aec <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d10a      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f005 ff07 	bl	80093a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fa9e 	bl	8006aec <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d115      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f005 fef7 	bl	80093c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e000      	b.n	80035e6 <HAL_PCD_IRQHandler+0x938>
      return;
 80035e4:	bf00      	nop
    }
  }
}
 80035e6:	3734      	adds	r7, #52	; 0x34
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}

080035ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_PCD_SetAddress+0x1a>
 8003602:	2302      	movs	r3, #2
 8003604:	e013      	b.n	800362e <HAL_PCD_SetAddress+0x42>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f9fc 	bl	8006a1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	4608      	mov	r0, r1
 8003640:	4611      	mov	r1, r2
 8003642:	461a      	mov	r2, r3
 8003644:	4603      	mov	r3, r0
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	460b      	mov	r3, r1
 800364a:	803b      	strh	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da0f      	bge.n	800367c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3338      	adds	r3, #56	; 0x38
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	705a      	strb	r2, [r3, #1]
 800367a:	e00f      	b.n	800369c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036a8:	883a      	ldrh	r2, [r7, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	78ba      	ldrb	r2, [r7, #2]
 80036b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036c6:	78bb      	ldrb	r3, [r7, #2]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_EP_Open+0xaa>
 80036dc:	2302      	movs	r3, #2
 80036de:	e00e      	b.n	80036fe <HAL_PCD_EP_Open+0xc8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 fa7c 	bl	8005bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036fc:	7afb      	ldrb	r3, [r7, #11]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da0f      	bge.n	800373a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3338      	adds	r3, #56	; 0x38
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	705a      	strb	r2, [r3, #1]
 8003738:	e00f      	b.n	800375a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_EP_Close+0x6e>
 8003770:	2302      	movs	r3, #2
 8003772:	e00e      	b.n	8003792 <HAL_PCD_EP_Close+0x8c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4618      	mov	r0, r3
 8003784:	f002 faba 	bl	8005cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	460b      	mov	r3, r1
 80037a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037f6:	7afb      	ldrb	r3, [r7, #11]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	f002 fd99 	bl	8006344 <USB_EP0StartXfer>
 8003812:	e008      	b.n	8003826 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	6979      	ldr	r1, [r7, #20]
 8003822:	f002 fb47 	bl	8005eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	7afb      	ldrb	r3, [r7, #11]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	3338      	adds	r3, #56	; 0x38
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2201      	movs	r2, #1
 800389e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	7afb      	ldrb	r3, [r7, #11]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	f002 fd37 	bl	8006344 <USB_EP0StartXfer>
 80038d6:	e008      	b.n	80038ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	6979      	ldr	r1, [r7, #20]
 80038e6:	f002 fae5 	bl	8005eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d901      	bls.n	8003912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e050      	b.n	80039b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003916:	2b00      	cmp	r3, #0
 8003918:	da0f      	bge.n	800393a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	705a      	strb	r2, [r3, #1]
 8003938:	e00d      	b.n	8003956 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_PCD_EP_SetStall+0x82>
 8003972:	2302      	movs	r3, #2
 8003974:	e01e      	b.n	80039b4 <HAL_PCD_EP_SetStall+0xc0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	f002 ff75 	bl	8006874 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	b2d9      	uxtb	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	461a      	mov	r2, r3
 80039a6:	f003 f965 	bl	8006c74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d901      	bls.n	80039da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e042      	b.n	8003a60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da0f      	bge.n	8003a02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 020f 	and.w	r2, r3, #15
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3338      	adds	r3, #56	; 0x38
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	705a      	strb	r2, [r3, #1]
 8003a00:	e00f      	b.n	8003a22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_EP_ClrStall+0x86>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e00e      	b.n	8003a60 <HAL_PCD_EP_ClrStall+0xa4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68f9      	ldr	r1, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 ff7d 	bl	8006950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da0c      	bge.n	8003a96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	3338      	adds	r3, #56	; 0x38
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e00c      	b.n	8003ab0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68f9      	ldr	r1, [r7, #12]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f002 fd9c 	bl	80065f4 <USB_EPStopXfer>
 8003abc:	4603      	mov	r3, r0
 8003abe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08a      	sub	sp, #40	; 0x28
 8003ace:	af02      	add	r7, sp, #8
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3338      	adds	r3, #56	; 0x38
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d901      	bls.n	8003b02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06c      	b.n	8003bdc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d902      	bls.n	8003b1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3303      	adds	r3, #3
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b26:	e02b      	b.n	8003b80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d902      	bls.n	8003b44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3303      	adds	r3, #3
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4603      	mov	r3, r0
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f002 fdf0 	bl	8006748 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d809      	bhi.n	8003baa <PCD_WriteEmptyTxFifo+0xe0>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d203      	bcs.n	8003baa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1be      	bne.n	8003b28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d811      	bhi.n	8003bda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	6939      	ldr	r1, [r7, #16]
 8003bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	333c      	adds	r3, #60	; 0x3c
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d17b      	bne.n	8003d12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a61      	ldr	r2, [pc, #388]	; (8003dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	f240 80b9 	bls.w	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80b3 	beq.w	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	e0a7      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	2320      	movs	r3, #32
 8003c6a:	6093      	str	r3, [r2, #8]
 8003c6c:	e098      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f040 8093 	bne.w	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4a4b      	ldr	r2, [pc, #300]	; (8003dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d90f      	bls.n	8003ca2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	6093      	str	r3, [r2, #8]
 8003ca0:	e07e      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	0159      	lsls	r1, r3, #5
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	1ad2      	subs	r2, r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d114      	bne.n	8003d04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f002 ffc0 	bl	8006c74 <USB_EP0_OutStart>
 8003cf4:	e006      	b.n	8003d04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f005 fa90 	bl	8009230 <HAL_PCD_DataOutStageCallback>
 8003d10:	e046      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d124      	bne.n	8003d64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	6093      	str	r3, [r2, #8]
 8003d38:	e032      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	461a      	mov	r2, r3
 8003d52:	2320      	movs	r3, #32
 8003d54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f005 fa67 	bl	8009230 <HAL_PCD_DataOutStageCallback>
 8003d62:	e01d      	b.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d114      	bne.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f002 ff70 	bl	8006c74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f005 fa48 	bl	8009230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	4f54300a 	.word	0x4f54300a
 8003db0:	4f54310a 	.word	0x4f54310a

08003db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	333c      	adds	r3, #60	; 0x3c
 8003dcc:	3304      	adds	r3, #4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d90e      	bls.n	8003e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f005 f9ff 	bl	800920c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d90c      	bls.n	8003e30 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d108      	bne.n	8003e30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	f002 ff22 	bl	8006c74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	4f54300a 	.word	0x4f54300a

08003e40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e5e:	883b      	ldrh	r3, [r7, #0]
 8003e60:	0419      	lsls	r1, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6c:	e028      	b.n	8003ec0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	e00d      	b.n	8003e9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	3340      	adds	r3, #64	; 0x40
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	4413      	add	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d3ec      	bcc.n	8003e82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ea8:	883b      	ldrh	r3, [r7, #0]
 8003eaa:	0418      	lsls	r0, r3, #16
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4302      	orrs	r2, r0
 8003eb8:	3340      	adds	r3, #64	; 0x40
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e267      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d00c      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d112      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b82      	ldr	r3, [pc, #520]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e242      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b70      	ldr	r3, [pc, #448]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6c      	ldr	r2, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b69      	ldr	r3, [pc, #420]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd f9c4 	bl	800134c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd f9c0 	bl	800134c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e207      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f9b0 	bl	800134c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd f9ac 	bl	800134c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1f3      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1c7      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e03a      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x244>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407e:	f7fd f965 	bl	800134c <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fd f961 	bl	800134c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1a8      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_OscConfig+0x244>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd f944 	bl	800134c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c8:	f7fd f940 	bl	800134c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e187      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d036      	beq.n	8004160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd f924 	bl	800134c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004108:	f7fd f920 	bl	800134c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e167      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_OscConfig+0x240>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
 8004126:	e01b      	b.n	8004160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x248>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fd f90d 	bl	800134c <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004134:	e00e      	b.n	8004154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7fd f909 	bl	800134c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d907      	bls.n	8004154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e150      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b88      	ldr	r3, [pc, #544]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ea      	bne.n	8004136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8097 	beq.w	800429c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a73      	ldr	r2, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fd f8c9 	bl	800134c <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fd f8c5 	bl	800134c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e10c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x474>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ea>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a63      	ldr	r2, [pc, #396]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x30c>
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a5b      	ldr	r2, [pc, #364]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	e00b      	b.n	800422c <HAL_RCC_OscConfig+0x324>
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a57      	ldr	r2, [pc, #348]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a54      	ldr	r2, [pc, #336]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd f88a 	bl	800134c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423a:	e00a      	b.n	8004252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423c:	f7fd f886 	bl	800134c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e0cb      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ee      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fd f874 	bl	800134c <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fd f870 	bl	800134c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b5      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ee      	bne.n	8004268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	4a38      	ldr	r2, [pc, #224]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a1 	beq.w	80043e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d05c      	beq.n	800436c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d141      	bne.n	800433e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fd f844 	bl	800134c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd f840 	bl	800134c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e087      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	3b01      	subs	r3, #1
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	491b      	ldr	r1, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fd f819 	bl	800134c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fd f815 	bl	800134c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e05c      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x416>
 800433c:	e054      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_OscConfig+0x478>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f802 	bl	800134c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fc fffe 	bl	800134c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e045      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x470>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
 800436a:	e03d      	b.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e038      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
 8004378:	40023800 	.word	0x40023800
 800437c:	40007000 	.word	0x40007000
 8004380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d028      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d121      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d11a      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800

080043f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0cc      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b68      	ldr	r3, [pc, #416]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d90c      	bls.n	8004434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0b8      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	494d      	ldr	r1, [pc, #308]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d044      	beq.n	8004518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d119      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e06f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e067      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 0203 	bic.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4934      	ldr	r1, [pc, #208]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e8:	f7fc ff30 	bl	800134c <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fc ff2c 	bl	800134c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e04f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 020c 	and.w	r2, r3, #12
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	429a      	cmp	r2, r3
 8004516:	d1eb      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20c      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e032      	b.n	80045a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4916      	ldr	r1, [pc, #88]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490e      	ldr	r1, [pc, #56]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457e:	f000 f821 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490a      	ldr	r1, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	4a09      	ldr	r2, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fc fe90 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00
 80045b4:	40023800 	.word	0x40023800
 80045b8:	0800a140 	.word	0x0800a140
 80045bc:	20000028 	.word	0x20000028
 80045c0:	2000002c 	.word	0x2000002c

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b090      	sub	sp, #64	; 0x40
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d00d      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x40>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	f200 80a1 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x3a>
 80045f6:	e09b      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045fc:	e09b      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b53      	ldr	r3, [pc, #332]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004602:	e098      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004604:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800460e:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d028      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	627a      	str	r2, [r7, #36]	; 0x24
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800462c:	2100      	movs	r1, #0
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 8004630:	fb03 f201 	mul.w	r2, r3, r1
 8004634:	2300      	movs	r3, #0
 8004636:	fb00 f303 	mul.w	r3, r0, r3
 800463a:	4413      	add	r3, r2
 800463c:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_RCC_GetSysClockFreq+0x188>)
 800463e:	fba0 1202 	umull	r1, r2, r0, r2
 8004642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004644:	460a      	mov	r2, r1
 8004646:	62ba      	str	r2, [r7, #40]	; 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464a:	4413      	add	r3, r2
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2200      	movs	r2, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800465e:	f7fb fe17 	bl	8000290 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4613      	mov	r3, r2
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466a:	e053      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	617a      	str	r2, [r7, #20]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800467e:	f04f 0b00 	mov.w	fp, #0
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004694:	0150      	lsls	r0, r2, #5
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	ebb2 080a 	subs.w	r8, r2, sl
 800469e:	eb63 090b 	sbc.w	r9, r3, fp
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046b6:	ebb2 0408 	subs.w	r4, r2, r8
 80046ba:	eb63 0509 	sbc.w	r5, r3, r9
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	00eb      	lsls	r3, r5, #3
 80046c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	4614      	mov	r4, r2
 80046d0:	461d      	mov	r5, r3
 80046d2:	eb14 030a 	adds.w	r3, r4, sl
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	eb45 030b 	adc.w	r3, r5, fp
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	2200      	movs	r2, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	60fa      	str	r2, [r7, #12]
 8004704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004708:	f7fb fdc2 	bl	8000290 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_GetSysClockFreq+0x180>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetSysClockFreq+0x184>)
 8004732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004738:	4618      	mov	r0, r3
 800473a:	3740      	adds	r7, #64	; 0x40
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	017d7840 	.word	0x017d7840

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000028 	.word	0x20000028

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e041      	b.n	80047fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fc4a 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fb1c 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e03c      	b.n	800489a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_TIM_Base_Start+0xa0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_TIM_Base_Start+0x5c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d013      	beq.n	8004864 <HAL_TIM_Base_Start+0x5c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <HAL_TIM_Base_Start+0xa4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_TIM_Base_Start+0x5c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_TIM_Base_Start+0xa8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_TIM_Base_Start+0x5c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_TIM_Base_Start+0xac>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIM_Base_Start+0x5c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_TIM_Base_Start+0xb0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d111      	bne.n	8004888 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b06      	cmp	r3, #6
 8004874:	d010      	beq.n	8004898 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	e007      	b.n	8004898 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40014000 	.word	0x40014000

080048bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e041      	b.n	8004952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f839 	bl	800495a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f000 fa72 	bl	8004de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_TIM_PWM_Start+0x24>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e022      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d109      	bne.n	80049ae <HAL_TIM_PWM_Start+0x3e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e015      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d109      	bne.n	80049c8 <HAL_TIM_PWM_Start+0x58>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e008      	b.n	80049da <HAL_TIM_PWM_Start+0x6a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e068      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f0:	e013      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x92>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a00:	e00b      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0xa2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a10:	e003      	b.n	8004a1a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fc84 	bl	8005330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <HAL_TIM_PWM_Start+0x14c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_TIM_PWM_Start+0x14c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d018      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x10e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d013      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x10e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_TIM_PWM_Start+0x150>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x10e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_TIM_PWM_Start+0x154>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x10e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <HAL_TIM_PWM_Start+0x158>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x10e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <HAL_TIM_PWM_Start+0x15c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d010      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	e007      	b.n	8004ab2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40014000 	.word	0x40014000

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ae      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f200 809f 	bhi.w	8004c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004c3d 	.word	0x08004c3d
 8004b0c:	08004c3d 	.word	0x08004c3d
 8004b10:	08004c3d 	.word	0x08004c3d
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004c3d 	.word	0x08004c3d
 8004b1c:	08004c3d 	.word	0x08004c3d
 8004b20:	08004c3d 	.word	0x08004c3d
 8004b24:	08004bbb 	.word	0x08004bbb
 8004b28:	08004c3d 	.word	0x08004c3d
 8004b2c:	08004c3d 	.word	0x08004c3d
 8004b30:	08004c3d 	.word	0x08004c3d
 8004b34:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f9d0 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
      break;
 8004b76:	e064      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa16 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e043      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fa61 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0208 	orr.w	r2, r2, #8
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]
      break;
 8004bf8:	e023      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 faab 	bl	800515c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	021a      	lsls	r2, r3, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	61da      	str	r2, [r3, #28]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	; 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f000 faf1 	bl	80052f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f000 fada 	bl	80052f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fa4e 	bl	80051fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	; 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 faa7 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fa6d 	bl	800525a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	; 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fa97 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fa2e 	bl	80051fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa87 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fa7e 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a34      	ldr	r2, [pc, #208]	; (8004ec8 <TIM_Base_SetConfig+0xe4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_Base_SetConfig+0x38>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d00b      	beq.n	8004e1c <TIM_Base_SetConfig+0x38>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <TIM_Base_SetConfig+0xe8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0x38>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <TIM_Base_SetConfig+0xec>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0x38>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0xf0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a25      	ldr	r2, [pc, #148]	; (8004ec8 <TIM_Base_SetConfig+0xe4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <TIM_Base_SetConfig+0xe8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <TIM_Base_SetConfig+0xec>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a20      	ldr	r2, [pc, #128]	; (8004ed4 <TIM_Base_SetConfig+0xf0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <TIM_Base_SetConfig+0xf4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <TIM_Base_SetConfig+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <TIM_Base_SetConfig+0xfc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <TIM_Base_SetConfig+0xe4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d103      	bne.n	8004eb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40010000 	.word	0x40010000

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0210 	bic.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <TIM_OC2_SetConfig+0xd4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a15      	ldr	r2, [pc, #84]	; (8005084 <TIM_OC2_SetConfig+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <TIM_OC3_SetConfig+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10d      	bne.n	8005102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <TIM_OC3_SetConfig+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d113      	bne.n	8005132 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000

0800515c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	031b      	lsls	r3, r3, #12
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <TIM_OC4_SetConfig+0x9c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d109      	bne.n	80051d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000

080051fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 030a 	bic.w	r3, r3, #10
 8005238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0210 	bic.w	r2, r3, #16
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f043 0307 	orr.w	r3, r3, #7
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	431a      	orrs	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	2201      	movs	r2, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e050      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e0:	d013      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a18      	ldr	r2, [pc, #96]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a13      	ldr	r2, [pc, #76]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40014000 	.word	0x40014000

08005458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005470:	2302      	movs	r3, #2
 8005472:	e03d      	b.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 001c 	add.w	r0, r7, #28
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	2b01      	cmp	r3, #1
 8005512:	d122      	bne.n	800555a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800553c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fbee 	bl	8006d30 <USB_CoreReset>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	e01a      	b.n	8005590 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f001 fbe2 	bl	8006d30 <USB_CoreReset>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
 8005582:	e005      	b.n	8005590 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10b      	bne.n	80055ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f043 0206 	orr.w	r2, r3, #6
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ba:	b004      	add	sp, #16
 80055bc:	4770      	bx	lr
	...

080055c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d165      	bne.n	80056a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a41      	ldr	r2, [pc, #260]	; (80056dc <USB_SetTurnaroundTime+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d906      	bls.n	80055ea <USB_SetTurnaroundTime+0x2a>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <USB_SetTurnaroundTime+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d202      	bcs.n	80055ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055e4:	230f      	movs	r3, #15
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e062      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a3c      	ldr	r2, [pc, #240]	; (80056e0 <USB_SetTurnaroundTime+0x120>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d306      	bcc.n	8005600 <USB_SetTurnaroundTime+0x40>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a3b      	ldr	r2, [pc, #236]	; (80056e4 <USB_SetTurnaroundTime+0x124>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d202      	bcs.n	8005600 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055fa:	230e      	movs	r3, #14
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e057      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a38      	ldr	r2, [pc, #224]	; (80056e4 <USB_SetTurnaroundTime+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d306      	bcc.n	8005616 <USB_SetTurnaroundTime+0x56>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a37      	ldr	r2, [pc, #220]	; (80056e8 <USB_SetTurnaroundTime+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d202      	bcs.n	8005616 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005610:	230d      	movs	r3, #13
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e04c      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a33      	ldr	r2, [pc, #204]	; (80056e8 <USB_SetTurnaroundTime+0x128>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d306      	bcc.n	800562c <USB_SetTurnaroundTime+0x6c>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a32      	ldr	r2, [pc, #200]	; (80056ec <USB_SetTurnaroundTime+0x12c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d802      	bhi.n	800562c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005626:	230c      	movs	r3, #12
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e041      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a2f      	ldr	r2, [pc, #188]	; (80056ec <USB_SetTurnaroundTime+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d906      	bls.n	8005642 <USB_SetTurnaroundTime+0x82>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a2e      	ldr	r2, [pc, #184]	; (80056f0 <USB_SetTurnaroundTime+0x130>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d802      	bhi.n	8005642 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800563c:	230b      	movs	r3, #11
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e036      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <USB_SetTurnaroundTime+0x130>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d906      	bls.n	8005658 <USB_SetTurnaroundTime+0x98>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a29      	ldr	r2, [pc, #164]	; (80056f4 <USB_SetTurnaroundTime+0x134>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d802      	bhi.n	8005658 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005652:	230a      	movs	r3, #10
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e02b      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <USB_SetTurnaroundTime+0x134>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d906      	bls.n	800566e <USB_SetTurnaroundTime+0xae>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <USB_SetTurnaroundTime+0x138>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d202      	bcs.n	800566e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005668:	2309      	movs	r3, #9
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e020      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <USB_SetTurnaroundTime+0x138>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d306      	bcc.n	8005684 <USB_SetTurnaroundTime+0xc4>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <USB_SetTurnaroundTime+0x13c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d802      	bhi.n	8005684 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800567e:	2308      	movs	r3, #8
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e015      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <USB_SetTurnaroundTime+0x13c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d906      	bls.n	800569a <USB_SetTurnaroundTime+0xda>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <USB_SetTurnaroundTime+0x140>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d202      	bcs.n	800569a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005694:	2307      	movs	r3, #7
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e00a      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800569a:	2306      	movs	r3, #6
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e007      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056a6:	2309      	movs	r3, #9
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e001      	b.n	80056b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056ac:	2309      	movs	r3, #9
 80056ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	029b      	lsls	r3, r3, #10
 80056c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	00d8acbf 	.word	0x00d8acbf
 80056e0:	00e4e1c0 	.word	0x00e4e1c0
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	01067380 	.word	0x01067380
 80056ec:	011a499f 	.word	0x011a499f
 80056f0:	01312cff 	.word	0x01312cff
 80056f4:	014ca43f 	.word	0x014ca43f
 80056f8:	016e3600 	.word	0x016e3600
 80056fc:	01a6ab1f 	.word	0x01a6ab1f
 8005700:	01e84800 	.word	0x01e84800

08005704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f043 0201 	orr.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d115      	bne.n	8005796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005776:	2001      	movs	r0, #1
 8005778:	f7fb fdf4 	bl	8001364 <HAL_Delay>
      ms++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fa45 	bl	8006c12 <USB_GetMode>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d01e      	beq.n	80057cc <USB_SetCurrentMode+0x84>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b31      	cmp	r3, #49	; 0x31
 8005792:	d9f0      	bls.n	8005776 <USB_SetCurrentMode+0x2e>
 8005794:	e01a      	b.n	80057cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d115      	bne.n	80057c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057a8:	2001      	movs	r0, #1
 80057aa:	f7fb fddb 	bl	8001364 <HAL_Delay>
      ms++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fa2c 	bl	8006c12 <USB_GetMode>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <USB_SetCurrentMode+0x84>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b31      	cmp	r3, #49	; 0x31
 80057c4:	d9f0      	bls.n	80057a8 <USB_SetCurrentMode+0x60>
 80057c6:	e001      	b.n	80057cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e005      	b.n	80057d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b32      	cmp	r3, #50	; 0x32
 80057d0:	d101      	bne.n	80057d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e0:	b084      	sub	sp, #16
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	e009      	b.n	8005814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3340      	adds	r3, #64	; 0x40
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	2200      	movs	r2, #0
 800580c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3301      	adds	r3, #1
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b0e      	cmp	r3, #14
 8005818:	d9f2      	bls.n	8005800 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800581a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11c      	bne.n	800585a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582e:	f043 0302 	orr.w	r3, r3, #2
 8005832:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
 8005858:	e00b      	b.n	8005872 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005878:	461a      	mov	r2, r3
 800587a:	2300      	movs	r3, #0
 800587c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005884:	4619      	mov	r1, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	461a      	mov	r2, r3
 800588e:	680b      	ldr	r3, [r1, #0]
 8005890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	2b01      	cmp	r3, #1
 8005896:	d10c      	bne.n	80058b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800589e:	2100      	movs	r1, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f965 	bl	8005b70 <USB_SetDevSpeed>
 80058a6:	e008      	b.n	80058ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058a8:	2101      	movs	r1, #1
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f960 	bl	8005b70 <USB_SetDevSpeed>
 80058b0:	e003      	b.n	80058ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058b2:	2103      	movs	r1, #3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f95b 	bl	8005b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058ba:	2110      	movs	r1, #16
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8f3 	bl	8005aa8 <USB_FlushTxFifo>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f91f 	bl	8005b10 <USB_FlushRxFifo>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	461a      	mov	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e043      	b.n	800598e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591c:	d118      	bne.n	8005950 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e013      	b.n	8005962 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	461a      	mov	r2, r3
 8005948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e008      	b.n	8005962 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	429a      	cmp	r2, r3
 8005994:	d3b7      	bcc.n	8005906 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	e043      	b.n	8005a24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b2:	d118      	bne.n	80059e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e013      	b.n	80059f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e008      	b.n	80059f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	3301      	adds	r3, #1
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3b7      	bcc.n	800599c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f043 0210 	orr.w	r2, r3, #16
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <USB_DevInit+0x2c4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f043 0208 	orr.w	r2, r3, #8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8c:	f043 0304 	orr.w	r3, r3, #4
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa0:	b004      	add	sp, #16
 8005aa2:	4770      	bx	lr
 8005aa4:	803c3800 	.word	0x803c3800

08005aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <USB_FlushTxFifo+0x64>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e01b      	b.n	8005b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	daf2      	bge.n	8005ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	019b      	lsls	r3, r3, #6
 8005ad8:	f043 0220 	orr.w	r2, r3, #32
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <USB_FlushTxFifo+0x64>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e006      	b.n	8005b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d0f0      	beq.n	8005ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <USB_FlushRxFifo+0x5c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e018      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	daf2      	bge.n	8005b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <USB_FlushRxFifo+0x5c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	00030d40 	.word	0x00030d40

08005b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0306 	and.w	r3, r3, #6
 8005bba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
 8005bc6:	e00a      	b.n	8005bde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d002      	beq.n	8005bd4 <USB_GetDevSpeed+0x32>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d102      	bne.n	8005bda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	75fb      	strb	r3, [r7, #23]
 8005bd8:	e001      	b.n	8005bde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bda:	230f      	movs	r3, #15
 8005bdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d13a      	bne.n	8005c7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d155      	bne.n	8005cec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	791b      	ldrb	r3, [r3, #4]
 8005c5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	059b      	lsls	r3, r3, #22
 8005c62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c64:	4313      	orrs	r3, r2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e036      	b.n	8005cec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11a      	bne.n	8005cec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	791b      	ldrb	r3, [r3, #4]
 8005cd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d161      	bne.n	8005ddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2e:	d11f      	bne.n	8005d70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d90:	4013      	ands	r3, r2
 8005d92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f303 	lsl.w	r3, r1, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005db4:	4013      	ands	r3, r2
 8005db6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	0159      	lsls	r1, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <USB_DeactivateEndpoint+0x1b0>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	e060      	b.n	8005e9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df2:	d11f      	bne.n	8005e34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	2101      	movs	r1, #1
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e54:	4013      	ands	r3, r2
 8005e56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	43db      	mvns	r3, r3
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0159      	lsls	r1, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	440b      	add	r3, r1
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	4619      	mov	r1, r3
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <USB_DeactivateEndpoint+0x1b4>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	ec337800 	.word	0xec337800
 8005eb0:	eff37800 	.word	0xeff37800

08005eb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 815c 	bne.w	800618e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d132      	bne.n	8005f44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005efc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3c:	0cdb      	lsrs	r3, r3, #19
 8005f3e:	04db      	lsls	r3, r3, #19
 8005f40:	6113      	str	r3, [r2, #16]
 8005f42:	e074      	b.n	800602e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	0cdb      	lsrs	r3, r3, #19
 8005f60:	04db      	lsls	r3, r3, #19
 8005f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6999      	ldr	r1, [r3, #24]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	440b      	add	r3, r1
 8005fa0:	1e59      	subs	r1, r3, #1
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005faa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fac:	4b9d      	ldr	r3, [pc, #628]	; (8006224 <USB_EPStartXfer+0x370>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	0148      	lsls	r0, r1, #5
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	4401      	add	r1, r0
 8005fb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	0148      	lsls	r0, r1, #5
 8005fda:	69f9      	ldr	r1, [r7, #28]
 8005fdc:	4401      	add	r1, r0
 8005fde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	791b      	ldrb	r3, [r3, #4]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d11f      	bne.n	800602e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006008:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800600c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800602c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d14b      	bne.n	80060cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	791b      	ldrb	r3, [r3, #4]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d128      	bne.n	80060aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d110      	bne.n	800608a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e00f      	b.n	80060aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e133      	b.n	8006334 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d015      	beq.n	8006120 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 811b 	beq.w	8006334 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	2101      	movs	r1, #1
 8006110:	fa01 f303 	lsl.w	r3, r1, r3
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611a:	4313      	orrs	r3, r2
 800611c:	634b      	str	r3, [r1, #52]	; 0x34
 800611e:	e109      	b.n	8006334 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d110      	bne.n	8006152 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e00f      	b.n	8006172 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6919      	ldr	r1, [r3, #16]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	b298      	uxth	r0, r3
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fade 	bl	8006748 <USB_WritePacket>
 800618c:	e0d2      	b.n	8006334 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a8:	0cdb      	lsrs	r3, r3, #19
 80061aa:	04db      	lsls	r3, r3, #19
 80061ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d126      	bne.n	8006228 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	0148      	lsls	r0, r1, #5
 80061f4:	69f9      	ldr	r1, [r7, #28]
 80061f6:	4401      	add	r1, r0
 80061f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621e:	6113      	str	r3, [r2, #16]
 8006220:	e03a      	b.n	8006298 <USB_EPStartXfer+0x3e4>
 8006222:	bf00      	nop
 8006224:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4413      	add	r3, r2
 8006232:	1e5a      	subs	r2, r3, #1
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	8afa      	ldrh	r2, [r7, #22]
 8006244:	fb03 f202 	mul.w	r2, r3, r2
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	04d9      	lsls	r1, r3, #19
 800625e:	4b38      	ldr	r3, [pc, #224]	; (8006340 <USB_EPStartXfer+0x48c>)
 8006260:	400b      	ands	r3, r1
 8006262:	69b9      	ldr	r1, [r7, #24]
 8006264:	0148      	lsls	r0, r1, #5
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	4401      	add	r1, r0
 800626a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800626e:	4313      	orrs	r3, r2
 8006270:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006288:	69b9      	ldr	r1, [r7, #24]
 800628a:	0148      	lsls	r0, r1, #5
 800628c:	69f9      	ldr	r1, [r7, #28]
 800628e:	4401      	add	r1, r0
 8006290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006294:	4313      	orrs	r3, r2
 8006296:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10d      	bne.n	80062ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	460a      	mov	r2, r1
 80062b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d128      	bne.n	8006314 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d110      	bne.n	80062f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e00f      	b.n	8006314 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006312:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	1ff80000 	.word	0x1ff80000

08006344 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 80ce 	bne.w	8006502 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d132      	bne.n	80063d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800638c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	0cdb      	lsrs	r3, r3, #19
 80063ce:	04db      	lsls	r3, r3, #19
 80063d0:	6113      	str	r3, [r2, #16]
 80063d2:	e04e      	b.n	8006472 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	0cdb      	lsrs	r3, r3, #19
 80063f0:	04db      	lsls	r3, r3, #19
 80063f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006416:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800644a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	0148      	lsls	r0, r1, #5
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	4401      	add	r1, r0
 800646a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d11e      	bne.n	80064b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	461a      	mov	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e097      	b.n	80065e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8083 	beq.w	80065e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	2101      	movs	r1, #1
 80064f2:	fa01 f303 	lsl.w	r3, r1, r3
 80064f6:	6979      	ldr	r1, [r7, #20]
 80064f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064fc:	4313      	orrs	r3, r2
 80064fe:	634b      	str	r3, [r1, #52]	; 0x34
 8006500:	e071      	b.n	80065e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651c:	0cdb      	lsrs	r3, r3, #19
 800651e:	04db      	lsls	r3, r3, #19
 8006520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006544:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800657c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006594:	6939      	ldr	r1, [r7, #16]
 8006596:	0148      	lsls	r0, r1, #5
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	4401      	add	r1, r0
 800659c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10d      	bne.n	80065c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6919      	ldr	r1, [r3, #16]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	460a      	mov	r2, r1
 80065c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d14a      	bne.n	80066a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662a:	f040 8086 	bne.w	800673a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	7812      	ldrb	r2, [r2, #0]
 8006642:	0151      	lsls	r1, r2, #5
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	440a      	add	r2, r1
 8006648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006650:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006682:	4293      	cmp	r3, r2
 8006684:	d902      	bls.n	800668c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
          break;
 800668a:	e056      	b.n	800673a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a4:	d0e7      	beq.n	8006676 <USB_EPStopXfer+0x82>
 80066a6:	e048      	b.n	800673a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d13b      	bne.n	800673a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f242 7210 	movw	r2, #10000	; 0x2710
 8006716:	4293      	cmp	r3, r2
 8006718:	d902      	bls.n	8006720 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
          break;
 800671e:	e00c      	b.n	800673a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d0e7      	beq.n	800670a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
}
 800673c:	4618      	mov	r0, r3
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006748:	b480      	push	{r7}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4611      	mov	r1, r2
 8006754:	461a      	mov	r2, r3
 8006756:	460b      	mov	r3, r1
 8006758:	71fb      	strb	r3, [r7, #7]
 800675a:	4613      	mov	r3, r2
 800675c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d123      	bne.n	80067b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e018      	b.n	80067ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	031a      	lsls	r2, r3, #12
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	4413      	add	r3, r2
 8006784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006788:	461a      	mov	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3301      	adds	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	3301      	adds	r3, #1
 80067a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d3e2      	bcc.n	800677c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3724      	adds	r7, #36	; 0x24
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b08b      	sub	sp, #44	; 0x2c
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	b29b      	uxth	r3, r3
 80067e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	e014      	b.n	800681a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	3301      	adds	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	3301      	adds	r3, #1
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	3301      	adds	r3, #1
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	3301      	adds	r3, #1
 8006818:	623b      	str	r3, [r7, #32]
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3e6      	bcc.n	80067f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006822:	8bfb      	ldrh	r3, [r7, #30]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01e      	beq.n	8006866 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006832:	461a      	mov	r2, r3
 8006834:	f107 0310 	add.w	r3, r7, #16
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	701a      	strb	r2, [r3, #0]
      i++;
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	3301      	adds	r3, #1
 8006852:	623b      	str	r3, [r7, #32]
      pDest++;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	3301      	adds	r3, #1
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800685a:	8bfb      	ldrh	r3, [r7, #30]
 800685c:	3b01      	subs	r3, #1
 800685e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006860:	8bfb      	ldrh	r3, [r7, #30]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1ea      	bne.n	800683c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006868:	4618      	mov	r0, r3
 800686a:	372c      	adds	r7, #44	; 0x2c
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d12c      	bne.n	80068ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	db12      	blt.n	80068c8 <USB_EPSetStall+0x54>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	e02b      	b.n	8006942 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db12      	blt.n	8006922 <USB_EPSetStall+0xae>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006920:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006940:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d128      	bne.n	80069be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800698a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	791b      	ldrb	r3, [r3, #4]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d003      	beq.n	800699c <USB_EPClearStall+0x4c>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d138      	bne.n	8006a0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e027      	b.n	8006a0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	791b      	ldrb	r3, [r3, #4]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d003      	beq.n	80069ee <USB_EPClearStall+0x9e>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d10f      	bne.n	8006a0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a96:	f023 0302 	bic.w	r3, r3, #2
 8006a9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ac4:	f023 0303 	bic.w	r3, r3, #3
 8006ac8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad8:	f043 0302 	orr.w	r3, r3, #2
 8006adc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	4013      	ands	r3, r2
 8006b34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	0c1b      	lsrs	r3, r3, #16
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	b29b      	uxth	r3, r3
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b087      	sub	sp, #28
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	01db      	lsls	r3, r3, #7
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4013      	ands	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c04:	68bb      	ldr	r3, [r7, #8]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	333c      	adds	r3, #60	; 0x3c
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <USB_EP0_OutStart+0xb8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d90a      	bls.n	8006cae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca8:	d101      	bne.n	8006cae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e037      	b.n	8006d1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cdc:	f043 0318 	orr.w	r3, r3, #24
 8006ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006cf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10f      	bne.n	8006d1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	4f54300a 	.word	0x4f54300a

08006d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <USB_CoreReset+0x64>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d901      	bls.n	8006d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e01b      	b.n	8006d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	daf2      	bge.n	8006d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <USB_CoreReset+0x64>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d0f0      	beq.n	8006d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	00030d40 	.word	0x00030d40

08006d98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006da4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006da8:	f002 fca2 	bl	80096f0 <USBD_static_malloc>
 8006dac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32b0      	adds	r2, #176	; 0xb0
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e0d4      	b.n	8006f72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006dc8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006dcc:	2100      	movs	r1, #0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f002 fcf2 	bl	80097b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32b0      	adds	r2, #176	; 0xb0
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	32b0      	adds	r2, #176	; 0xb0
 8006dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7c1b      	ldrb	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d138      	bne.n	8006e72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e00:	4b5e      	ldr	r3, [pc, #376]	; (8006f7c <USBD_CDC_Init+0x1e4>)
 8006e02:	7819      	ldrb	r1, [r3, #0]
 8006e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e08:	2202      	movs	r2, #2
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 fb4d 	bl	80094aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e10:	4b5a      	ldr	r3, [pc, #360]	; (8006f7c <USBD_CDC_Init+0x1e4>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	2201      	movs	r2, #1
 8006e28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e2a:	4b55      	ldr	r3, [pc, #340]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e32:	2202      	movs	r2, #2
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f002 fb38 	bl	80094aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e3a:	4b51      	ldr	r3, [pc, #324]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e52:	2201      	movs	r2, #1
 8006e54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e56:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <USBD_CDC_Init+0x1ec>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	f003 020f 	and.w	r2, r3, #15
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	3326      	adds	r3, #38	; 0x26
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	e035      	b.n	8006ede <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e72:	4b42      	ldr	r3, [pc, #264]	; (8006f7c <USBD_CDC_Init+0x1e4>)
 8006e74:	7819      	ldrb	r1, [r3, #0]
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	2202      	movs	r2, #2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 fb15 	bl	80094aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e80:	4b3e      	ldr	r3, [pc, #248]	; (8006f7c <USBD_CDC_Init+0x1e4>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3324      	adds	r3, #36	; 0x24
 8006e96:	2201      	movs	r2, #1
 8006e98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e9a:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006e9c:	7819      	ldrb	r1, [r3, #0]
 8006e9e:	2340      	movs	r3, #64	; 0x40
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f002 fb01 	bl	80094aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ea8:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 020f 	and.w	r2, r3, #15
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ec4:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <USBD_CDC_Init+0x1ec>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3326      	adds	r3, #38	; 0x26
 8006eda:	2210      	movs	r2, #16
 8006edc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ede:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <USBD_CDC_Init+0x1ec>)
 8006ee0:	7819      	ldrb	r1, [r3, #0]
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 fadf 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <USBD_CDC_Init+0x1ec>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2201      	movs	r2, #1
 8006f04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	33b0      	adds	r3, #176	; 0xb0
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e018      	b.n	8006f72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006f4a:	7819      	ldrb	r1, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 fb96 	bl	8009688 <USBD_LL_PrepareReceive>
 8006f5c:	e008      	b.n	8006f70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f5e:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <USBD_CDC_Init+0x1e8>)
 8006f60:	7819      	ldrb	r1, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fb8c 	bl	8009688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200000bb 	.word	0x200000bb
 8006f80:	200000bc 	.word	0x200000bc
 8006f84:	200000bd 	.word	0x200000bd

08006f88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f94:	4b3a      	ldr	r3, [pc, #232]	; (8007080 <USBD_CDC_DeInit+0xf8>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f002 faab 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fa0:	4b37      	ldr	r3, [pc, #220]	; (8007080 <USBD_CDC_DeInit+0xf8>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fba:	4b32      	ldr	r3, [pc, #200]	; (8007084 <USBD_CDC_DeInit+0xfc>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f002 fa98 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <USBD_CDC_DeInit+0xfc>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fde:	2200      	movs	r2, #0
 8006fe0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fe2:	4b29      	ldr	r3, [pc, #164]	; (8007088 <USBD_CDC_DeInit+0x100>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f002 fa84 	bl	80094f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fee:	4b26      	ldr	r3, [pc, #152]	; (8007088 <USBD_CDC_DeInit+0x100>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	3324      	adds	r3, #36	; 0x24
 8007004:	2200      	movs	r2, #0
 8007006:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007008:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <USBD_CDC_DeInit+0x100>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3326      	adds	r3, #38	; 0x26
 800701e:	2200      	movs	r2, #0
 8007020:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	; 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01f      	beq.n	8007074 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	33b0      	adds	r3, #176	; 0xb0
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32b0      	adds	r2, #176	; 0xb0
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	4618      	mov	r0, r3
 8007058:	f002 fb58 	bl	800970c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32b0      	adds	r2, #176	; 0xb0
 8007066:	2100      	movs	r1, #0
 8007068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200000bb 	.word	0x200000bb
 8007084:	200000bc 	.word	0x200000bc
 8007088:	200000bd 	.word	0x200000bd

0800708c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32b0      	adds	r2, #176	; 0xb0
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e0bf      	b.n	800723c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d050      	beq.n	800716a <USBD_CDC_Setup+0xde>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	f040 80af 	bne.w	800722c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03a      	beq.n	800714c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da1b      	bge.n	8007118 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	33b0      	adds	r3, #176	; 0xb0
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	88d2      	ldrh	r2, [r2, #6]
 80070fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	88db      	ldrh	r3, [r3, #6]
 8007102:	2b07      	cmp	r3, #7
 8007104:	bf28      	it	cs
 8007106:	2307      	movcs	r3, #7
 8007108:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	89fa      	ldrh	r2, [r7, #14]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 fd89 	bl	8008c28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007116:	e090      	b.n	800723a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785a      	ldrb	r2, [r3, #1]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b3f      	cmp	r3, #63	; 0x3f
 8007128:	d803      	bhi.n	8007132 <USBD_CDC_Setup+0xa6>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	e000      	b.n	8007134 <USBD_CDC_Setup+0xa8>
 8007132:	2240      	movs	r2, #64	; 0x40
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800713a:	6939      	ldr	r1, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007142:	461a      	mov	r2, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fd9b 	bl	8008c80 <USBD_CtlPrepareRx>
      break;
 800714a:	e076      	b.n	800723a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	33b0      	adds	r3, #176	; 0xb0
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	7850      	ldrb	r0, [r2, #1]
 8007162:	2200      	movs	r2, #0
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	4798      	blx	r3
      break;
 8007168:	e067      	b.n	800723a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b0b      	cmp	r3, #11
 8007170:	d851      	bhi.n	8007216 <USBD_CDC_Setup+0x18a>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <USBD_CDC_Setup+0xec>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	080071a9 	.word	0x080071a9
 800717c:	08007225 	.word	0x08007225
 8007180:	08007217 	.word	0x08007217
 8007184:	08007217 	.word	0x08007217
 8007188:	08007217 	.word	0x08007217
 800718c:	08007217 	.word	0x08007217
 8007190:	08007217 	.word	0x08007217
 8007194:	08007217 	.word	0x08007217
 8007198:	08007217 	.word	0x08007217
 800719c:	08007217 	.word	0x08007217
 80071a0:	080071d3 	.word	0x080071d3
 80071a4:	080071fd 	.word	0x080071fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d107      	bne.n	80071c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071b4:	f107 030a 	add.w	r3, r7, #10
 80071b8:	2202      	movs	r2, #2
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fd33 	bl	8008c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c2:	e032      	b.n	800722a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fcbd 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	75fb      	strb	r3, [r7, #23]
          break;
 80071d0:	e02b      	b.n	800722a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d107      	bne.n	80071ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071de:	f107 030d 	add.w	r3, r7, #13
 80071e2:	2201      	movs	r2, #1
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fd1e 	bl	8008c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ec:	e01d      	b.n	800722a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fca8 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
          break;
 80071fa:	e016      	b.n	800722a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b03      	cmp	r3, #3
 8007206:	d00f      	beq.n	8007228 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fc9b 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 8007210:	2303      	movs	r3, #3
 8007212:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007214:	e008      	b.n	8007228 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fc94 	bl	8008b46 <USBD_CtlError>
          ret = USBD_FAIL;
 800721e:	2303      	movs	r3, #3
 8007220:	75fb      	strb	r3, [r7, #23]
          break;
 8007222:	e002      	b.n	800722a <USBD_CDC_Setup+0x19e>
          break;
 8007224:	bf00      	nop
 8007226:	e008      	b.n	800723a <USBD_CDC_Setup+0x1ae>
          break;
 8007228:	bf00      	nop
      }
      break;
 800722a:	e006      	b.n	800723a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fc89 	bl	8008b46 <USBD_CtlError>
      ret = USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	75fb      	strb	r3, [r7, #23]
      break;
 8007238:	bf00      	nop
  }

  return (uint8_t)ret;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	; 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	e065      	b.n	800733a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	32b0      	adds	r2, #176	; 0xb0
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3318      	adds	r3, #24
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02f      	beq.n	80072f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	f003 020f 	and.w	r2, r3, #15
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3318      	adds	r3, #24
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	f003 010f 	and.w	r1, r3, #15
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	460b      	mov	r3, r1
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	440b      	add	r3, r1
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4403      	add	r3, r0
 80072c0:	3348      	adds	r3, #72	; 0x48
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d112      	bne.n	80072f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	3318      	adds	r3, #24
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072ea:	78f9      	ldrb	r1, [r7, #3]
 80072ec:	2300      	movs	r3, #0
 80072ee:	2200      	movs	r2, #0
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f002 f9a8 	bl	8009646 <USBD_LL_Transmit>
 80072f6:	e01f      	b.n	8007338 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	33b0      	adds	r3, #176	; 0xb0
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d010      	beq.n	8007338 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	33b0      	adds	r3, #176	; 0xb0
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32b0      	adds	r2, #176	; 0xb0
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	; 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	e01a      	b.n	80073aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 f9a6 	bl	80096ca <USBD_LL_GetRxDataSize>
 800737e:	4602      	mov	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	33b0      	adds	r3, #176	; 0xb0
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073a4:	4611      	mov	r1, r2
 80073a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32b0      	adds	r2, #176	; 0xb0
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e025      	b.n	8007420 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	33b0      	adds	r3, #176	; 0xb0
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <USBD_CDC_EP0_RxReady+0x6c>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073ee:	2bff      	cmp	r3, #255	; 0xff
 80073f0:	d015      	beq.n	800741e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	33b0      	adds	r3, #176	; 0xb0
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800740a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007412:	b292      	uxth	r2, r2
 8007414:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007430:	2182      	movs	r1, #130	; 0x82
 8007432:	4818      	ldr	r0, [pc, #96]	; (8007494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007434:	f000 fd4f 	bl	8007ed6 <USBD_GetEpDesc>
 8007438:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800743a:	2101      	movs	r1, #1
 800743c:	4815      	ldr	r0, [pc, #84]	; (8007494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800743e:	f000 fd4a 	bl	8007ed6 <USBD_GetEpDesc>
 8007442:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007444:	2181      	movs	r1, #129	; 0x81
 8007446:	4813      	ldr	r0, [pc, #76]	; (8007494 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007448:	f000 fd45 	bl	8007ed6 <USBD_GetEpDesc>
 800744c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2210      	movs	r2, #16
 8007458:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2200      	movs	r2, #0
 8007464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007468:	711a      	strb	r2, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747c:	711a      	strb	r2, [r3, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2243      	movs	r2, #67	; 0x43
 8007486:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000078 	.word	0x20000078

08007498 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074a0:	2182      	movs	r1, #130	; 0x82
 80074a2:	4818      	ldr	r0, [pc, #96]	; (8007504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074a4:	f000 fd17 	bl	8007ed6 <USBD_GetEpDesc>
 80074a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074aa:	2101      	movs	r1, #1
 80074ac:	4815      	ldr	r0, [pc, #84]	; (8007504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074ae:	f000 fd12 	bl	8007ed6 <USBD_GetEpDesc>
 80074b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074b4:	2181      	movs	r1, #129	; 0x81
 80074b6:	4813      	ldr	r0, [pc, #76]	; (8007504 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074b8:	f000 fd0d 	bl	8007ed6 <USBD_GetEpDesc>
 80074bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2210      	movs	r2, #16
 80074c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2200      	movs	r2, #0
 80074d4:	711a      	strb	r2, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f042 0202 	orr.w	r2, r2, #2
 80074dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	711a      	strb	r2, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f042 0202 	orr.w	r2, r2, #2
 80074f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2243      	movs	r2, #67	; 0x43
 80074f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f8:	4b02      	ldr	r3, [pc, #8]	; (8007504 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000078 	.word	0x20000078

08007508 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007510:	2182      	movs	r1, #130	; 0x82
 8007512:	4818      	ldr	r0, [pc, #96]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007514:	f000 fcdf 	bl	8007ed6 <USBD_GetEpDesc>
 8007518:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800751a:	2101      	movs	r1, #1
 800751c:	4815      	ldr	r0, [pc, #84]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800751e:	f000 fcda 	bl	8007ed6 <USBD_GetEpDesc>
 8007522:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007524:	2181      	movs	r1, #129	; 0x81
 8007526:	4813      	ldr	r0, [pc, #76]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007528:	f000 fcd5 	bl	8007ed6 <USBD_GetEpDesc>
 800752c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2210      	movs	r2, #16
 8007538:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2200      	movs	r2, #0
 8007544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007548:	711a      	strb	r2, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755c:	711a      	strb	r2, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2243      	movs	r2, #67	; 0x43
 8007566:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000078 	.word	0x20000078

08007578 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	220a      	movs	r2, #10
 8007584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20000034 	.word	0x20000034

08007598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e009      	b.n	80075c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	33b0      	adds	r3, #176	; 0xb0
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	32b0      	adds	r2, #176	; 0xb0
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e008      	b.n	8007604 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	371c      	adds	r7, #28
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	32b0      	adds	r2, #176	; 0xb0
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e004      	b.n	800763e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32b0      	adds	r2, #176	; 0xb0
 800765e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007662:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32b0      	adds	r2, #176	; 0xb0
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800767a:	2303      	movs	r3, #3
 800767c:	e025      	b.n	80076ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11f      	bne.n	80076c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2201      	movs	r2, #1
 800768c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <USBD_CDC_TransmitPacket+0x88>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4403      	add	r3, r0
 80076aa:	3318      	adds	r3, #24
 80076ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <USBD_CDC_TransmitPacket+0x88>)
 80076b0:	7819      	ldrb	r1, [r3, #0]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 ffc1 	bl	8009646 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200000bb 	.word	0x200000bb

080076d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	32b0      	adds	r2, #176	; 0xb0
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32b0      	adds	r2, #176	; 0xb0
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007702:	2303      	movs	r3, #3
 8007704:	e018      	b.n	8007738 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7c1b      	ldrb	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <USBD_CDC_ReceivePacket+0x68>)
 8007710:	7819      	ldrb	r1, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 ffb3 	bl	8009688 <USBD_LL_PrepareReceive>
 8007722:	e008      	b.n	8007736 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <USBD_CDC_ReceivePacket+0x68>)
 8007726:	7819      	ldrb	r1, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800772e:	2340      	movs	r3, #64	; 0x40
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 ffa9 	bl	8009688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	200000bc 	.word	0x200000bc

08007744 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	e01f      	b.n	800779c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f001 fe23 	bl	80093dc <USBD_LL_Init>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

  return ret;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e025      	b.n	8007808 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	; 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00f      	beq.n	80077f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	32ae      	adds	r2, #174	; 0xae
 80077e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	f107 020e 	add.w	r2, r7, #14
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fe2b 	bl	8009474 <USBD_LL_Start>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	4611      	mov	r1, r2
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 f908 	bl	8008ad2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d01a      	beq.n	800791c <USBD_LL_SetupStage+0x72>
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d822      	bhi.n	8007930 <USBD_LL_SetupStage+0x86>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <USBD_LL_SetupStage+0x4a>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d00a      	beq.n	8007908 <USBD_LL_SetupStage+0x5e>
 80078f2:	e01d      	b.n	8007930 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb5f 	bl	8007fc0 <USBD_StdDevReq>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
      break;
 8007906:	e020      	b.n	800794a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fbc7 	bl	80080a4 <USBD_StdItfReq>
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
      break;
 800791a:	e016      	b.n	800794a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc29 	bl	800817c <USBD_StdEPReq>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
      break;
 800792e:	e00c      	b.n	800794a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007936:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800793a:	b2db      	uxtb	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fdf8 	bl	8009534 <USBD_LL_StallEP>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]
      break;
 8007948:	bf00      	nop
  }

  return ret;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	460b      	mov	r3, r1
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d16e      	bne.n	8007a4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800797a:	2b03      	cmp	r3, #3
 800797c:	f040 8098 	bne.w	8007ab0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	429a      	cmp	r2, r3
 800798a:	d913      	bls.n	80079b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	1ad2      	subs	r2, r2, r3
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bf28      	it	cs
 80079a6:	4613      	movcs	r3, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 f984 	bl	8008cba <USBD_CtlContinueRx>
 80079b2:	e07d      	b.n	8007ab0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d014      	beq.n	80079ec <USBD_LL_DataOutStage+0x98>
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d81d      	bhi.n	8007a02 <USBD_LL_DataOutStage+0xae>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <USBD_LL_DataOutStage+0x7c>
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d003      	beq.n	80079d6 <USBD_LL_DataOutStage+0x82>
 80079ce:	e018      	b.n	8007a02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75bb      	strb	r3, [r7, #22]
            break;
 80079d4:	e018      	b.n	8007a08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fa5e 	bl	8007ea2 <USBD_CoreFindIF>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75bb      	strb	r3, [r7, #22]
            break;
 80079ea:	e00d      	b.n	8007a08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fa60 	bl	8007ebc <USBD_CoreFindEP>
 80079fc:	4603      	mov	r3, r0
 80079fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007a00:	e002      	b.n	8007a08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75bb      	strb	r3, [r7, #22]
            break;
 8007a06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d119      	bne.n	8007a42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d113      	bne.n	8007a42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a1a:	7dba      	ldrb	r2, [r7, #22]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00b      	beq.n	8007a42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a2a:	7dba      	ldrb	r2, [r7, #22]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a32:	7dba      	ldrb	r2, [r7, #22]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	32ae      	adds	r2, #174	; 0xae
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f001 f94a 	bl	8008cdc <USBD_CtlSendStatus>
 8007a48:	e032      	b.n	8007ab0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	4619      	mov	r1, r3
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fa31 	bl	8007ebc <USBD_CoreFindEP>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a5e:	7dbb      	ldrb	r3, [r7, #22]
 8007a60:	2bff      	cmp	r3, #255	; 0xff
 8007a62:	d025      	beq.n	8007ab0 <USBD_LL_DataOutStage+0x15c>
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d122      	bne.n	8007ab0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d117      	bne.n	8007aa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a76:	7dba      	ldrb	r2, [r7, #22]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	32ae      	adds	r2, #174	; 0xae
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00f      	beq.n	8007aa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a86:	7dba      	ldrb	r2, [r7, #22]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a8e:	7dba      	ldrb	r2, [r7, #22]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	32ae      	adds	r2, #174	; 0xae
 8007a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	7afa      	ldrb	r2, [r7, #11]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	e000      	b.n	8007ab2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d16f      	bne.n	8007bae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d15a      	bne.n	8007b94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	689a      	ldr	r2, [r3, #8]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d914      	bls.n	8007b14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f001 f8ac 	bl	8008c5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b06:	2300      	movs	r3, #0
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f001 fdbb 	bl	8009688 <USBD_LL_PrepareReceive>
 8007b12:	e03f      	b.n	8007b94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d11c      	bne.n	8007b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d316      	bcc.n	8007b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d20f      	bcs.n	8007b5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f001 f88d 	bl	8008c5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2100      	movs	r1, #0
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f001 fd98 	bl	8009688 <USBD_LL_PrepareReceive>
 8007b58:	e01c      	b.n	8007b94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d10f      	bne.n	8007b86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d009      	beq.n	8007b86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b86:	2180      	movs	r1, #128	; 0x80
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 fcd3 	bl	8009534 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f001 f8b7 	bl	8008d02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d03a      	beq.n	8007c14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fe42 	bl	8007828 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bac:	e032      	b.n	8007c14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f97f 	bl	8007ebc <USBD_CoreFindEP>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	2bff      	cmp	r3, #255	; 0xff
 8007bc6:	d025      	beq.n	8007c14 <USBD_LL_DataInStage+0x15a>
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d122      	bne.n	8007c14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d11c      	bne.n	8007c14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	32ae      	adds	r2, #174	; 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bea:	7dfa      	ldrb	r2, [r7, #23]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bf2:	7dfa      	ldrb	r2, [r7, #23]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	32ae      	adds	r2, #174	; 0xae
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	7afa      	ldrb	r2, [r7, #11]
 8007c00:	4611      	mov	r1, r2
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	4798      	blx	r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c0a:	7dbb      	ldrb	r3, [r7, #22]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	e000      	b.n	8007c16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d014      	beq.n	8007c84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00e      	beq.n	8007c84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6852      	ldr	r2, [r2, #4]
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	4611      	mov	r1, r2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fc0d 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2240      	movs	r2, #64	; 0x40
 8007c9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ca0:	2340      	movs	r3, #64	; 0x40
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2180      	movs	r1, #128	; 0x80
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fbff 	bl	80094aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2240      	movs	r2, #64	; 0x40
 8007cb6:	621a      	str	r2, [r3, #32]

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d106      	bne.n	8007d30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d110      	bne.n	8007d74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32ae      	adds	r2, #174	; 0xae
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e01c      	b.n	8007dda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d115      	bne.n	8007dd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	; 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32ae      	adds	r2, #174	; 0xae
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32ae      	adds	r2, #174	; 0xae
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e01c      	b.n	8007e3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d115      	bne.n	8007e3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	32ae      	adds	r2, #174	; 0xae
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	; 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	4611      	mov	r1, r2
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6852      	ldr	r2, [r2, #4]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	4611      	mov	r1, r2
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ec8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d920      	bls.n	8007f40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f06:	e013      	b.n	8007f30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f08:	f107 030a 	add.w	r3, r7, #10
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6978      	ldr	r0, [r7, #20]
 8007f10:	f000 f81b 	bl	8007f4a <USBD_GetNextDesc>
 8007f14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d108      	bne.n	8007f30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	789b      	ldrb	r3, [r3, #2]
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d008      	beq.n	8007f3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d8e5      	bhi.n	8007f08 <USBD_GetEpDesc+0x32>
 8007f3c:	e000      	b.n	8007f40 <USBD_GetEpDesc+0x6a>
          break;
 8007f3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f40:	693b      	ldr	r3, [r7, #16]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4413      	add	r3, r2
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fa2:	8a3b      	ldrh	r3, [r7, #16]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	b21a      	sxth	r2, r3
 8007fa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdDevReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d857      	bhi.n	800808e <USBD_StdDevReq+0xce>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <USBD_StdDevReq+0x42>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d153      	bne.n	800808e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32ae      	adds	r2, #174	; 0xae
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e04a      	b.n	8008098 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d83b      	bhi.n	8008082 <USBD_StdDevReq+0xc2>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <USBD_StdDevReq+0x50>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008065 	.word	0x08008065
 8008014:	08008079 	.word	0x08008079
 8008018:	08008083 	.word	0x08008083
 800801c:	0800806f 	.word	0x0800806f
 8008020:	08008083 	.word	0x08008083
 8008024:	08008043 	.word	0x08008043
 8008028:	08008039 	.word	0x08008039
 800802c:	08008083 	.word	0x08008083
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa3c 	bl	80084b8 <USBD_GetDescriptor>
          break;
 8008040:	e024      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fba1 	bl	800878c <USBD_SetAddress>
          break;
 800804a:	e01f      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fbe0 	bl	8008814 <USBD_SetConfig>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc83 	bl	8008968 <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fcb4 	bl	80089d4 <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fce3 	bl	8008a3c <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fd07 	bl	8008a8e <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd5e 	bl	8008b46 <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd58 	bl	8008b46 <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d852      	bhi.n	8008168 <USBD_StdItfReq+0xc4>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d14e      	bne.n	8008168 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d840      	bhi.n	800815a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	889b      	ldrh	r3, [r3, #4]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d836      	bhi.n	8008150 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	889b      	ldrh	r3, [r3, #4]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fed9 	bl	8007ea2 <USBD_CoreFindIF>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d01d      	beq.n	8008136 <USBD_StdItfReq+0x92>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11a      	bne.n	8008136 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008100:	7bba      	ldrb	r2, [r7, #14]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	; 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008110:	7bba      	ldrb	r2, [r7, #14]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008118:	7bba      	ldrb	r2, [r7, #14]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32ae      	adds	r2, #174	; 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800812e:	e004      	b.n	800813a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008134:	e001      	b.n	800813a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d110      	bne.n	8008164 <USBD_StdItfReq+0xc0>
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fdc7 	bl	8008cdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800814e:	e009      	b.n	8008164 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fcf7 	bl	8008b46 <USBD_CtlError>
          break;
 8008158:	e004      	b.n	8008164 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fcf2 	bl	8008b46 <USBD_CtlError>
          break;
 8008162:	e000      	b.n	8008166 <USBD_StdItfReq+0xc2>
          break;
 8008164:	bf00      	nop
      }
      break;
 8008166:	e004      	b.n	8008172 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fceb 	bl	8008b46 <USBD_CtlError>
      break;
 8008170:	bf00      	nop
  }

  return ret;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d007      	beq.n	80081ac <USBD_StdEPReq+0x30>
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	f200 817f 	bhi.w	80084a0 <USBD_StdEPReq+0x324>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02a      	beq.n	80081fc <USBD_StdEPReq+0x80>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	f040 817a 	bne.w	80084a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fe83 	bl	8007ebc <USBD_CoreFindEP>
 80081b6:	4603      	mov	r3, r0
 80081b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ba:	7b7b      	ldrb	r3, [r7, #13]
 80081bc:	2bff      	cmp	r3, #255	; 0xff
 80081be:	f000 8174 	beq.w	80084aa <USBD_StdEPReq+0x32e>
 80081c2:	7b7b      	ldrb	r3, [r7, #13]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 8170 	bne.w	80084aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081ca:	7b7a      	ldrb	r2, [r7, #13]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081d2:	7b7a      	ldrb	r2, [r7, #13]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	32ae      	adds	r2, #174	; 0xae
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8163 	beq.w	80084aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081e4:	7b7a      	ldrb	r2, [r7, #13]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32ae      	adds	r2, #174	; 0xae
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081fa:	e156      	b.n	80084aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d008      	beq.n	8008216 <USBD_StdEPReq+0x9a>
 8008204:	2b03      	cmp	r3, #3
 8008206:	f300 8145 	bgt.w	8008494 <USBD_StdEPReq+0x318>
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 809b 	beq.w	8008346 <USBD_StdEPReq+0x1ca>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d03c      	beq.n	800828e <USBD_StdEPReq+0x112>
 8008214:	e13e      	b.n	8008494 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d002      	beq.n	8008228 <USBD_StdEPReq+0xac>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d016      	beq.n	8008254 <USBD_StdEPReq+0xd8>
 8008226:	e02c      	b.n	8008282 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <USBD_StdEPReq+0xce>
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b80      	cmp	r3, #128	; 0x80
 8008232:	d00a      	beq.n	800824a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f97b 	bl	8009534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f977 	bl	8009534 <USBD_LL_StallEP>
 8008246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008248:	e020      	b.n	800828c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc7a 	bl	8008b46 <USBD_CtlError>
              break;
 8008252:	e01b      	b.n	800828c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10e      	bne.n	800827a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b80      	cmp	r3, #128	; 0x80
 8008266:	d008      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88db      	ldrh	r3, [r3, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f95d 	bl	8009534 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd2e 	bl	8008cdc <USBD_CtlSendStatus>

              break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc5e 	bl	8008b46 <USBD_CtlError>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e107      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d002      	beq.n	80082a0 <USBD_StdEPReq+0x124>
 800829a:	2b03      	cmp	r3, #3
 800829c:	d016      	beq.n	80082cc <USBD_StdEPReq+0x150>
 800829e:	e04b      	b.n	8008338 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <USBD_StdEPReq+0x146>
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d00a      	beq.n	80082c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f93f 	bl	8009534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082b6:	2180      	movs	r1, #128	; 0x80
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f93b 	bl	8009534 <USBD_LL_StallEP>
 80082be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e040      	b.n	8008344 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc3e 	bl	8008b46 <USBD_CtlError>
              break;
 80082ca:	e03b      	b.n	8008344 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d136      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f945 	bl	8009572 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fcf7 	bl	8008cdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fde2 	bl	8007ebc <USBD_CoreFindEP>
 80082f8:	4603      	mov	r3, r0
 80082fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082fc:	7b7b      	ldrb	r3, [r7, #13]
 80082fe:	2bff      	cmp	r3, #255	; 0xff
 8008300:	d01f      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
 8008302:	7b7b      	ldrb	r3, [r7, #13]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d11c      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008308:	7b7a      	ldrb	r2, [r7, #13]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008310:	7b7a      	ldrb	r2, [r7, #13]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	; 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008320:	7b7a      	ldrb	r2, [r7, #13]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32ae      	adds	r2, #174	; 0xae
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008336:	e004      	b.n	8008342 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc03 	bl	8008b46 <USBD_CtlError>
              break;
 8008340:	e000      	b.n	8008344 <USBD_StdEPReq+0x1c8>
              break;
 8008342:	bf00      	nop
          }
          break;
 8008344:	e0ab      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d002      	beq.n	8008358 <USBD_StdEPReq+0x1dc>
 8008352:	2b03      	cmp	r3, #3
 8008354:	d032      	beq.n	80083bc <USBD_StdEPReq+0x240>
 8008356:	e097      	b.n	8008488 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <USBD_StdEPReq+0x1f2>
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b80      	cmp	r3, #128	; 0x80
 8008362:	d004      	beq.n	800836e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbed 	bl	8008b46 <USBD_CtlError>
                break;
 800836c:	e091      	b.n	8008492 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800836e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da0b      	bge.n	800838e <USBD_StdEPReq+0x212>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	3310      	adds	r3, #16
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	e00b      	b.n	80083a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4413      	add	r3, r2
 80083a4:	3304      	adds	r3, #4
 80083a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2202      	movs	r2, #2
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc37 	bl	8008c28 <USBD_CtlSendData>
              break;
 80083ba:	e06a      	b.n	8008492 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da11      	bge.n	80083e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d117      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fbb0 	bl	8008b46 <USBD_CtlError>
                  break;
 80083e6:	e054      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb9d 	bl	8008b46 <USBD_CtlError>
                  break;
 800840c:	e041      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0b      	bge.n	800842e <USBD_StdEPReq+0x2b2>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	e00b      	b.n	8008446 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <USBD_StdEPReq+0x2d8>
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b80      	cmp	r3, #128	; 0x80
 8008452:	d103      	bne.n	800845c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e00e      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f8a5 	bl	80095b0 <USBD_LL_IsStallEP>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e002      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2202      	movs	r2, #2
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbd1 	bl	8008c28 <USBD_CtlSendData>
              break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb5b 	bl	8008b46 <USBD_CtlError>
              break;
 8008490:	bf00      	nop
          }
          break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb55 	bl	8008b46 <USBD_CtlError>
          break;
 800849c:	bf00      	nop
      }
      break;
 800849e:	e005      	b.n	80084ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb4f 	bl	8008b46 <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x330>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b06      	cmp	r3, #6
 80084da:	f200 8128 	bhi.w	800872e <USBD_GetDescriptor+0x276>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBD_GetDescriptor+0x2c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008559 	.word	0x08008559
 80084f0:	0800872f 	.word	0x0800872f
 80084f4:	0800872f 	.word	0x0800872f
 80084f8:	080086cf 	.word	0x080086cf
 80084fc:	080086fb 	.word	0x080086fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
      break;
 8008516:	e112      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008528:	f107 0208 	add.w	r2, r7, #8
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	2202      	movs	r2, #2
 8008538:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800853a:	e100      	b.n	800873e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	f107 0208 	add.w	r2, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
      break;
 8008556:	e0f2      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b05      	cmp	r3, #5
 8008560:	f200 80ac 	bhi.w	80086bc <USBD_GetDescriptor+0x204>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <USBD_GetDescriptor+0xb4>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	08008585 	.word	0x08008585
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085ed 	.word	0x080085ed
 8008578:	08008621 	.word	0x08008621
 800857c:	08008655 	.word	0x08008655
 8008580:	08008689 	.word	0x08008689
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e091      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 facb 	bl	8008b46 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e089      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e077      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fab1 	bl	8008b46 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e06f      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e05d      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa97 	bl	8008b46 <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e055      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e043      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa7d 	bl	8008b46 <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e03b      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e029      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa63 	bl	8008b46 <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e021      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e00f      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa49 	bl	8008b46 <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e007      	b.n	80086cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa41 	bl	8008b46 <USBD_CtlError>
          err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ca:	bf00      	nop
      }
      break;
 80086cc:	e037      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	f107 0208 	add.w	r2, r7, #8
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
 80086e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e029      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa2a 	bl	8008b46 <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e021      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10d      	bne.n	800871e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	2207      	movs	r2, #7
 800871a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800871c:	e00f      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa10 	bl	8008b46 <USBD_CtlError>
        err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	e007      	b.n	800873e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fa08 	bl	8008b46 <USBD_CtlError>
      err++;
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	3301      	adds	r3, #1
 800873a:	72fb      	strb	r3, [r7, #11]
      break;
 800873c:	bf00      	nop
  }

  if (err != 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11e      	bne.n	8008782 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d016      	beq.n	800877a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88da      	ldrh	r2, [r3, #6]
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	4293      	cmp	r3, r2
 800875a:	bf28      	it	cs
 800875c:	4613      	movcs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa5d 	bl	8008c28 <USBD_CtlSendData>
 800876e:	e009      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9e7 	bl	8008b46 <USBD_CtlError>
 8008778:	e004      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 faae 	bl	8008cdc <USBD_CtlSendStatus>
 8008780:	e000      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    return;
 8008782:	bf00      	nop
  }
}
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop

0800878c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	889b      	ldrh	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d131      	bne.n	8008802 <USBD_SetAddress+0x76>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d12d      	bne.n	8008802 <USBD_SetAddress+0x76>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b7f      	cmp	r3, #127	; 0x7f
 80087ac:	d829      	bhi.n	8008802 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d104      	bne.n	80087d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9bc 	bl	8008b46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ce:	e01d      	b.n	800880c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ff13 	bl	8009608 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa7a 	bl	8008cdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	e009      	b.n	800880c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008800:	e004      	b.n	800880c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f99e 	bl	8008b46 <USBD_CtlError>
  }
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	4b4e      	ldr	r3, [pc, #312]	; (8008964 <USBD_SetConfig+0x150>)
 800882a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800882c:	4b4d      	ldr	r3, [pc, #308]	; (8008964 <USBD_SetConfig+0x150>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d905      	bls.n	8008840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f985 	bl	8008b46 <USBD_CtlError>
    return USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	e08c      	b.n	800895a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d002      	beq.n	8008852 <USBD_SetConfig+0x3e>
 800884c:	2b03      	cmp	r3, #3
 800884e:	d029      	beq.n	80088a4 <USBD_SetConfig+0x90>
 8008850:	e075      	b.n	800893e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008852:	4b44      	ldr	r3, [pc, #272]	; (8008964 <USBD_SetConfig+0x150>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d020      	beq.n	800889c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800885a:	4b42      	ldr	r3, [pc, #264]	; (8008964 <USBD_SetConfig+0x150>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008864:	4b3f      	ldr	r3, [pc, #252]	; (8008964 <USBD_SetConfig+0x150>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fe ffe7 	bl	800783e <USBD_SetClassConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f962 	bl	8008b46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800888a:	e065      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa25 	bl	8008cdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2203      	movs	r2, #3
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800889a:	e05d      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fa1d 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 80088a2:	e059      	b.n	8008958 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088a4:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d112      	bne.n	80088d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088b4:	4b2b      	ldr	r3, [pc, #172]	; (8008964 <USBD_SetConfig+0x150>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088be:	4b29      	ldr	r3, [pc, #164]	; (8008964 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7fe ffd6 	bl	8007876 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa06 	bl	8008cdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088d0:	e042      	b.n	8008958 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088d2:	4b24      	ldr	r3, [pc, #144]	; (8008964 <USBD_SetConfig+0x150>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d02a      	beq.n	8008936 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7fe ffc4 	bl	8007876 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088ee:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <USBD_SetConfig+0x150>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088f8:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <USBD_SetConfig+0x150>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe ff9d 	bl	800783e <USBD_SetClassConfig>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f918 	bl	8008b46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe ffa9 	bl	8007876 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800892c:	e014      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9d4 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 8008934:	e010      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9d0 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 800893c:	e00c      	b.n	8008958 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f900 	bl	8008b46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <USBD_SetConfig+0x150>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff92 	bl	8007876 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	bf00      	nop
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20009fc8 	.word	0x20009fc8

08008968 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d004      	beq.n	8008984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f8e2 	bl	8008b46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008982:	e023      	b.n	80089cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	dc02      	bgt.n	8008996 <USBD_GetConfig+0x2e>
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc03      	bgt.n	800899c <USBD_GetConfig+0x34>
 8008994:	e015      	b.n	80089c2 <USBD_GetConfig+0x5a>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d00b      	beq.n	80089b2 <USBD_GetConfig+0x4a>
 800899a:	e012      	b.n	80089c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3308      	adds	r3, #8
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f93c 	bl	8008c28 <USBD_CtlSendData>
        break;
 80089b0:	e00c      	b.n	80089cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	2201      	movs	r2, #1
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f934 	bl	8008c28 <USBD_CtlSendData>
        break;
 80089c0:	e004      	b.n	80089cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8be 	bl	8008b46 <USBD_CtlError>
        break;
 80089ca:	bf00      	nop
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d81e      	bhi.n	8008a2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d004      	beq.n	80089fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8a5 	bl	8008b46 <USBD_CtlError>
        break;
 80089fc:	e01a      	b.n	8008a34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f043 0202 	orr.w	r2, r3, #2
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	2202      	movs	r2, #2
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f900 	bl	8008c28 <USBD_CtlSendData>
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f88a 	bl	8008b46 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
  }
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f940 	bl	8008cdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a5c:	e013      	b.n	8008a86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	885b      	ldrh	r3, [r3, #2]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d10b      	bne.n	8008a7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f930 	bl	8008cdc <USBD_CtlSendStatus>
}
 8008a7c:	e003      	b.n	8008a86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f860 	bl	8008b46 <USBD_CtlError>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d80b      	bhi.n	8008abe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10c      	bne.n	8008ac8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f910 	bl	8008cdc <USBD_CtlSendStatus>
      }
      break;
 8008abc:	e004      	b.n	8008ac8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f840 	bl	8008b46 <USBD_CtlError>
      break;
 8008ac6:	e000      	b.n	8008aca <USBD_ClrFeature+0x3c>
      break;
 8008ac8:	bf00      	nop
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fa41 	bl	8007f84 <SWAPBYTE>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fa34 	bl	8007f84 <SWAPBYTE>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fa27 	bl	8007f84 <SWAPBYTE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	80da      	strh	r2, [r3, #6]
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b50:	2180      	movs	r1, #128	; 0x80
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fcee 	bl	8009534 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fcea 	bl	8009534 <USBD_LL_StallEP>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d036      	beq.n	8008bec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b82:	6938      	ldr	r0, [r7, #16]
 8008b84:	f000 f836 	bl	8008bf4 <USBD_GetLen>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	2203      	movs	r2, #3
 8008bb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bb8:	e013      	b.n	8008be2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
    idx++;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	3301      	adds	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e7      	bne.n	8008bba <USBD_GetString+0x52>
 8008bea:	e000      	b.n	8008bee <USBD_GetString+0x86>
    return;
 8008bec:	bf00      	nop
  }
}
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c04:	e005      	b.n	8008c12 <USBD_GetLen+0x1e>
  {
    len++;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f5      	bne.n	8008c06 <USBD_GetLen+0x12>
  }

  return len;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fcf9 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fce8 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2203      	movs	r2, #3
 8008c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fcec 	bl	8009688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fcdb 	bl	8009688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fca7 	bl	8009646 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2205      	movs	r2, #5
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fcb5 	bl	8009688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4912      	ldr	r1, [pc, #72]	; (8008d78 <MX_USB_DEVICE_Init+0x50>)
 8008d30:	4812      	ldr	r0, [pc, #72]	; (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d32:	f7fe fd07 	bl	8007744 <USBD_Init>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d3c:	f7f8 f8c6 	bl	8000ecc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d40:	490f      	ldr	r1, [pc, #60]	; (8008d80 <MX_USB_DEVICE_Init+0x58>)
 8008d42:	480e      	ldr	r0, [pc, #56]	; (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d44:	f7fe fd2e 	bl	80077a4 <USBD_RegisterClass>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d4e:	f7f8 f8bd 	bl	8000ecc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d52:	490c      	ldr	r1, [pc, #48]	; (8008d84 <MX_USB_DEVICE_Init+0x5c>)
 8008d54:	4809      	ldr	r0, [pc, #36]	; (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d56:	f7fe fc1f 	bl	8007598 <USBD_CDC_RegisterInterface>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d60:	f7f8 f8b4 	bl	8000ecc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d64:	4805      	ldr	r0, [pc, #20]	; (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe fd53 	bl	8007810 <USBD_Start>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d70:	f7f8 f8ac 	bl	8000ecc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d74:	bf00      	nop
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	200000d4 	.word	0x200000d4
 8008d7c:	20009fcc 	.word	0x20009fcc
 8008d80:	20000040 	.word	0x20000040
 8008d84:	200000c0 	.word	0x200000c0

08008d88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4905      	ldr	r1, [pc, #20]	; (8008da4 <CDC_Init_FS+0x1c>)
 8008d90:	4805      	ldr	r0, [pc, #20]	; (8008da8 <CDC_Init_FS+0x20>)
 8008d92:	f7fe fc1b 	bl	80075cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d96:	4905      	ldr	r1, [pc, #20]	; (8008dac <CDC_Init_FS+0x24>)
 8008d98:	4803      	ldr	r0, [pc, #12]	; (8008da8 <CDC_Init_FS+0x20>)
 8008d9a:	f7fe fc39 	bl	8007610 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	2000a6a8 	.word	0x2000a6a8
 8008da8:	20009fcc 	.word	0x20009fcc
 8008dac:	2000a2a8 	.word	0x2000a2a8

08008db0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008db4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b23      	cmp	r3, #35	; 0x23
 8008dd4:	d84a      	bhi.n	8008e6c <CDC_Control_FS+0xac>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <CDC_Control_FS+0x1c>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e6d 	.word	0x08008e6d
 8008df4:	08008e6d 	.word	0x08008e6d
 8008df8:	08008e6d 	.word	0x08008e6d
 8008dfc:	08008e6d 	.word	0x08008e6d
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e6d 	.word	0x08008e6d
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008e6d 	.word	0x08008e6d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e6d 	.word	0x08008e6d
 8008e38:	08008e6d 	.word	0x08008e6d
 8008e3c:	08008e6d 	.word	0x08008e6d
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e6d 	.word	0x08008e6d
 8008e50:	08008e6d 	.word	0x08008e6d
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008e6d 	.word	0x08008e6d
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008e6d 	.word	0x08008e6d
 8008e64:	08008e6d 	.word	0x08008e6d
 8008e68:	08008e6d 	.word	0x08008e6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e6c:	bf00      	nop
  }

  return (USBD_OK);
 8008e6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	480f      	ldr	r0, [pc, #60]	; (8008ec8 <CDC_Receive_FS+0x4c>)
 8008e8a:	f7fe fbc1 	bl	8007610 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e8e:	480e      	ldr	r0, [pc, #56]	; (8008ec8 <CDC_Receive_FS+0x4c>)
 8008e90:	f7fe fc22 	bl	80076d8 <USBD_CDC_ReceivePacket>

  	memset (usb_rx_buffer, '\0', 64);  // clear the buffer
 8008e94:	2240      	movs	r2, #64	; 0x40
 8008e96:	2100      	movs	r1, #0
 8008e98:	480c      	ldr	r0, [pc, #48]	; (8008ecc <CDC_Receive_FS+0x50>)
 8008e9a:	f000 fc8d 	bl	80097b8 <memset>
    uint32_t len = (uint32_t)*Len;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]
    memcpy(usb_rx_buffer, Buf, len);  // copy the data to the buffer
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <CDC_Receive_FS+0x50>)
 8008eaa:	f000 fcb9 	bl	8009820 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fc80 	bl	80097b8 <memset>

    flag_usbrx = 1;
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <CDC_Receive_FS+0x54>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008ebe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20009fcc 	.word	0x20009fcc
 8008ecc:	200002cc 	.word	0x200002cc
 8008ed0:	2000030c 	.word	0x2000030c

08008ed4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ee4:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <CDC_Transmit_FS+0x48>)
 8008ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e00b      	b.n	8008f12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008efa:	887b      	ldrh	r3, [r7, #2]
 8008efc:	461a      	mov	r2, r3
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4806      	ldr	r0, [pc, #24]	; (8008f1c <CDC_Transmit_FS+0x48>)
 8008f02:	f7fe fb63 	bl	80075cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f06:	4805      	ldr	r0, [pc, #20]	; (8008f1c <CDC_Transmit_FS+0x48>)
 8008f08:	f7fe fba0 	bl	800764c <USBD_CDC_TransmitPacket>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20009fcc 	.word	0x20009fcc

08008f20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
	...

08008f44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2212      	movs	r2, #18
 8008f54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f56:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	200000f0 	.word	0x200000f0

08008f68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6039      	str	r1, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2204      	movs	r2, #4
 8008f78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000104 	.word	0x20000104

08008f8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4907      	ldr	r1, [pc, #28]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fa2:	4808      	ldr	r0, [pc, #32]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fa4:	f7ff fde0 	bl	8008b68 <USBD_GetString>
 8008fa8:	e004      	b.n	8008fb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4904      	ldr	r1, [pc, #16]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fae:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fb0:	f7ff fdda 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	2000aaa8 	.word	0x2000aaa8
 8008fc4:	0800a0f8 	.word	0x0800a0f8

08008fc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fd8:	4804      	ldr	r0, [pc, #16]	; (8008fec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fda:	f7ff fdc5 	bl	8008b68 <USBD_GetString>
  return USBD_StrDesc;
 8008fde:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	2000aaa8 	.word	0x2000aaa8
 8008fec:	0800a110 	.word	0x0800a110

08008ff0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	221a      	movs	r2, #26
 8009000:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009002:	f000 f843 	bl	800908c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009006:	4b02      	ldr	r3, [pc, #8]	; (8009010 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000108 	.word	0x20000108

08009014 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d105      	bne.n	8009032 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4907      	ldr	r1, [pc, #28]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
 800902a:	4808      	ldr	r0, [pc, #32]	; (800904c <USBD_FS_ConfigStrDescriptor+0x38>)
 800902c:	f7ff fd9c 	bl	8008b68 <USBD_GetString>
 8009030:	e004      	b.n	800903c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4904      	ldr	r1, [pc, #16]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009038:	f7ff fd96 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000aaa8 	.word	0x2000aaa8
 800904c:	0800a124 	.word	0x0800a124

08009050 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d105      	bne.n	800906e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4907      	ldr	r1, [pc, #28]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009066:	4808      	ldr	r0, [pc, #32]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009068:	f7ff fd7e 	bl	8008b68 <USBD_GetString>
 800906c:	e004      	b.n	8009078 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4904      	ldr	r1, [pc, #16]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009072:	4805      	ldr	r0, [pc, #20]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009074:	f7ff fd78 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	2000aaa8 	.word	0x2000aaa8
 8009088:	0800a130 	.word	0x0800a130

0800908c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <Get_SerialNum+0x44>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <Get_SerialNum+0x48>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800909e:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <Get_SerialNum+0x4c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090b2:	2208      	movs	r2, #8
 80090b4:	4909      	ldr	r1, [pc, #36]	; (80090dc <Get_SerialNum+0x50>)
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f814 	bl	80090e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090bc:	2204      	movs	r2, #4
 80090be:	4908      	ldr	r1, [pc, #32]	; (80090e0 <Get_SerialNum+0x54>)
 80090c0:	68b8      	ldr	r0, [r7, #8]
 80090c2:	f000 f80f 	bl	80090e4 <IntToUnicode>
  }
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	1fff7a10 	.word	0x1fff7a10
 80090d4:	1fff7a14 	.word	0x1fff7a14
 80090d8:	1fff7a18 	.word	0x1fff7a18
 80090dc:	2000010a 	.word	0x2000010a
 80090e0:	2000011a 	.word	0x2000011a

080090e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]
 80090fa:	e027      	b.n	800914c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	0f1b      	lsrs	r3, r3, #28
 8009100:	2b09      	cmp	r3, #9
 8009102:	d80b      	bhi.n	800911c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0f1b      	lsrs	r3, r3, #28
 8009108:	b2da      	uxtb	r2, r3
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4619      	mov	r1, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	440b      	add	r3, r1
 8009114:	3230      	adds	r2, #48	; 0x30
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e00a      	b.n	8009132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	b2da      	uxtb	r2, r3
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4619      	mov	r1, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	440b      	add	r3, r1
 800912c:	3237      	adds	r2, #55	; 0x37
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	3301      	adds	r3, #1
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	3301      	adds	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
 800914c:	7dfa      	ldrb	r2, [r7, #23]
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	429a      	cmp	r2, r3
 8009152:	d3d3      	bcc.n	80090fc <IntToUnicode+0x18>
  }
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop
 8009158:	371c      	adds	r7, #28
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
	...

08009164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	605a      	str	r2, [r3, #4]
 8009176:	609a      	str	r2, [r3, #8]
 8009178:	60da      	str	r2, [r3, #12]
 800917a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009184:	d13a      	bne.n	80091fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009186:	2300      	movs	r3, #0
 8009188:	613b      	str	r3, [r7, #16]
 800918a:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 8009190:	f043 0301 	orr.w	r3, r3, #1
 8009194:	6313      	str	r3, [r2, #48]	; 0x30
 8009196:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a8:	2302      	movs	r3, #2
 80091aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b0:	2303      	movs	r3, #3
 80091b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091b4:	230a      	movs	r3, #10
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091b8:	f107 0314 	add.w	r3, r7, #20
 80091bc:	4619      	mov	r1, r3
 80091be:	4812      	ldr	r0, [pc, #72]	; (8009208 <HAL_PCD_MspInit+0xa4>)
 80091c0:	f7f9 fa88 	bl	80026d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	4a0e      	ldr	r2, [pc, #56]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 80091ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ce:	6353      	str	r3, [r2, #52]	; 0x34
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	4a0a      	ldr	r2, [pc, #40]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 80091da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091de:	6453      	str	r3, [r2, #68]	; 0x44
 80091e0:	4b08      	ldr	r3, [pc, #32]	; (8009204 <HAL_PCD_MspInit+0xa0>)
 80091e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091ec:	2200      	movs	r2, #0
 80091ee:	2100      	movs	r1, #0
 80091f0:	2043      	movs	r0, #67	; 0x43
 80091f2:	f7f8 fec2 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091f6:	2043      	movs	r0, #67	; 0x43
 80091f8:	f7f8 fedb 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091fc:	bf00      	nop
 80091fe:	3728      	adds	r7, #40	; 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40023800 	.word	0x40023800
 8009208:	40020000 	.word	0x40020000

0800920c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe fb41 	bl	80078aa <USBD_LL_SetupStage>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	4619      	mov	r1, r3
 800925a:	f7fe fb7b 	bl	8007954 <USBD_LL_DataOutStage>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	334c      	adds	r3, #76	; 0x4c
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	4619      	mov	r1, r3
 800928e:	f7fe fc14 	bl	8007aba <USBD_LL_DataInStage>
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fd48 	bl	8007d3e <USBD_LL_SOF>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d001      	beq.n	80092ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ca:	f7f7 fdff 	bl	8000ecc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fcf2 	bl	8007cc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe fc9a 	bl	8007c1e <USBD_LL_Reset>
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fced 	bl	8007ce2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <HAL_PCD_SuspendCallback+0x48>)
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	4a03      	ldr	r2, [pc, #12]	; (800933c <HAL_PCD_SuspendCallback+0x48>)
 800932e:	f043 0306 	orr.w	r3, r3, #6
 8009332:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	e000ed00 	.word	0xe000ed00

08009340 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe fcdd 	bl	8007d0e <USBD_LL_Resume>
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	4611      	mov	r1, r2
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fd35 	bl	8007de2 <USBD_LL_IsoOUTIncomplete>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fcf1 	bl	8007d7e <USBD_LL_IsoINIncomplete>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fd47 	bl	8007e46 <USBD_LL_DevConnected>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fd44 	bl	8007e5c <USBD_LL_DevDisconnected>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d13c      	bne.n	8009466 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093ec:	4a20      	ldr	r2, [pc, #128]	; (8009470 <USBD_LL_Init+0x94>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a1e      	ldr	r2, [pc, #120]	; (8009470 <USBD_LL_Init+0x94>)
 80093f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093fc:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <USBD_LL_Init+0x94>)
 80093fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009402:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <USBD_LL_Init+0x94>)
 8009406:	2204      	movs	r2, #4
 8009408:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800940a:	4b19      	ldr	r3, [pc, #100]	; (8009470 <USBD_LL_Init+0x94>)
 800940c:	2202      	movs	r2, #2
 800940e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <USBD_LL_Init+0x94>)
 8009412:	2200      	movs	r2, #0
 8009414:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <USBD_LL_Init+0x94>)
 8009418:	2202      	movs	r2, #2
 800941a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800941c:	4b14      	ldr	r3, [pc, #80]	; (8009470 <USBD_LL_Init+0x94>)
 800941e:	2200      	movs	r2, #0
 8009420:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <USBD_LL_Init+0x94>)
 8009424:	2200      	movs	r2, #0
 8009426:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009428:	4b11      	ldr	r3, [pc, #68]	; (8009470 <USBD_LL_Init+0x94>)
 800942a:	2200      	movs	r2, #0
 800942c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800942e:	4b10      	ldr	r3, [pc, #64]	; (8009470 <USBD_LL_Init+0x94>)
 8009430:	2200      	movs	r2, #0
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009434:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <USBD_LL_Init+0x94>)
 8009436:	2200      	movs	r2, #0
 8009438:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800943a:	480d      	ldr	r0, [pc, #52]	; (8009470 <USBD_LL_Init+0x94>)
 800943c:	f7f9 fae7 	bl	8002a0e <HAL_PCD_Init>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009446:	f7f7 fd41 	bl	8000ecc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	4808      	ldr	r0, [pc, #32]	; (8009470 <USBD_LL_Init+0x94>)
 800944e:	f7fa fd3e 	bl	8003ece <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009452:	2240      	movs	r2, #64	; 0x40
 8009454:	2100      	movs	r1, #0
 8009456:	4806      	ldr	r0, [pc, #24]	; (8009470 <USBD_LL_Init+0x94>)
 8009458:	f7fa fcf2 	bl	8003e40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800945c:	2280      	movs	r2, #128	; 0x80
 800945e:	2101      	movs	r1, #1
 8009460:	4803      	ldr	r0, [pc, #12]	; (8009470 <USBD_LL_Init+0x94>)
 8009462:	f7fa fced 	bl	8003e40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	2000aca8 	.word	0x2000aca8

08009474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800948a:	4618      	mov	r0, r3
 800948c:	f7f9 fbdc 	bl	8002c48 <HAL_PCD_Start>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f942 	bl	8009720 <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	4608      	mov	r0, r1
 80094b4:	4611      	mov	r1, r2
 80094b6:	461a      	mov	r2, r3
 80094b8:	4603      	mov	r3, r0
 80094ba:	70fb      	strb	r3, [r7, #3]
 80094bc:	460b      	mov	r3, r1
 80094be:	70bb      	strb	r3, [r7, #2]
 80094c0:	4613      	mov	r3, r2
 80094c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094d2:	78bb      	ldrb	r3, [r7, #2]
 80094d4:	883a      	ldrh	r2, [r7, #0]
 80094d6:	78f9      	ldrb	r1, [r7, #3]
 80094d8:	f7fa f8ad 	bl	8003636 <HAL_PCD_EP_Open>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f91c 	bl	8009720 <USBD_Get_USB_Status>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	4611      	mov	r1, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7fa f8f6 	bl	8003706 <HAL_PCD_EP_Close>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f8fd 	bl	8009720 <USBD_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7fa f9ce 	bl	80038f4 <HAL_PCD_EP_SetStall>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f8de 	bl	8009720 <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7fa fa13 	bl	80039bc <HAL_PCD_EP_ClrStall>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f8bf 	bl	8009720 <USBD_Get_USB_Status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da0b      	bge.n	80095e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	4613      	mov	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	333e      	adds	r3, #62	; 0x3e
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	e00b      	b.n	80095fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ea:	68f9      	ldr	r1, [r7, #12]
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80095fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009622:	78fa      	ldrb	r2, [r7, #3]
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7f9 ffe0 	bl	80035ec <HAL_PCD_SetAddress>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 f874 	bl	8009720 <USBD_Get_USB_Status>
 8009638:	4603      	mov	r3, r0
 800963a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963c:	7bbb      	ldrb	r3, [r7, #14]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
 8009652:	460b      	mov	r3, r1
 8009654:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009664:	7af9      	ldrb	r1, [r7, #11]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f7fa f8f9 	bl	8003860 <HAL_PCD_EP_Transmit>
 800966e:	4603      	mov	r3, r0
 8009670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f853 	bl	8009720 <USBD_Get_USB_Status>
 800967a:	4603      	mov	r3, r0
 800967c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800967e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	607a      	str	r2, [r7, #4]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	460b      	mov	r3, r1
 8009696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096a6:	7af9      	ldrb	r1, [r7, #11]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	f7fa f875 	bl	800379a <HAL_PCD_EP_Receive>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f832 	bl	8009720 <USBD_Get_USB_Status>
 80096bc:	4603      	mov	r3, r0
 80096be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096dc:	78fa      	ldrb	r2, [r7, #3]
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fa f8a5 	bl	8003830 <HAL_PCD_EP_GetRxCount>
 80096e6:	4603      	mov	r3, r0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <USBD_static_malloc+0x18>)
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	2000b1b4 	.word	0x2000b1b4

0800970c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]

}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d817      	bhi.n	8009764 <USBD_Get_USB_Status+0x44>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <USBD_Get_USB_Status+0x1c>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	0800974d 	.word	0x0800974d
 8009740:	08009753 	.word	0x08009753
 8009744:	08009759 	.word	0x08009759
 8009748:	0800975f 	.word	0x0800975f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e00b      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009752:	2303      	movs	r3, #3
 8009754:	73fb      	strb	r3, [r7, #15]
    break;
 8009756:	e008      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009758:	2301      	movs	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
    break;
 800975c:	e005      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800975e:	2303      	movs	r3, #3
 8009760:	73fb      	strb	r3, [r7, #15]
    break;
 8009762:	e002      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	bf00      	nop
  }
  return usb_status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <siprintf>:
 8009778:	b40e      	push	{r1, r2, r3}
 800977a:	b500      	push	{lr}
 800977c:	b09c      	sub	sp, #112	; 0x70
 800977e:	ab1d      	add	r3, sp, #116	; 0x74
 8009780:	9002      	str	r0, [sp, #8]
 8009782:	9006      	str	r0, [sp, #24]
 8009784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <siprintf+0x38>)
 800978a:	9107      	str	r1, [sp, #28]
 800978c:	9104      	str	r1, [sp, #16]
 800978e:	4909      	ldr	r1, [pc, #36]	; (80097b4 <siprintf+0x3c>)
 8009790:	f853 2b04 	ldr.w	r2, [r3], #4
 8009794:	9105      	str	r1, [sp, #20]
 8009796:	6800      	ldr	r0, [r0, #0]
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	a902      	add	r1, sp, #8
 800979c:	f000 f9a0 	bl	8009ae0 <_svfiprintf_r>
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	b01c      	add	sp, #112	; 0x70
 80097a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ac:	b003      	add	sp, #12
 80097ae:	4770      	bx	lr
 80097b0:	20000170 	.word	0x20000170
 80097b4:	ffff0208 	.word	0xffff0208

080097b8 <memset>:
 80097b8:	4402      	add	r2, r0
 80097ba:	4603      	mov	r3, r0
 80097bc:	4293      	cmp	r3, r2
 80097be:	d100      	bne.n	80097c2 <memset+0xa>
 80097c0:	4770      	bx	lr
 80097c2:	f803 1b01 	strb.w	r1, [r3], #1
 80097c6:	e7f9      	b.n	80097bc <memset+0x4>

080097c8 <__errno>:
 80097c8:	4b01      	ldr	r3, [pc, #4]	; (80097d0 <__errno+0x8>)
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000170 	.word	0x20000170

080097d4 <__libc_init_array>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4d0d      	ldr	r5, [pc, #52]	; (800980c <__libc_init_array+0x38>)
 80097d8:	4c0d      	ldr	r4, [pc, #52]	; (8009810 <__libc_init_array+0x3c>)
 80097da:	1b64      	subs	r4, r4, r5
 80097dc:	10a4      	asrs	r4, r4, #2
 80097de:	2600      	movs	r6, #0
 80097e0:	42a6      	cmp	r6, r4
 80097e2:	d109      	bne.n	80097f8 <__libc_init_array+0x24>
 80097e4:	4d0b      	ldr	r5, [pc, #44]	; (8009814 <__libc_init_array+0x40>)
 80097e6:	4c0c      	ldr	r4, [pc, #48]	; (8009818 <__libc_init_array+0x44>)
 80097e8:	f000 fc6a 	bl	800a0c0 <_init>
 80097ec:	1b64      	subs	r4, r4, r5
 80097ee:	10a4      	asrs	r4, r4, #2
 80097f0:	2600      	movs	r6, #0
 80097f2:	42a6      	cmp	r6, r4
 80097f4:	d105      	bne.n	8009802 <__libc_init_array+0x2e>
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fc:	4798      	blx	r3
 80097fe:	3601      	adds	r6, #1
 8009800:	e7ee      	b.n	80097e0 <__libc_init_array+0xc>
 8009802:	f855 3b04 	ldr.w	r3, [r5], #4
 8009806:	4798      	blx	r3
 8009808:	3601      	adds	r6, #1
 800980a:	e7f2      	b.n	80097f2 <__libc_init_array+0x1e>
 800980c:	0800a194 	.word	0x0800a194
 8009810:	0800a194 	.word	0x0800a194
 8009814:	0800a194 	.word	0x0800a194
 8009818:	0800a198 	.word	0x0800a198

0800981c <__retarget_lock_acquire_recursive>:
 800981c:	4770      	bx	lr

0800981e <__retarget_lock_release_recursive>:
 800981e:	4770      	bx	lr

08009820 <memcpy>:
 8009820:	440a      	add	r2, r1
 8009822:	4291      	cmp	r1, r2
 8009824:	f100 33ff 	add.w	r3, r0, #4294967295
 8009828:	d100      	bne.n	800982c <memcpy+0xc>
 800982a:	4770      	bx	lr
 800982c:	b510      	push	{r4, lr}
 800982e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009836:	4291      	cmp	r1, r2
 8009838:	d1f9      	bne.n	800982e <memcpy+0xe>
 800983a:	bd10      	pop	{r4, pc}

0800983c <_free_r>:
 800983c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983e:	2900      	cmp	r1, #0
 8009840:	d044      	beq.n	80098cc <_free_r+0x90>
 8009842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009846:	9001      	str	r0, [sp, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f1a1 0404 	sub.w	r4, r1, #4
 800984e:	bfb8      	it	lt
 8009850:	18e4      	addlt	r4, r4, r3
 8009852:	f000 f8df 	bl	8009a14 <__malloc_lock>
 8009856:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <_free_r+0x94>)
 8009858:	9801      	ldr	r0, [sp, #4]
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	b933      	cbnz	r3, 800986c <_free_r+0x30>
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	6014      	str	r4, [r2, #0]
 8009862:	b003      	add	sp, #12
 8009864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009868:	f000 b8da 	b.w	8009a20 <__malloc_unlock>
 800986c:	42a3      	cmp	r3, r4
 800986e:	d908      	bls.n	8009882 <_free_r+0x46>
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	1961      	adds	r1, r4, r5
 8009874:	428b      	cmp	r3, r1
 8009876:	bf01      	itttt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	1949      	addeq	r1, r1, r5
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	e7ed      	b.n	800985e <_free_r+0x22>
 8009882:	461a      	mov	r2, r3
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	b10b      	cbz	r3, 800988c <_free_r+0x50>
 8009888:	42a3      	cmp	r3, r4
 800988a:	d9fa      	bls.n	8009882 <_free_r+0x46>
 800988c:	6811      	ldr	r1, [r2, #0]
 800988e:	1855      	adds	r5, r2, r1
 8009890:	42a5      	cmp	r5, r4
 8009892:	d10b      	bne.n	80098ac <_free_r+0x70>
 8009894:	6824      	ldr	r4, [r4, #0]
 8009896:	4421      	add	r1, r4
 8009898:	1854      	adds	r4, r2, r1
 800989a:	42a3      	cmp	r3, r4
 800989c:	6011      	str	r1, [r2, #0]
 800989e:	d1e0      	bne.n	8009862 <_free_r+0x26>
 80098a0:	681c      	ldr	r4, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	6053      	str	r3, [r2, #4]
 80098a6:	440c      	add	r4, r1
 80098a8:	6014      	str	r4, [r2, #0]
 80098aa:	e7da      	b.n	8009862 <_free_r+0x26>
 80098ac:	d902      	bls.n	80098b4 <_free_r+0x78>
 80098ae:	230c      	movs	r3, #12
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	e7d6      	b.n	8009862 <_free_r+0x26>
 80098b4:	6825      	ldr	r5, [r4, #0]
 80098b6:	1961      	adds	r1, r4, r5
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf04      	itt	eq
 80098bc:	6819      	ldreq	r1, [r3, #0]
 80098be:	685b      	ldreq	r3, [r3, #4]
 80098c0:	6063      	str	r3, [r4, #4]
 80098c2:	bf04      	itt	eq
 80098c4:	1949      	addeq	r1, r1, r5
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	6054      	str	r4, [r2, #4]
 80098ca:	e7ca      	b.n	8009862 <_free_r+0x26>
 80098cc:	b003      	add	sp, #12
 80098ce:	bd30      	pop	{r4, r5, pc}
 80098d0:	2000b514 	.word	0x2000b514

080098d4 <sbrk_aligned>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4e0e      	ldr	r6, [pc, #56]	; (8009910 <sbrk_aligned+0x3c>)
 80098d8:	460c      	mov	r4, r1
 80098da:	6831      	ldr	r1, [r6, #0]
 80098dc:	4605      	mov	r5, r0
 80098de:	b911      	cbnz	r1, 80098e6 <sbrk_aligned+0x12>
 80098e0:	f000 fba6 	bl	800a030 <_sbrk_r>
 80098e4:	6030      	str	r0, [r6, #0]
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 fba1 	bl	800a030 <_sbrk_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d00a      	beq.n	8009908 <sbrk_aligned+0x34>
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d007      	beq.n	800990c <sbrk_aligned+0x38>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 fb96 	bl	800a030 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d101      	bne.n	800990c <sbrk_aligned+0x38>
 8009908:	f04f 34ff 	mov.w	r4, #4294967295
 800990c:	4620      	mov	r0, r4
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	2000b518 	.word	0x2000b518

08009914 <_malloc_r>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	1ccd      	adds	r5, r1, #3
 800991a:	f025 0503 	bic.w	r5, r5, #3
 800991e:	3508      	adds	r5, #8
 8009920:	2d0c      	cmp	r5, #12
 8009922:	bf38      	it	cc
 8009924:	250c      	movcc	r5, #12
 8009926:	2d00      	cmp	r5, #0
 8009928:	4607      	mov	r7, r0
 800992a:	db01      	blt.n	8009930 <_malloc_r+0x1c>
 800992c:	42a9      	cmp	r1, r5
 800992e:	d905      	bls.n	800993c <_malloc_r+0x28>
 8009930:	230c      	movs	r3, #12
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	2600      	movs	r6, #0
 8009936:	4630      	mov	r0, r6
 8009938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a10 <_malloc_r+0xfc>
 8009940:	f000 f868 	bl	8009a14 <__malloc_lock>
 8009944:	f8d8 3000 	ldr.w	r3, [r8]
 8009948:	461c      	mov	r4, r3
 800994a:	bb5c      	cbnz	r4, 80099a4 <_malloc_r+0x90>
 800994c:	4629      	mov	r1, r5
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff ffc0 	bl	80098d4 <sbrk_aligned>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	4604      	mov	r4, r0
 8009958:	d155      	bne.n	8009a06 <_malloc_r+0xf2>
 800995a:	f8d8 4000 	ldr.w	r4, [r8]
 800995e:	4626      	mov	r6, r4
 8009960:	2e00      	cmp	r6, #0
 8009962:	d145      	bne.n	80099f0 <_malloc_r+0xdc>
 8009964:	2c00      	cmp	r4, #0
 8009966:	d048      	beq.n	80099fa <_malloc_r+0xe6>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	4631      	mov	r1, r6
 800996c:	4638      	mov	r0, r7
 800996e:	eb04 0903 	add.w	r9, r4, r3
 8009972:	f000 fb5d 	bl	800a030 <_sbrk_r>
 8009976:	4581      	cmp	r9, r0
 8009978:	d13f      	bne.n	80099fa <_malloc_r+0xe6>
 800997a:	6821      	ldr	r1, [r4, #0]
 800997c:	1a6d      	subs	r5, r5, r1
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa7 	bl	80098d4 <sbrk_aligned>
 8009986:	3001      	adds	r0, #1
 8009988:	d037      	beq.n	80099fa <_malloc_r+0xe6>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	442b      	add	r3, r5
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d038      	beq.n	8009a0a <_malloc_r+0xf6>
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	42a2      	cmp	r2, r4
 800999c:	d12b      	bne.n	80099f6 <_malloc_r+0xe2>
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	e00f      	b.n	80099c4 <_malloc_r+0xb0>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	1b52      	subs	r2, r2, r5
 80099a8:	d41f      	bmi.n	80099ea <_malloc_r+0xd6>
 80099aa:	2a0b      	cmp	r2, #11
 80099ac:	d917      	bls.n	80099de <_malloc_r+0xca>
 80099ae:	1961      	adds	r1, r4, r5
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	bf18      	it	ne
 80099b6:	6059      	strne	r1, [r3, #4]
 80099b8:	6863      	ldr	r3, [r4, #4]
 80099ba:	bf08      	it	eq
 80099bc:	f8c8 1000 	streq.w	r1, [r8]
 80099c0:	5162      	str	r2, [r4, r5]
 80099c2:	604b      	str	r3, [r1, #4]
 80099c4:	4638      	mov	r0, r7
 80099c6:	f104 060b 	add.w	r6, r4, #11
 80099ca:	f000 f829 	bl	8009a20 <__malloc_unlock>
 80099ce:	f026 0607 	bic.w	r6, r6, #7
 80099d2:	1d23      	adds	r3, r4, #4
 80099d4:	1af2      	subs	r2, r6, r3
 80099d6:	d0ae      	beq.n	8009936 <_malloc_r+0x22>
 80099d8:	1b9b      	subs	r3, r3, r6
 80099da:	50a3      	str	r3, [r4, r2]
 80099dc:	e7ab      	b.n	8009936 <_malloc_r+0x22>
 80099de:	42a3      	cmp	r3, r4
 80099e0:	6862      	ldr	r2, [r4, #4]
 80099e2:	d1dd      	bne.n	80099a0 <_malloc_r+0x8c>
 80099e4:	f8c8 2000 	str.w	r2, [r8]
 80099e8:	e7ec      	b.n	80099c4 <_malloc_r+0xb0>
 80099ea:	4623      	mov	r3, r4
 80099ec:	6864      	ldr	r4, [r4, #4]
 80099ee:	e7ac      	b.n	800994a <_malloc_r+0x36>
 80099f0:	4634      	mov	r4, r6
 80099f2:	6876      	ldr	r6, [r6, #4]
 80099f4:	e7b4      	b.n	8009960 <_malloc_r+0x4c>
 80099f6:	4613      	mov	r3, r2
 80099f8:	e7cc      	b.n	8009994 <_malloc_r+0x80>
 80099fa:	230c      	movs	r3, #12
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	4638      	mov	r0, r7
 8009a00:	f000 f80e 	bl	8009a20 <__malloc_unlock>
 8009a04:	e797      	b.n	8009936 <_malloc_r+0x22>
 8009a06:	6025      	str	r5, [r4, #0]
 8009a08:	e7dc      	b.n	80099c4 <_malloc_r+0xb0>
 8009a0a:	605b      	str	r3, [r3, #4]
 8009a0c:	deff      	udf	#255	; 0xff
 8009a0e:	bf00      	nop
 8009a10:	2000b514 	.word	0x2000b514

08009a14 <__malloc_lock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__malloc_lock+0x8>)
 8009a16:	f7ff bf01 	b.w	800981c <__retarget_lock_acquire_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	2000b510 	.word	0x2000b510

08009a20 <__malloc_unlock>:
 8009a20:	4801      	ldr	r0, [pc, #4]	; (8009a28 <__malloc_unlock+0x8>)
 8009a22:	f7ff befc 	b.w	800981e <__retarget_lock_release_recursive>
 8009a26:	bf00      	nop
 8009a28:	2000b510 	.word	0x2000b510

08009a2c <__ssputs_r>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	461f      	mov	r7, r3
 8009a34:	42be      	cmp	r6, r7
 8009a36:	680b      	ldr	r3, [r1, #0]
 8009a38:	4682      	mov	sl, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	4690      	mov	r8, r2
 8009a3e:	d82c      	bhi.n	8009a9a <__ssputs_r+0x6e>
 8009a40:	898a      	ldrh	r2, [r1, #12]
 8009a42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a46:	d026      	beq.n	8009a96 <__ssputs_r+0x6a>
 8009a48:	6965      	ldr	r5, [r4, #20]
 8009a4a:	6909      	ldr	r1, [r1, #16]
 8009a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a50:	eba3 0901 	sub.w	r9, r3, r1
 8009a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a58:	1c7b      	adds	r3, r7, #1
 8009a5a:	444b      	add	r3, r9
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d527      	bpl.n	8009ab8 <__ssputs_r+0x8c>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff ff53 	bl	8009914 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b360      	cbz	r0, 8009acc <__ssputs_r+0xa0>
 8009a72:	6921      	ldr	r1, [r4, #16]
 8009a74:	464a      	mov	r2, r9
 8009a76:	f7ff fed3 	bl	8009820 <memcpy>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	6126      	str	r6, [r4, #16]
 8009a88:	6165      	str	r5, [r4, #20]
 8009a8a:	444e      	add	r6, r9
 8009a8c:	eba5 0509 	sub.w	r5, r5, r9
 8009a90:	6026      	str	r6, [r4, #0]
 8009a92:	60a5      	str	r5, [r4, #8]
 8009a94:	463e      	mov	r6, r7
 8009a96:	42be      	cmp	r6, r7
 8009a98:	d900      	bls.n	8009a9c <__ssputs_r+0x70>
 8009a9a:	463e      	mov	r6, r7
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	4632      	mov	r2, r6
 8009aa0:	4641      	mov	r1, r8
 8009aa2:	f000 faab 	bl	8009ffc <memmove>
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	1b9b      	subs	r3, r3, r6
 8009aaa:	60a3      	str	r3, [r4, #8]
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	4433      	add	r3, r6
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab8:	462a      	mov	r2, r5
 8009aba:	f000 fac9 	bl	800a050 <_realloc_r>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d1e0      	bne.n	8009a86 <__ssputs_r+0x5a>
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f7ff feb8 	bl	800983c <_free_r>
 8009acc:	230c      	movs	r3, #12
 8009ace:	f8ca 3000 	str.w	r3, [sl]
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	e7e9      	b.n	8009ab4 <__ssputs_r+0x88>

08009ae0 <_svfiprintf_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	898b      	ldrh	r3, [r1, #12]
 8009ae8:	061b      	lsls	r3, r3, #24
 8009aea:	b09d      	sub	sp, #116	; 0x74
 8009aec:	4607      	mov	r7, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	d50e      	bpl.n	8009b12 <_svfiprintf_r+0x32>
 8009af4:	690b      	ldr	r3, [r1, #16]
 8009af6:	b963      	cbnz	r3, 8009b12 <_svfiprintf_r+0x32>
 8009af8:	2140      	movs	r1, #64	; 0x40
 8009afa:	f7ff ff0b 	bl	8009914 <_malloc_r>
 8009afe:	6028      	str	r0, [r5, #0]
 8009b00:	6128      	str	r0, [r5, #16]
 8009b02:	b920      	cbnz	r0, 8009b0e <_svfiprintf_r+0x2e>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e0d0      	b.n	8009cb0 <_svfiprintf_r+0x1d0>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	616b      	str	r3, [r5, #20]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9309      	str	r3, [sp, #36]	; 0x24
 8009b16:	2320      	movs	r3, #32
 8009b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b20:	2330      	movs	r3, #48	; 0x30
 8009b22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009cc8 <_svfiprintf_r+0x1e8>
 8009b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	4623      	mov	r3, r4
 8009b30:	469a      	mov	sl, r3
 8009b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b36:	b10a      	cbz	r2, 8009b3c <_svfiprintf_r+0x5c>
 8009b38:	2a25      	cmp	r2, #37	; 0x25
 8009b3a:	d1f9      	bne.n	8009b30 <_svfiprintf_r+0x50>
 8009b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b40:	d00b      	beq.n	8009b5a <_svfiprintf_r+0x7a>
 8009b42:	465b      	mov	r3, fp
 8009b44:	4622      	mov	r2, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7ff ff6f 	bl	8009a2c <__ssputs_r>
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f000 80a9 	beq.w	8009ca6 <_svfiprintf_r+0x1c6>
 8009b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b56:	445a      	add	r2, fp
 8009b58:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 80a1 	beq.w	8009ca6 <_svfiprintf_r+0x1c6>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b6e:	f10a 0a01 	add.w	sl, sl, #1
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b7c:	4654      	mov	r4, sl
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b84:	4850      	ldr	r0, [pc, #320]	; (8009cc8 <_svfiprintf_r+0x1e8>)
 8009b86:	f7f6 fb33 	bl	80001f0 <memchr>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_svfiprintf_r+0xe6>
 8009b8e:	06d0      	lsls	r0, r2, #27
 8009b90:	bf44      	itt	mi
 8009b92:	2320      	movmi	r3, #32
 8009b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b98:	0711      	lsls	r1, r2, #28
 8009b9a:	bf44      	itt	mi
 8009b9c:	232b      	movmi	r3, #43	; 0x2b
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba8:	d015      	beq.n	8009bd6 <_svfiprintf_r+0xf6>
 8009baa:	9a07      	ldr	r2, [sp, #28]
 8009bac:	4654      	mov	r4, sl
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bba:	3b30      	subs	r3, #48	; 0x30
 8009bbc:	2b09      	cmp	r3, #9
 8009bbe:	d94d      	bls.n	8009c5c <_svfiprintf_r+0x17c>
 8009bc0:	b1b0      	cbz	r0, 8009bf0 <_svfiprintf_r+0x110>
 8009bc2:	9207      	str	r2, [sp, #28]
 8009bc4:	e014      	b.n	8009bf0 <_svfiprintf_r+0x110>
 8009bc6:	eba0 0308 	sub.w	r3, r0, r8
 8009bca:	fa09 f303 	lsl.w	r3, r9, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	46a2      	mov	sl, r4
 8009bd4:	e7d2      	b.n	8009b7c <_svfiprintf_r+0x9c>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9103      	str	r1, [sp, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbb      	ittet	lt
 8009be2:	425b      	neglt	r3, r3
 8009be4:	f042 0202 	orrlt.w	r2, r2, #2
 8009be8:	9307      	strge	r3, [sp, #28]
 8009bea:	9307      	strlt	r3, [sp, #28]
 8009bec:	bfb8      	it	lt
 8009bee:	9204      	strlt	r2, [sp, #16]
 8009bf0:	7823      	ldrb	r3, [r4, #0]
 8009bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf4:	d10c      	bne.n	8009c10 <_svfiprintf_r+0x130>
 8009bf6:	7863      	ldrb	r3, [r4, #1]
 8009bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfa:	d134      	bne.n	8009c66 <_svfiprintf_r+0x186>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9203      	str	r2, [sp, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bfb8      	it	lt
 8009c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c0c:	3402      	adds	r4, #2
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009cd8 <_svfiprintf_r+0x1f8>
 8009c14:	7821      	ldrb	r1, [r4, #0]
 8009c16:	2203      	movs	r2, #3
 8009c18:	4650      	mov	r0, sl
 8009c1a:	f7f6 fae9 	bl	80001f0 <memchr>
 8009c1e:	b138      	cbz	r0, 8009c30 <_svfiprintf_r+0x150>
 8009c20:	9b04      	ldr	r3, [sp, #16]
 8009c22:	eba0 000a 	sub.w	r0, r0, sl
 8009c26:	2240      	movs	r2, #64	; 0x40
 8009c28:	4082      	lsls	r2, r0
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	3401      	adds	r4, #1
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c34:	4825      	ldr	r0, [pc, #148]	; (8009ccc <_svfiprintf_r+0x1ec>)
 8009c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c3a:	2206      	movs	r2, #6
 8009c3c:	f7f6 fad8 	bl	80001f0 <memchr>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d038      	beq.n	8009cb6 <_svfiprintf_r+0x1d6>
 8009c44:	4b22      	ldr	r3, [pc, #136]	; (8009cd0 <_svfiprintf_r+0x1f0>)
 8009c46:	bb1b      	cbnz	r3, 8009c90 <_svfiprintf_r+0x1b0>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	3307      	adds	r3, #7
 8009c4c:	f023 0307 	bic.w	r3, r3, #7
 8009c50:	3308      	adds	r3, #8
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c56:	4433      	add	r3, r6
 8009c58:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5a:	e768      	b.n	8009b2e <_svfiprintf_r+0x4e>
 8009c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c60:	460c      	mov	r4, r1
 8009c62:	2001      	movs	r0, #1
 8009c64:	e7a6      	b.n	8009bb4 <_svfiprintf_r+0xd4>
 8009c66:	2300      	movs	r3, #0
 8009c68:	3401      	adds	r4, #1
 8009c6a:	9305      	str	r3, [sp, #20]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	f04f 0c0a 	mov.w	ip, #10
 8009c72:	4620      	mov	r0, r4
 8009c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c78:	3a30      	subs	r2, #48	; 0x30
 8009c7a:	2a09      	cmp	r2, #9
 8009c7c:	d903      	bls.n	8009c86 <_svfiprintf_r+0x1a6>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0c6      	beq.n	8009c10 <_svfiprintf_r+0x130>
 8009c82:	9105      	str	r1, [sp, #20]
 8009c84:	e7c4      	b.n	8009c10 <_svfiprintf_r+0x130>
 8009c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e7f0      	b.n	8009c72 <_svfiprintf_r+0x192>
 8009c90:	ab03      	add	r3, sp, #12
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	462a      	mov	r2, r5
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <_svfiprintf_r+0x1f4>)
 8009c98:	a904      	add	r1, sp, #16
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f3af 8000 	nop.w
 8009ca0:	1c42      	adds	r2, r0, #1
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	d1d6      	bne.n	8009c54 <_svfiprintf_r+0x174>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	065b      	lsls	r3, r3, #25
 8009caa:	f53f af2d 	bmi.w	8009b08 <_svfiprintf_r+0x28>
 8009cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb0:	b01d      	add	sp, #116	; 0x74
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	ab03      	add	r3, sp, #12
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	462a      	mov	r2, r5
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <_svfiprintf_r+0x1f4>)
 8009cbe:	a904      	add	r1, sp, #16
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	f000 f879 	bl	8009db8 <_printf_i>
 8009cc6:	e7eb      	b.n	8009ca0 <_svfiprintf_r+0x1c0>
 8009cc8:	0800a158 	.word	0x0800a158
 8009ccc:	0800a162 	.word	0x0800a162
 8009cd0:	00000000 	.word	0x00000000
 8009cd4:	08009a2d 	.word	0x08009a2d
 8009cd8:	0800a15e 	.word	0x0800a15e

08009cdc <_printf_common>:
 8009cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	4699      	mov	r9, r3
 8009ce4:	688a      	ldr	r2, [r1, #8]
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cec:	4293      	cmp	r3, r2
 8009cee:	bfb8      	it	lt
 8009cf0:	4613      	movlt	r3, r2
 8009cf2:	6033      	str	r3, [r6, #0]
 8009cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	b10a      	cbz	r2, 8009d02 <_printf_common+0x26>
 8009cfe:	3301      	adds	r3, #1
 8009d00:	6033      	str	r3, [r6, #0]
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	0699      	lsls	r1, r3, #26
 8009d06:	bf42      	ittt	mi
 8009d08:	6833      	ldrmi	r3, [r6, #0]
 8009d0a:	3302      	addmi	r3, #2
 8009d0c:	6033      	strmi	r3, [r6, #0]
 8009d0e:	6825      	ldr	r5, [r4, #0]
 8009d10:	f015 0506 	ands.w	r5, r5, #6
 8009d14:	d106      	bne.n	8009d24 <_printf_common+0x48>
 8009d16:	f104 0a19 	add.w	sl, r4, #25
 8009d1a:	68e3      	ldr	r3, [r4, #12]
 8009d1c:	6832      	ldr	r2, [r6, #0]
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dc26      	bgt.n	8009d72 <_printf_common+0x96>
 8009d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d28:	1e13      	subs	r3, r2, #0
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	bf18      	it	ne
 8009d2e:	2301      	movne	r3, #1
 8009d30:	0692      	lsls	r2, r2, #26
 8009d32:	d42b      	bmi.n	8009d8c <_printf_common+0xb0>
 8009d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d38:	4649      	mov	r1, r9
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d01e      	beq.n	8009d80 <_printf_common+0xa4>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	6922      	ldr	r2, [r4, #16]
 8009d46:	f003 0306 	and.w	r3, r3, #6
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	bf02      	ittt	eq
 8009d4e:	68e5      	ldreq	r5, [r4, #12]
 8009d50:	6833      	ldreq	r3, [r6, #0]
 8009d52:	1aed      	subeq	r5, r5, r3
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	bf0c      	ite	eq
 8009d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d5c:	2500      	movne	r5, #0
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	bfc4      	itt	gt
 8009d62:	1a9b      	subgt	r3, r3, r2
 8009d64:	18ed      	addgt	r5, r5, r3
 8009d66:	2600      	movs	r6, #0
 8009d68:	341a      	adds	r4, #26
 8009d6a:	42b5      	cmp	r5, r6
 8009d6c:	d11a      	bne.n	8009da4 <_printf_common+0xc8>
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e008      	b.n	8009d84 <_printf_common+0xa8>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4652      	mov	r2, sl
 8009d76:	4649      	mov	r1, r9
 8009d78:	4638      	mov	r0, r7
 8009d7a:	47c0      	blx	r8
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d103      	bne.n	8009d88 <_printf_common+0xac>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d88:	3501      	adds	r5, #1
 8009d8a:	e7c6      	b.n	8009d1a <_printf_common+0x3e>
 8009d8c:	18e1      	adds	r1, r4, r3
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	2030      	movs	r0, #48	; 0x30
 8009d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d96:	4422      	add	r2, r4
 8009d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009da0:	3302      	adds	r3, #2
 8009da2:	e7c7      	b.n	8009d34 <_printf_common+0x58>
 8009da4:	2301      	movs	r3, #1
 8009da6:	4622      	mov	r2, r4
 8009da8:	4649      	mov	r1, r9
 8009daa:	4638      	mov	r0, r7
 8009dac:	47c0      	blx	r8
 8009dae:	3001      	adds	r0, #1
 8009db0:	d0e6      	beq.n	8009d80 <_printf_common+0xa4>
 8009db2:	3601      	adds	r6, #1
 8009db4:	e7d9      	b.n	8009d6a <_printf_common+0x8e>
	...

08009db8 <_printf_i>:
 8009db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	7e0f      	ldrb	r7, [r1, #24]
 8009dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009dc0:	2f78      	cmp	r7, #120	; 0x78
 8009dc2:	4691      	mov	r9, r2
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	469a      	mov	sl, r3
 8009dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dce:	d807      	bhi.n	8009de0 <_printf_i+0x28>
 8009dd0:	2f62      	cmp	r7, #98	; 0x62
 8009dd2:	d80a      	bhi.n	8009dea <_printf_i+0x32>
 8009dd4:	2f00      	cmp	r7, #0
 8009dd6:	f000 80d4 	beq.w	8009f82 <_printf_i+0x1ca>
 8009dda:	2f58      	cmp	r7, #88	; 0x58
 8009ddc:	f000 80c0 	beq.w	8009f60 <_printf_i+0x1a8>
 8009de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009de8:	e03a      	b.n	8009e60 <_printf_i+0xa8>
 8009dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dee:	2b15      	cmp	r3, #21
 8009df0:	d8f6      	bhi.n	8009de0 <_printf_i+0x28>
 8009df2:	a101      	add	r1, pc, #4	; (adr r1, 8009df8 <_printf_i+0x40>)
 8009df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e65 	.word	0x08009e65
 8009e00:	08009de1 	.word	0x08009de1
 8009e04:	08009de1 	.word	0x08009de1
 8009e08:	08009de1 	.word	0x08009de1
 8009e0c:	08009de1 	.word	0x08009de1
 8009e10:	08009e65 	.word	0x08009e65
 8009e14:	08009de1 	.word	0x08009de1
 8009e18:	08009de1 	.word	0x08009de1
 8009e1c:	08009de1 	.word	0x08009de1
 8009e20:	08009de1 	.word	0x08009de1
 8009e24:	08009f69 	.word	0x08009f69
 8009e28:	08009e91 	.word	0x08009e91
 8009e2c:	08009f23 	.word	0x08009f23
 8009e30:	08009de1 	.word	0x08009de1
 8009e34:	08009de1 	.word	0x08009de1
 8009e38:	08009f8b 	.word	0x08009f8b
 8009e3c:	08009de1 	.word	0x08009de1
 8009e40:	08009e91 	.word	0x08009e91
 8009e44:	08009de1 	.word	0x08009de1
 8009e48:	08009de1 	.word	0x08009de1
 8009e4c:	08009f2b 	.word	0x08009f2b
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	1d1a      	adds	r2, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	602a      	str	r2, [r5, #0]
 8009e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e60:	2301      	movs	r3, #1
 8009e62:	e09f      	b.n	8009fa4 <_printf_i+0x1ec>
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	682b      	ldr	r3, [r5, #0]
 8009e68:	0607      	lsls	r7, r0, #24
 8009e6a:	f103 0104 	add.w	r1, r3, #4
 8009e6e:	6029      	str	r1, [r5, #0]
 8009e70:	d501      	bpl.n	8009e76 <_printf_i+0xbe>
 8009e72:	681e      	ldr	r6, [r3, #0]
 8009e74:	e003      	b.n	8009e7e <_printf_i+0xc6>
 8009e76:	0646      	lsls	r6, r0, #25
 8009e78:	d5fb      	bpl.n	8009e72 <_printf_i+0xba>
 8009e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	da03      	bge.n	8009e8a <_printf_i+0xd2>
 8009e82:	232d      	movs	r3, #45	; 0x2d
 8009e84:	4276      	negs	r6, r6
 8009e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e8a:	485a      	ldr	r0, [pc, #360]	; (8009ff4 <_printf_i+0x23c>)
 8009e8c:	230a      	movs	r3, #10
 8009e8e:	e012      	b.n	8009eb6 <_printf_i+0xfe>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	6820      	ldr	r0, [r4, #0]
 8009e94:	1d19      	adds	r1, r3, #4
 8009e96:	6029      	str	r1, [r5, #0]
 8009e98:	0605      	lsls	r5, r0, #24
 8009e9a:	d501      	bpl.n	8009ea0 <_printf_i+0xe8>
 8009e9c:	681e      	ldr	r6, [r3, #0]
 8009e9e:	e002      	b.n	8009ea6 <_printf_i+0xee>
 8009ea0:	0641      	lsls	r1, r0, #25
 8009ea2:	d5fb      	bpl.n	8009e9c <_printf_i+0xe4>
 8009ea4:	881e      	ldrh	r6, [r3, #0]
 8009ea6:	4853      	ldr	r0, [pc, #332]	; (8009ff4 <_printf_i+0x23c>)
 8009ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8009eaa:	bf0c      	ite	eq
 8009eac:	2308      	moveq	r3, #8
 8009eae:	230a      	movne	r3, #10
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eb6:	6865      	ldr	r5, [r4, #4]
 8009eb8:	60a5      	str	r5, [r4, #8]
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	bfa2      	ittt	ge
 8009ebe:	6821      	ldrge	r1, [r4, #0]
 8009ec0:	f021 0104 	bicge.w	r1, r1, #4
 8009ec4:	6021      	strge	r1, [r4, #0]
 8009ec6:	b90e      	cbnz	r6, 8009ecc <_printf_i+0x114>
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	d04b      	beq.n	8009f64 <_printf_i+0x1ac>
 8009ecc:	4615      	mov	r5, r2
 8009ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ed6:	5dc7      	ldrb	r7, [r0, r7]
 8009ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009edc:	4637      	mov	r7, r6
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	d9f4      	bls.n	8009ece <_printf_i+0x116>
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d10b      	bne.n	8009f00 <_printf_i+0x148>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	07de      	lsls	r6, r3, #31
 8009eec:	d508      	bpl.n	8009f00 <_printf_i+0x148>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	6861      	ldr	r1, [r4, #4]
 8009ef2:	4299      	cmp	r1, r3
 8009ef4:	bfde      	ittt	le
 8009ef6:	2330      	movle	r3, #48	; 0x30
 8009ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f00:	1b52      	subs	r2, r2, r5
 8009f02:	6122      	str	r2, [r4, #16]
 8009f04:	f8cd a000 	str.w	sl, [sp]
 8009f08:	464b      	mov	r3, r9
 8009f0a:	aa03      	add	r2, sp, #12
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4640      	mov	r0, r8
 8009f10:	f7ff fee4 	bl	8009cdc <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d14a      	bne.n	8009fae <_printf_i+0x1f6>
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	b004      	add	sp, #16
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	4833      	ldr	r0, [pc, #204]	; (8009ff8 <_printf_i+0x240>)
 8009f2c:	2778      	movs	r7, #120	; 0x78
 8009f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6829      	ldr	r1, [r5, #0]
 8009f36:	061f      	lsls	r7, r3, #24
 8009f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f3c:	d402      	bmi.n	8009f44 <_printf_i+0x18c>
 8009f3e:	065f      	lsls	r7, r3, #25
 8009f40:	bf48      	it	mi
 8009f42:	b2b6      	uxthmi	r6, r6
 8009f44:	07df      	lsls	r7, r3, #31
 8009f46:	bf48      	it	mi
 8009f48:	f043 0320 	orrmi.w	r3, r3, #32
 8009f4c:	6029      	str	r1, [r5, #0]
 8009f4e:	bf48      	it	mi
 8009f50:	6023      	strmi	r3, [r4, #0]
 8009f52:	b91e      	cbnz	r6, 8009f5c <_printf_i+0x1a4>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	f023 0320 	bic.w	r3, r3, #32
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	e7a7      	b.n	8009eb0 <_printf_i+0xf8>
 8009f60:	4824      	ldr	r0, [pc, #144]	; (8009ff4 <_printf_i+0x23c>)
 8009f62:	e7e4      	b.n	8009f2e <_printf_i+0x176>
 8009f64:	4615      	mov	r5, r2
 8009f66:	e7bd      	b.n	8009ee4 <_printf_i+0x12c>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	6826      	ldr	r6, [r4, #0]
 8009f6c:	6961      	ldr	r1, [r4, #20]
 8009f6e:	1d18      	adds	r0, r3, #4
 8009f70:	6028      	str	r0, [r5, #0]
 8009f72:	0635      	lsls	r5, r6, #24
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	d501      	bpl.n	8009f7c <_printf_i+0x1c4>
 8009f78:	6019      	str	r1, [r3, #0]
 8009f7a:	e002      	b.n	8009f82 <_printf_i+0x1ca>
 8009f7c:	0670      	lsls	r0, r6, #25
 8009f7e:	d5fb      	bpl.n	8009f78 <_printf_i+0x1c0>
 8009f80:	8019      	strh	r1, [r3, #0]
 8009f82:	2300      	movs	r3, #0
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	4615      	mov	r5, r2
 8009f88:	e7bc      	b.n	8009f04 <_printf_i+0x14c>
 8009f8a:	682b      	ldr	r3, [r5, #0]
 8009f8c:	1d1a      	adds	r2, r3, #4
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	681d      	ldr	r5, [r3, #0]
 8009f92:	6862      	ldr	r2, [r4, #4]
 8009f94:	2100      	movs	r1, #0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f7f6 f92a 	bl	80001f0 <memchr>
 8009f9c:	b108      	cbz	r0, 8009fa2 <_printf_i+0x1ea>
 8009f9e:	1b40      	subs	r0, r0, r5
 8009fa0:	6060      	str	r0, [r4, #4]
 8009fa2:	6863      	ldr	r3, [r4, #4]
 8009fa4:	6123      	str	r3, [r4, #16]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fac:	e7aa      	b.n	8009f04 <_printf_i+0x14c>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	462a      	mov	r2, r5
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	47d0      	blx	sl
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d0ad      	beq.n	8009f18 <_printf_i+0x160>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	079b      	lsls	r3, r3, #30
 8009fc0:	d413      	bmi.n	8009fea <_printf_i+0x232>
 8009fc2:	68e0      	ldr	r0, [r4, #12]
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	bfb8      	it	lt
 8009fca:	4618      	movlt	r0, r3
 8009fcc:	e7a6      	b.n	8009f1c <_printf_i+0x164>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	47d0      	blx	sl
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d09d      	beq.n	8009f18 <_printf_i+0x160>
 8009fdc:	3501      	adds	r5, #1
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	9903      	ldr	r1, [sp, #12]
 8009fe2:	1a5b      	subs	r3, r3, r1
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	dcf2      	bgt.n	8009fce <_printf_i+0x216>
 8009fe8:	e7eb      	b.n	8009fc2 <_printf_i+0x20a>
 8009fea:	2500      	movs	r5, #0
 8009fec:	f104 0619 	add.w	r6, r4, #25
 8009ff0:	e7f5      	b.n	8009fde <_printf_i+0x226>
 8009ff2:	bf00      	nop
 8009ff4:	0800a169 	.word	0x0800a169
 8009ff8:	0800a17a 	.word	0x0800a17a

08009ffc <memmove>:
 8009ffc:	4288      	cmp	r0, r1
 8009ffe:	b510      	push	{r4, lr}
 800a000:	eb01 0402 	add.w	r4, r1, r2
 800a004:	d902      	bls.n	800a00c <memmove+0x10>
 800a006:	4284      	cmp	r4, r0
 800a008:	4623      	mov	r3, r4
 800a00a:	d807      	bhi.n	800a01c <memmove+0x20>
 800a00c:	1e43      	subs	r3, r0, #1
 800a00e:	42a1      	cmp	r1, r4
 800a010:	d008      	beq.n	800a024 <memmove+0x28>
 800a012:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a01a:	e7f8      	b.n	800a00e <memmove+0x12>
 800a01c:	4402      	add	r2, r0
 800a01e:	4601      	mov	r1, r0
 800a020:	428a      	cmp	r2, r1
 800a022:	d100      	bne.n	800a026 <memmove+0x2a>
 800a024:	bd10      	pop	{r4, pc}
 800a026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a02a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a02e:	e7f7      	b.n	800a020 <memmove+0x24>

0800a030 <_sbrk_r>:
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4d06      	ldr	r5, [pc, #24]	; (800a04c <_sbrk_r+0x1c>)
 800a034:	2300      	movs	r3, #0
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	f7f7 f8ae 	bl	800119c <_sbrk>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	d102      	bne.n	800a04a <_sbrk_r+0x1a>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	b103      	cbz	r3, 800a04a <_sbrk_r+0x1a>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	2000b50c 	.word	0x2000b50c

0800a050 <_realloc_r>:
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	4680      	mov	r8, r0
 800a056:	4614      	mov	r4, r2
 800a058:	460e      	mov	r6, r1
 800a05a:	b921      	cbnz	r1, 800a066 <_realloc_r+0x16>
 800a05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a060:	4611      	mov	r1, r2
 800a062:	f7ff bc57 	b.w	8009914 <_malloc_r>
 800a066:	b92a      	cbnz	r2, 800a074 <_realloc_r+0x24>
 800a068:	f7ff fbe8 	bl	800983c <_free_r>
 800a06c:	4625      	mov	r5, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	f000 f81b 	bl	800a0ae <_malloc_usable_size_r>
 800a078:	4284      	cmp	r4, r0
 800a07a:	4607      	mov	r7, r0
 800a07c:	d802      	bhi.n	800a084 <_realloc_r+0x34>
 800a07e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a082:	d812      	bhi.n	800a0aa <_realloc_r+0x5a>
 800a084:	4621      	mov	r1, r4
 800a086:	4640      	mov	r0, r8
 800a088:	f7ff fc44 	bl	8009914 <_malloc_r>
 800a08c:	4605      	mov	r5, r0
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0ed      	beq.n	800a06e <_realloc_r+0x1e>
 800a092:	42bc      	cmp	r4, r7
 800a094:	4622      	mov	r2, r4
 800a096:	4631      	mov	r1, r6
 800a098:	bf28      	it	cs
 800a09a:	463a      	movcs	r2, r7
 800a09c:	f7ff fbc0 	bl	8009820 <memcpy>
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f7ff fbca 	bl	800983c <_free_r>
 800a0a8:	e7e1      	b.n	800a06e <_realloc_r+0x1e>
 800a0aa:	4635      	mov	r5, r6
 800a0ac:	e7df      	b.n	800a06e <_realloc_r+0x1e>

0800a0ae <_malloc_usable_size_r>:
 800a0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b2:	1f18      	subs	r0, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfbc      	itt	lt
 800a0b8:	580b      	ldrlt	r3, [r1, r0]
 800a0ba:	18c0      	addlt	r0, r0, r3
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
