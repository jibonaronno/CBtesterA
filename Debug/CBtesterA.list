
CBtesterA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a54c  0800a54c  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a554  0800a554  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a554  0800a554  0001a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a558  0800a558  0001a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800a55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3ac  20000174  0800a6d0  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b520  0800a6d0  0002b520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015828  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038fa  00000000  00000000  00035a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00039350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea1  00000000  00000000  0003a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a657  00000000  00000000  0003b519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187a4  00000000  00000000  00055b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ae15  00000000  00000000  0006e314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054ec  00000000  00000000  0010912c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a478 	.word	0x0800a478

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800a478 	.word	0x0800a478

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <kalman_filter>:
static int kalman_adc_int = 0;

uint8_t  trip1 = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <kalman_filter+0xe0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <kalman_filter+0xe4>)
 80005ae:	ed93 7a00 	vldr	s14, [r3]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <kalman_filter+0xe8>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <kalman_filter+0xec>)
 80005be:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <kalman_filter+0xec>)
 80005c4:	edd3 6a00 	vldr	s13, [r3]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <kalman_filter+0xec>)
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <kalman_filter+0xf0>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <kalman_filter+0xf4>)
 80005de:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <kalman_filter+0xe0>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <kalman_filter+0xf4>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <kalman_filter+0xf4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <kalman_filter+0xec>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <kalman_filter+0xe4>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <kalman_filter+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <kalman_filter+0xec>)
 800062a:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <kalman_filter+0xf8>)
 8000638:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <kalman_filter+0xe0>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000642:	edd7 7a02 	vldr	s15, [r7, #8]
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <kalman_filter+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000652:	edd7 7a02 	vldr	s15, [r7, #8]
 8000656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20009fb4 	.word	0x20009fb4
 8000670:	20009fac 	.word	0x20009fac
 8000674:	2000001c 	.word	0x2000001c
 8000678:	20000024 	.word	0x20000024
 800067c:	20000020 	.word	0x20000020
 8000680:	20009fb0 	.word	0x20009fb0
 8000684:	20009fa8 	.word	0x20009fa8
 8000688:	20009fb8 	.word	0x20009fb8

0800068c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <HAL_ADC_ConvCpltCallback+0xec>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800069a:	4b38      	ldr	r3, [pc, #224]	; (800077c <HAL_ADC_ConvCpltCallback+0xf0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a36      	ldr	r2, [pc, #216]	; (800077c <HAL_ADC_ConvCpltCallback+0xf0>)
 80006a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0]; //32;
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006ae:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x76>
	{
		if(buf_idx < 2000)
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c0:	d218      	bcs.n	80006f4 <HAL_ADC_ConvCpltCallback+0x68>
		{
			buf1[buf_idx] = ad1_audio;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4931      	ldr	r1, [pc, #196]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			kalman_adc_int = kalman_filter(buf2[buf_idx]);
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff56 	bl	800058c <kalman_filter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 80006e6:	601a      	str	r2, [r3, #0]
			buf_idx++;
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e02e      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 2;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e027      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}
	else if(buf_num == 2)
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d123      	bne.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
	{
		if(buf_idx < 2000)
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000712:	d218      	bcs.n	8000746 <HAL_ADC_ConvCpltCallback+0xba>
		{
			buf2[buf_idx] = ad1_audio;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	491d      	ldr	r1, [pc, #116]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf1[buf_idx]);
			kalman_adc_int = kalman_filter(buf1[buf_idx]);
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <kalman_filter>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000738:	601a      	str	r2, [r3, #0]
			buf_idx++;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e005      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 1;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		}
	}

	if(kalman_adc_int > 320)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800075a:	dd02      	ble.n	8000762 <HAL_ADC_ConvCpltCallback+0xd6>
	{
		trip1 = 1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

		//flag_pulse_out = 1;
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 8000762:	2301      	movs	r3, #1
 8000764:	461a      	mov	r2, r3
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 800076a:	f001 f94f 	bl	8001a0c <HAL_ADC_Start_DMA>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000350 	.word	0x20000350
 800077c:	20000358 	.word	0x20000358
 8000780:	20000344 	.word	0x20000344
 8000784:	2000035c 	.word	0x2000035c
 8000788:	20000018 	.word	0x20000018
 800078c:	20000360 	.word	0x20000360
 8000790:	20000364 	.word	0x20000364
 8000794:	20005184 	.word	0x20005184
 8000798:	20009fb8 	.word	0x20009fb8
 800079c:	20009fbc 	.word	0x20009fbc
 80007a0:	20000190 	.word	0x20000190

080007a4 <HAL_SYSTICK_Callback>:
 * add HAL_SYSTICK_IRQHandler(); to stm32f4xx_it.c -> void SysTick_Handler(void)
 */
#define MAX_PWM_ALL		20
uint32_t _pwm_slope = 0;
void HAL_SYSTICK_Callback(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	if(flag_pulse_out == 1)
 80007a8:	4b91      	ldr	r3, [pc, #580]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	f040 80e4 	bne.w	800097a <HAL_SYSTICK_Callback+0x1d6>
	{
		millis++;
 80007b2:	4b90      	ldr	r3, [pc, #576]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a8e      	ldr	r2, [pc, #568]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007ba:	6013      	str	r3, [r2, #0]

		if(millis > pulses.stone3)
 80007bc:	4b8e      	ldr	r3, [pc, #568]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d240      	bcs.n	800084c <HAL_SYSTICK_Callback+0xa8>
		{
			if(_pulse_count < pulses.duration3)
 80007ca:	4b8b      	ldr	r3, [pc, #556]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	f240 80d0 	bls.w	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count++;
 80007da:	4b88      	ldr	r3, [pc, #544]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a86      	ldr	r2, [pc, #536]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007e2:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration3)
 80007e4:	4b84      	ldr	r3, [pc, #528]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b84      	ldr	r3, [pc, #528]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d914      	bls.n	800081c <HAL_SYSTICK_Callback+0x78>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 80007f2:	4b83      	ldr	r3, [pc, #524]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b13      	cmp	r3, #19
 80007f8:	f200 80bf 	bhi.w	800097a <HAL_SYSTICK_Callback+0x1d6>
					{
						_pwm_slope += (MAX_PWM_ALL / pulses.duration3);
 80007fc:	4b7e      	ldr	r3, [pc, #504]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	2214      	movs	r2, #20
 8000802:	fb92 f3f3 	sdiv	r3, r2, r3
 8000806:	461a      	mov	r2, r3
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4413      	add	r3, r2
 800080e:	4a7c      	ldr	r2, [pc, #496]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000810:	6013      	str	r3, [r2, #0]
						TIM1->CCR3 = _pwm_slope;
 8000812:	4a7c      	ldr	r2, [pc, #496]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000814:	4b7a      	ldr	r3, [pc, #488]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	63d3      	str	r3, [r2, #60]	; 0x3c
 800081a:	e0ae      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
					}
				}
				else
				{
					TIM1->CCR3 = 0;
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 800081e:	2200      	movs	r2, #0
 8000820:	63da      	str	r2, [r3, #60]	; 0x3c

					// END THIS PULSE SEQUENCE
					_pwm_slope = 0;
 8000822:	4b77      	ldr	r3, [pc, #476]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
					flag_pulse_out = 0;
 8000828:	4b71      	ldr	r3, [pc, #452]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
					millis = 0;
 800082e:	4b71      	ldr	r3, [pc, #452]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
					_pulse_count = 0;
 8000834:	4b71      	ldr	r3, [pc, #452]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
					trip1 = 1;
 800083a:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4871      	ldr	r0, [pc, #452]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 8000846:	f002 faa5 	bl	8002d94 <HAL_GPIO_WritePin>
 800084a:	e096      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
					//// TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
				}
			}
		}
		else if(millis > pulses.stone2)
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d248      	bcs.n	80008ec <HAL_SYSTICK_Callback+0x148>
		{
			if(_pulse_count < pulses.duration2)
 800085a:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	4b66      	ldr	r3, [pc, #408]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d926      	bls.n	80008b6 <HAL_SYSTICK_Callback+0x112>
			{
				_pulse_count++;
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a63      	ldr	r2, [pc, #396]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000870:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration2)
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	461a      	mov	r2, r3
 8000878:	4b60      	ldr	r3, [pc, #384]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d914      	bls.n	80008aa <HAL_SYSTICK_Callback+0x106>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b13      	cmp	r3, #19
 8000886:	d816      	bhi.n	80008b6 <HAL_SYSTICK_Callback+0x112>
					{
						_pwm_slope += ((MAX_PWM_ALL / pulses.duration2) + 1);
 8000888:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2214      	movs	r2, #20
 800088e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	3301      	adds	r3, #1
 800089c:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800089e:	6013      	str	r3, [r2, #0]
						TIM1->CCR1 = _pwm_slope;
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6353      	str	r3, [r2, #52]	; 0x34
 80008a8:	e005      	b.n	80008b6 <HAL_SYSTICK_Callback+0x112>
					}
				}
				else
				{
					TIM1->CCR1 = 0;
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
					_pwm_slope = 0;
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
				}
			}

			if(millis == (pulses.stone2 + 100))
 80008b6:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	3364      	adds	r3, #100	; 0x64
 80008bc:	461a      	mov	r2, r3
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d107      	bne.n	80008d6 <HAL_SYSTICK_Callback+0x132>
			{
				trip1 = 1;
 80008c6:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	484e      	ldr	r0, [pc, #312]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 80008d2:	f002 fa5f 	bl	8002d94 <HAL_GPIO_WritePin>
			}

			if(millis == pulses.stone3)
 80008d6:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d14a      	bne.n	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count = 0;
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e046      	b.n	800097a <HAL_SYSTICK_Callback+0x1d6>
//				trip1 = 1;
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
			}
		}
		else if(millis > pulses.stone1)
 80008ec:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d23f      	bcs.n	800097a <HAL_SYSTICK_Callback+0x1d6>
		{
			if(_pulse_count < pulses.duration1)
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	461a      	mov	r2, r3
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d92e      	bls.n	8000966 <HAL_SYSTICK_Callback+0x1c2>
			{
				_pulse_count++;
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000910:	6013      	str	r3, [r2, #0]
				if(_pulse_count < pulses.duration1)
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	461a      	mov	r2, r3
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	d919      	bls.n	8000954 <HAL_SYSTICK_Callback+0x1b0>
				{
					if(_pwm_slope < MAX_PWM_ALL)
 8000920:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b13      	cmp	r3, #19
 8000926:	d80f      	bhi.n	8000948 <HAL_SYSTICK_Callback+0x1a4>
					{
						_pwm_slope += ((MAX_PWM_ALL / pulses.duration1) + 1);
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2214      	movs	r2, #20
 800092e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000932:	461a      	mov	r2, r3
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4413      	add	r3, r2
 800093a:	3301      	adds	r3, #1
 800093c:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800093e:	6013      	str	r3, [r2, #0]
						// TIM1->CCR1 = _pwm_slope; // CCR1 should be trip signal
						TIM1->CCR3 = _pwm_slope; 	// CCR3 should be close signal
 8000940:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000942:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	63d3      	str	r3, [r2, #60]	; 0x3c
					}
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2101      	movs	r1, #1
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <HAL_SYSTICK_Callback+0x268>)
 800094e:	f002 fa21 	bl	8002d94 <HAL_GPIO_WritePin>
 8000952:	e008      	b.n	8000966 <HAL_SYSTICK_Callback+0x1c2>
					//// TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
				}
				else
				{
					//TIM1->CCR1 = 0; 	// CCR1 should be trip signal
					TIM1->CCR3 = 0; 	// CCR3 should be close signal
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 8000956:	2200      	movs	r2, #0
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
					_pwm_slope = 0;
 800095a:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
					trip1 = 1;
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_SYSTICK_Callback+0x264>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
			{
				////TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
				////TEST HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
			}

			if(millis == pulses.stone2)
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	461a      	mov	r2, r3
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d102      	bne.n	800097a <HAL_SYSTICK_Callback+0x1d6>
			{
				_pulse_count = 0;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(flag_pulse_out == 2)
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_SYSTICK_Callback+0x24c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	f040 8105 	bne.w	8000b8e <HAL_SYSTICK_Callback+0x3ea>
		{
			millis++;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 800098c:	6013      	str	r3, [r2, #0]

			if(millis > pulses.stone3)
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	461a      	mov	r2, r3
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_SYSTICK_Callback+0x250>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d251      	bcs.n	8000a40 <HAL_SYSTICK_Callback+0x29c>
			{
				if(_pulse_count < pulses.duration3)
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	f240 80f1 	bls.w	8000b8e <HAL_SYSTICK_Callback+0x3ea>
				{
					_pulse_count++;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009b4:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration3)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_SYSTICK_Callback+0x258>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d925      	bls.n	8000a10 <HAL_SYSTICK_Callback+0x26c>
					{
						if(_pwm_slope < MAX_PWM_ALL)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b13      	cmp	r3, #19
 80009ca:	f200 80e0 	bhi.w	8000b8e <HAL_SYSTICK_Callback+0x3ea>
						{
							_pwm_slope += (MAX_PWM_ALL / pulses.duration3);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_SYSTICK_Callback+0x254>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	2214      	movs	r2, #20
 80009d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009e2:	6013      	str	r3, [r2, #0]
							TIM1->CCR3 = _pwm_slope; // Trip
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SYSTICK_Callback+0x260>)
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_SYSTICK_Callback+0x25c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	63d3      	str	r3, [r2, #60]	; 0x3c
				{
					_pulse_count = 0;
				}
			}
		}
}
 80009ec:	e0cf      	b.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
 80009ee:	bf00      	nop
 80009f0:	20009fa5 	.word	0x20009fa5
 80009f4:	20000354 	.word	0x20000354
 80009f8:	20000000 	.word	0x20000000
 80009fc:	200002c8 	.word	0x200002c8
 8000a00:	20009fc0 	.word	0x20009fc0
 8000a04:	40010000 	.word	0x40010000
 8000a08:	20009fbc 	.word	0x20009fbc
 8000a0c:	40020400 	.word	0x40020400
						TIM1->CCR3 = 0; // Trip
 8000a10:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <HAL_SYSTICK_Callback+0x3f0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
						_pwm_slope = 0;
 8000a16:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
						flag_pulse_out = 0;
 8000a1c:	4b5f      	ldr	r3, [pc, #380]	; (8000b9c <HAL_SYSTICK_Callback+0x3f8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
						millis = 0;
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
						_pulse_count = 0;
 8000a28:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
						trip1 = 1;
 8000a2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ba8 <HAL_SYSTICK_Callback+0x404>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	485c      	ldr	r0, [pc, #368]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000a3a:	f002 f9ab 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8000a3e:	e0a6      	b.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
			else if(millis > pulses.stone2)
 8000a40:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d24d      	bcs.n	8000aea <HAL_SYSTICK_Callback+0x346>
				if(_pulse_count < pulses.duration2)
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d926      	bls.n	8000aaa <HAL_SYSTICK_Callback+0x306>
					_pulse_count++;
 8000a5c:	4b51      	ldr	r3, [pc, #324]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000a64:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration2)
 8000a66:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d914      	bls.n	8000a9e <HAL_SYSTICK_Callback+0x2fa>
						if(_pwm_slope < MAX_PWM_ALL)
 8000a74:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b13      	cmp	r3, #19
 8000a7a:	d816      	bhi.n	8000aaa <HAL_SYSTICK_Callback+0x306>
							_pwm_slope += ((MAX_PWM_ALL / pulses.duration2) + 1);
 8000a7c:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	2214      	movs	r2, #20
 8000a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000a92:	6013      	str	r3, [r2, #0]
							TIM1->CCR1 = _pwm_slope; // Trip
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <HAL_SYSTICK_Callback+0x3f0>)
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6353      	str	r3, [r2, #52]	; 0x34
 8000a9c:	e005      	b.n	8000aaa <HAL_SYSTICK_Callback+0x306>
						TIM1->CCR1 = 0; // Trip Event
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_SYSTICK_Callback+0x3f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
						_pwm_slope = 0;
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
				if(millis == (pulses.stone2 + 100))
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	3364      	adds	r3, #100	; 0x64
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d107      	bne.n	8000aca <HAL_SYSTICK_Callback+0x326>
					trip1 = 1;
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_SYSTICK_Callback+0x404>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //// TEST was PIN0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4839      	ldr	r0, [pc, #228]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000ac6:	f002 f965 	bl	8002d94 <HAL_GPIO_WritePin>
				if(millis == pulses.stone3)
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d15a      	bne.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
					_pulse_count = 0;
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4832      	ldr	r0, [pc, #200]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000ae4:	f002 f956 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8000ae8:	e051      	b.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
			else if(millis > pulses.stone1)
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d24a      	bcs.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
				if(_pulse_count < pulses.duration1)
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d934      	bls.n	8000b70 <HAL_SYSTICK_Callback+0x3cc>
					_pulse_count++;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000b0e:	6013      	str	r3, [r2, #0]
					if(_pulse_count < pulses.duration1)
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d919      	bls.n	8000b52 <HAL_SYSTICK_Callback+0x3ae>
						if(_pwm_slope < MAX_PWM_ALL)
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b13      	cmp	r3, #19
 8000b24:	d80f      	bhi.n	8000b46 <HAL_SYSTICK_Callback+0x3a2>
							_pwm_slope += ((MAX_PWM_ALL / pulses.duration1) + 1);
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2214      	movs	r2, #20
 8000b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000b3c:	6013      	str	r3, [r2, #0]
							TIM1->CCR3 = _pwm_slope; // Close Event
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <HAL_SYSTICK_Callback+0x3f0>)
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	63d3      	str	r3, [r2, #60]	; 0x3c
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000b4c:	f002 f922 	bl	8002d94 <HAL_GPIO_WritePin>
 8000b50:	e013      	b.n	8000b7a <HAL_SYSTICK_Callback+0x3d6>
						TIM1->CCR3 = 0; // Close Event
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_SYSTICK_Callback+0x3f0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	63da      	str	r2, [r3, #60]	; 0x3c
						_pwm_slope = 0;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_SYSTICK_Callback+0x3f4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
						trip1 = 1;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_SYSTICK_Callback+0x404>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2102      	movs	r1, #2
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000b6a:	f002 f913 	bl	8002d94 <HAL_GPIO_WritePin>
 8000b6e:	e004      	b.n	8000b7a <HAL_SYSTICK_Callback+0x3d6>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <HAL_SYSTICK_Callback+0x408>)
 8000b76:	f002 f90d 	bl	8002d94 <HAL_GPIO_WritePin>
				if(millis == pulses.stone2)
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_SYSTICK_Callback+0x40c>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_SYSTICK_Callback+0x3fc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d102      	bne.n	8000b8e <HAL_SYSTICK_Callback+0x3ea>
					_pulse_count = 0;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_SYSTICK_Callback+0x400>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010000 	.word	0x40010000
 8000b98:	20009fc0 	.word	0x20009fc0
 8000b9c:	20009fa5 	.word	0x20009fa5
 8000ba0:	20000354 	.word	0x20000354
 8000ba4:	200002c8 	.word	0x200002c8
 8000ba8:	20009fbc 	.word	0x20009fbc
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <enableTriggerOut>:

void enableTriggerOut(char *buff)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if(buff[0] == '1')
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b31      	cmp	r3, #49	; 0x31
 8000bc2:	d102      	bne.n	8000bca <enableTriggerOut+0x16>
	{
		flag_pulse_out = 1;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <enableTriggerOut+0x40>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
	}

	if(buff[0] == '2')
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b32      	cmp	r3, #50	; 0x32
 8000bd0:	d102      	bne.n	8000bd8 <enableTriggerOut+0x24>
	{
		flag_pulse_out = 2;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <enableTriggerOut+0x40>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	701a      	strb	r2, [r3, #0]
	}

	if(buff[0] == '3')
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b33      	cmp	r3, #51	; 0x33
 8000bde:	d102      	bne.n	8000be6 <enableTriggerOut+0x32>
	{
		flag_send_bufferA = 1;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <enableTriggerOut+0x44>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
	}
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20009fa5 	.word	0x20009fa5
 8000bf8:	20009fa4 	.word	0x20009fa4

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  uint32_t b_shot = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  uint32_t lidxA = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fd13 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f8e3 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 fac5 	bl	80011a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c1a:	f000 faa3 	bl	8001164 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c1e:	f000 f949 	bl	8000eb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c22:	f000 fa53 	bl	80010cc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c26:	f008 fa5b 	bl	80090e0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c2a:	f000 f995 	bl	8000f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	 //// TESTING
  ////HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	4856      	ldr	r0, [pc, #344]	; (8000d8c <main+0x190>)
 8000c34:	f002 f8ae 	bl	8002d94 <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4853      	ldr	r0, [pc, #332]	; (8000d8c <main+0x190>)
 8000c3e:	f002 f8a9 	bl	8002d94 <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2101      	movs	r1, #1
 8000c46:	4852      	ldr	r0, [pc, #328]	; (8000d90 <main+0x194>)
 8000c48:	f002 f8a4 	bl	8002d94 <HAL_GPIO_WritePin>

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4950      	ldr	r1, [pc, #320]	; (8000d94 <main+0x198>)
 8000c52:	4851      	ldr	r0, [pc, #324]	; (8000d98 <main+0x19c>)
 8000c54:	f000 feda 	bl	8001a0c <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8000c58:	4850      	ldr	r0, [pc, #320]	; (8000d9c <main+0x1a0>)
 8000c5a:	f003 ffb1 	bl	8004bc0 <HAL_TIM_Base_Start>

  // <PWM OUTPUT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	484f      	ldr	r0, [pc, #316]	; (8000da0 <main+0x1a4>)
 8000c62:	f004 f861 	bl	8004d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c66:	2104      	movs	r1, #4
 8000c68:	484d      	ldr	r0, [pc, #308]	; (8000da0 <main+0x1a4>)
 8000c6a:	f004 f85d 	bl	8004d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c6e:	2108      	movs	r1, #8
 8000c70:	484b      	ldr	r0, [pc, #300]	; (8000da0 <main+0x1a4>)
 8000c72:	f004 f859 	bl	8004d28 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <main+0x1a8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
  b_shot = HAL_GetTick();
 8000c7c:	f000 fd42 	bl	8001704 <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  HAL_Delay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fd4a 	bl	800171c <HAL_Delay>
  TIM1->CCR1 = 0;
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <main+0x1a8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <main+0x1a8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <main+0x1a8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 1000))
 8000c9a:	f000 fd33 	bl	8001704 <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d959      	bls.n	8000d5e <main+0x162>
	  {
		  a_shot = HAL_GetTick();
 8000caa:	f000 fd2b 	bl	8001704 <HAL_GetTick>
 8000cae:	60f8      	str	r0, [r7, #12]
		  if(adcConversionComplete == 1)
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <main+0x1ac>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d152      	bne.n	8000d5e <main+0x162>
		  {
			  adcConversionComplete = 0;
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <main+0x1ac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  //sprintf(strA1, "A1:%d,Rate:%d,Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
			  sprintf(strA1, "A1:%d,Kalman:%d,Map:%d,Rate:%d\n", ad1_raw[0], kalman_adc_int, ad1_audio, conv_rate); // @suppress("Float formatting support")
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <main+0x198>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <main+0x1b0>)
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <main+0x1b4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <main+0x1b8>)
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	9201      	str	r2, [sp, #4]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4937      	ldr	r1, [pc, #220]	; (8000db8 <main+0x1bc>)
 8000cdc:	4837      	ldr	r0, [pc, #220]	; (8000dbc <main+0x1c0>)
 8000cde:	f008 ff27 	bl	8009b30 <siprintf>

			  conv_rate = 0;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <main+0x1b8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
			  //TIM1->CCR1 = ad1_audio;

			  if(flag_send_bufferA == 1)
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <main+0x1c4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d136      	bne.n	8000d5e <main+0x162>
			  {
				  flag_send_bufferA = 0;
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <main+0x1c4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
				  for(lidxA=0;lidxA<128;lidxA++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	e02d      	b.n	8000d58 <main+0x15c>
				  {
					  if(buf_num == 2)
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <main+0x1c8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d10d      	bne.n	8000d20 <main+0x124>
					  {
						  sprintf(strA1, "%d,%d\n", buf1[lidxA], buf1[lidxA + 50]);
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <main+0x1cc>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3332      	adds	r3, #50	; 0x32
 8000d10:	492d      	ldr	r1, [pc, #180]	; (8000dc8 <main+0x1cc>)
 8000d12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d16:	492d      	ldr	r1, [pc, #180]	; (8000dcc <main+0x1d0>)
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <main+0x1c0>)
 8000d1a:	f008 ff09 	bl	8009b30 <siprintf>
 8000d1e:	e00c      	b.n	8000d3a <main+0x13e>
					  }
					  else
					  {
						  sprintf(strA1, "%d,%d\n", buf2[lidxA],buf2[lidxA+100]);
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <main+0x1d4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3364      	adds	r3, #100	; 0x64
 8000d2c:	4928      	ldr	r1, [pc, #160]	; (8000dd0 <main+0x1d4>)
 8000d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d32:	4926      	ldr	r1, [pc, #152]	; (8000dcc <main+0x1d0>)
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <main+0x1c0>)
 8000d36:	f008 fefb 	bl	8009b30 <siprintf>
					  }
					  CDC_Transmit_FS(strA1, strlen(strA1));
 8000d3a:	4820      	ldr	r0, [pc, #128]	; (8000dbc <main+0x1c0>)
 8000d3c:	f7ff fa50 	bl	80001e0 <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4619      	mov	r1, r3
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <main+0x1c0>)
 8000d48:	f008 faa0 	bl	800928c <CDC_Transmit_FS>
					  HAL_Delay(20);
 8000d4c:	2014      	movs	r0, #20
 8000d4e:	f000 fce5 	bl	800171c <HAL_Delay>
				  for(lidxA=0;lidxA<128;lidxA++)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d5c:	d9ce      	bls.n	8000cfc <main+0x100>
		  }

		  //// CDC_Transmit_FS(".", 1);
	  }

	  if(HAL_GetTick() > (b_shot + 3000))
 8000d5e:	f000 fcd1 	bl	8001704 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d902      	bls.n	8000d74 <main+0x178>
	  {
		  b_shot = HAL_GetTick();
 8000d6e:	f000 fcc9 	bl	8001704 <HAL_GetTick>
 8000d72:	60b8      	str	r0, [r7, #8]

		  //ad1_audio = ad1_raw[0] / 32;
		  //TIM1->CCR1 = ad1_audio;
	  }

	  if(flag_usbrx == 1)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <main+0x1d8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d18d      	bne.n	8000c9a <main+0x9e>
	  {
		  // CDC_Transmit_FS(usb_rx_buffer, strlen(usb_rx_buffer));
		  flag_usbrx = 0;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <main+0x1d8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		  enableTriggerOut(usb_rx_buffer);
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <main+0x1dc>)
 8000d86:	f7ff ff15 	bl	8000bb4 <enableTriggerOut>
	  if(HAL_GetTick() > (a_shot + 1000))
 8000d8a:	e786      	b.n	8000c9a <main+0x9e>
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020400 	.word	0x40020400
 8000d94:	20000344 	.word	0x20000344
 8000d98:	20000190 	.word	0x20000190
 8000d9c:	20000280 	.word	0x20000280
 8000da0:	20000238 	.word	0x20000238
 8000da4:	40010000 	.word	0x40010000
 8000da8:	20000350 	.word	0x20000350
 8000dac:	20009fb8 	.word	0x20009fb8
 8000db0:	2000035c 	.word	0x2000035c
 8000db4:	20000358 	.word	0x20000358
 8000db8:	0800a490 	.word	0x0800a490
 8000dbc:	20000310 	.word	0x20000310
 8000dc0:	20009fa4 	.word	0x20009fa4
 8000dc4:	20000018 	.word	0x20000018
 8000dc8:	20000364 	.word	0x20000364
 8000dcc:	0800a4b0 	.word	0x0800a4b0
 8000dd0:	20005184 	.word	0x20005184
 8000dd4:	2000030c 	.word	0x2000030c
 8000dd8:	200002cc 	.word	0x200002cc

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f008 fec0 	bl	8009b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <SystemClock_Config+0xd0>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a28      	ldr	r2, [pc, #160]	; (8000eac <SystemClock_Config+0xd0>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <SystemClock_Config+0xd0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e28:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <SystemClock_Config+0xd4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e50:	2319      	movs	r3, #25
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fa2a 	bl	80042c0 <HAL_RCC_OscConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e72:	f000 fa07 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e76:	230f      	movs	r3, #15
 8000e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2102      	movs	r1, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fc8c 	bl	80047b0 <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e9e:	f000 f9f1 	bl	8001284 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3750      	adds	r7, #80	; 0x50
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ec8:	4a22      	ldr	r2, [pc, #136]	; (8000f54 <MX_ADC1_Init+0xa0>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ece:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ed2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000ef8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f1a:	f000 fc23 	bl	8001764 <HAL_ADC_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f24:	f000 f9ae 	bl	8001284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_ADC1_Init+0x9c>)
 8000f3a:	f000 fe75 	bl	8001c28 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f44:	f000 f99e 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000190 	.word	0x20000190
 8000f54:	40012000 	.word	0x40012000

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 fded 	bl	8009b70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f96:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000f98:	4a4b      	ldr	r2, [pc, #300]	; (80010c8 <MX_TIM1_Init+0x170>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32;
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000faa:	2220      	movs	r2, #32
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc0:	4840      	ldr	r0, [pc, #256]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fc2:	f003 fdad 	bl	8004b20 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fcc:	f000 f95a 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4839      	ldr	r0, [pc, #228]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fde:	f004 f815 	bl	800500c <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f000 f94c 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fec:	4835      	ldr	r0, [pc, #212]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8000fee:	f003 fe41 	bl	8004c74 <HAL_TIM_PWM_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff8:	f000 f944 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	4619      	mov	r1, r3
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <MX_TIM1_Init+0x16c>)
 800100c:	f004 fb92 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001016:	f000 f935 	bl	8001284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	; 0x60
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 8;
 800101e:	2308      	movs	r3, #8
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4821      	ldr	r0, [pc, #132]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8001040:	f003 ff22 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800104a:	f000 f91b 	bl	8001284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8001058:	f003 ff16 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001062:	f000 f90f 	bl	8001284 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	2208      	movs	r2, #8
 8001070:	4619      	mov	r1, r3
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM1_Init+0x16c>)
 8001074:	f003 ff08 	bl	8004e88 <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800107e:	f000 f901 	bl	8001284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM1_Init+0x16c>)
 80010a6:	f004 fbb3 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80010b0:	f000 f8e8 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM1_Init+0x16c>)
 80010b6:	f000 f9c9 	bl	800144c <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3758      	adds	r7, #88	; 0x58
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000238 	.word	0x20000238
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_TIM2_Init+0x94>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_TIM2_Init+0x94>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_TIM2_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_TIM2_Init+0x94>)
 80010fe:	2232      	movs	r2, #50	; 0x32
 8001100:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_TIM2_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_TIM2_Init+0x94>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_TIM2_Init+0x94>)
 8001110:	f003 fd06 	bl	8004b20 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 f8b3 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_TIM2_Init+0x94>)
 800112c:	f003 ff6e 	bl	800500c <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 f8a5 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800113a:	2320      	movs	r3, #32
 800113c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_TIM2_Init+0x94>)
 8001148:	f004 faf4 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001152:	f000 f897 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000280 	.word	0x20000280

08001164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_DMA_Init+0x3c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <MX_DMA_Init+0x3c>)
 8001174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_DMA_Init+0x3c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2038      	movs	r0, #56	; 0x38
 800118c:	f001 f8d1 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001190:	2038      	movs	r0, #56	; 0x38
 8001192:	f001 f8ea 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a26      	ldr	r2, [pc, #152]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_GPIO_Init+0xd4>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_GPIO_Init+0xd4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <MX_GPIO_Init+0xd8>)
 8001214:	f001 fdbe 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	4817      	ldr	r0, [pc, #92]	; (800127c <MX_GPIO_Init+0xd8>)
 800121e:	f001 fdb9 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2101      	movs	r1, #1
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <MX_GPIO_Init+0xdc>)
 8001228:	f001 fdb4 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2106      	movs	r1, #6
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_GPIO_Init+0xdc>)
 8001232:	f001 fdaf 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001236:	23c0      	movs	r3, #192	; 0xc0
 8001238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_GPIO_Init+0xd8>)
 800124e:	f001 fc1d 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001252:	2307      	movs	r3, #7
 8001254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_GPIO_Init+0xdc>)
 800126a:	f001 fc0f 	bl	8002a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_MspInit+0x4c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x4c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a33      	ldr	r2, [pc, #204]	; (80013cc <HAL_ADC_MspInit+0xec>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d15f      	bne.n	80013c2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_ADC_MspInit+0xf0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800133a:	2302      	movs	r3, #2
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <HAL_ADC_MspInit+0xf4>)
 800134e:	f001 fb9d 	bl	8002a8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <HAL_ADC_MspInit+0xfc>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001370:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001396:	4810      	ldr	r0, [pc, #64]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 8001398:	f001 f808 	bl	80023ac <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013a2:	f7ff ff6f 	bl	8001284 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_ADC_MspInit+0xf8>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2012      	movs	r0, #18
 80013b8:	f000 ffbb 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013bc:	2012      	movs	r0, #18
 80013be:	f000 ffd4 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	200001d8 	.word	0x200001d8
 80013dc:	40026410 	.word	0x40026410

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_TIM_Base_MspInit+0x64>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800140e:	e012      	b.n	8001436 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d10d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_TIM_Base_MspInit+0x68>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_TIM_MspPostInit+0x68>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11e      	bne.n	80014ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_TIM_MspPostInit+0x6c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_TIM_MspPostInit+0x6c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800148a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800148e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_TIM_MspPostInit+0x70>)
 80014a8:	f001 faf0 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <NMI_Handler+0x4>

080014c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler+0x4>

080014d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <UsageFault_Handler+0x4>

080014de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f000 f8e6 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001510:	f000 ff45 	bl	800239e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <ADC_IRQHandler+0x10>)
 800151e:	f000 f964 	bl	80017ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000190 	.word	0x20000190

0800152c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA2_Stream0_IRQHandler+0x10>)
 8001532:	f001 f841 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200001d8 	.word	0x200001d8

08001540 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <OTG_FS_IRQHandler+0x10>)
 8001546:	f001 fd8e 	bl	8003066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000acac 	.word	0x2000acac

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f008 fafc 	bl	8009b80 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20010000 	.word	0x20010000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20009fc4 	.word	0x20009fc4
 80015bc:	2000b520 	.word	0x2000b520

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd7 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f008 fabb 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff faf1 	bl	8000bfc <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001628:	0800a55c 	.word	0x0800a55c
  ldr r2, =_sbss
 800162c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001630:	2000b520 	.word	0x2000b520

08001634 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <DMA1_Stream0_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fe5b 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fe10 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fe73 	bl	8002386 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 fe3b 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000028 	.word	0x20000028
 80016d4:	20000030 	.word	0x20000030
 80016d8:	2000002c 	.word	0x2000002c

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000030 	.word	0x20000030
 8001700:	20009fc8 	.word	0x20009fc8

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20009fc8 	.word	0x20009fc8

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000030 	.word	0x20000030

08001764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e033      	b.n	80017e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fdac 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017aa:	f023 0302 	bic.w	r3, r3, #2
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fb58 	bl	8001e6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f023 0303 	bic.w	r3, r3, #3
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d049      	beq.n	80018b4 <HAL_ADC_IRQHandler+0xca>
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d046      	beq.n	80018b4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d12b      	bne.n	80018a4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001850:	2b00      	cmp	r3, #0
 8001852:	d127      	bne.n	80018a4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800186c:	2b00      	cmp	r3, #0
 800186e:	d119      	bne.n	80018a4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0220 	bic.w	r2, r2, #32
 800187e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7fe fef1 	bl	800068c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f06f 0212 	mvn.w	r2, #18
 80018b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d057      	beq.n	800197a <HAL_ADC_IRQHandler+0x190>
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d054      	beq.n	800197a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d139      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800190e:	2b00      	cmp	r3, #0
 8001910:	d12b      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d124      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11d      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001944:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fbfc 	bl	8002168 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 020c 	mvn.w	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x1d6>
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d014      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10d      	bne.n	80019c0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f925 	bl	8001c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f06f 0201 	mvn.w	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d015      	beq.n	8001a02 <HAL_ADC_IRQHandler+0x218>
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f043 0202 	orr.w	r2, r3, #2
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0220 	mvn.w	r2, #32
 80019f0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f90e 	bl	8001c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0220 	mvn.w	r2, #32
 8001a00:	601a      	str	r2, [r3, #0]
  }
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Start_DMA+0x1e>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0ce      	b.n	8001bc8 <HAL_ADC_Start_DMA+0x1bc>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d018      	beq.n	8001a72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a50:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <HAL_ADC_Start_DMA+0x1c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5f      	ldr	r2, [pc, #380]	; (8001bd4 <HAL_ADC_Start_DMA+0x1c8>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9a      	lsrs	r2, r3, #18
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a80:	d107      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 8086 	bne.w	8001bae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001acc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae0:	d106      	bne.n	8001af0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f023 0206 	bic.w	r2, r3, #6
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
 8001aee:	e002      	b.n	8001af6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_ADC_Start_DMA+0x1cc>)
 8001b00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <HAL_ADC_Start_DMA+0x1d0>)
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_ADC_Start_DMA+0x1d4>)
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_ADC_Start_DMA+0x1d8>)
 8001b18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	334c      	adds	r3, #76	; 0x4c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f000 fcd8 	bl	8002508 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10f      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d129      	bne.n	8001bc6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e020      	b.n	8001bc6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_ADC_Start_DMA+0x1dc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11b      	bne.n	8001bc6 <HAL_ADC_Start_DMA+0x1ba>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d114      	bne.n	8001bc6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00b      	b.n	8001bc6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0210 	orr.w	r2, r3, #16
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000028 	.word	0x20000028
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	40012300 	.word	0x40012300
 8001bdc:	08002065 	.word	0x08002065
 8001be0:	0800211f 	.word	0x0800211f
 8001be4:	0800213b 	.word	0x0800213b
 8001be8:	40012000 	.word	0x40012000

08001bec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1c>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e105      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x228>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	d925      	bls.n	8001ca0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68d9      	ldr	r1, [r3, #12]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	3b1e      	subs	r3, #30
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4403      	add	r3, r0
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	409a      	lsls	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	e022      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4403      	add	r3, r0
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d824      	bhi.n	8001d38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b05      	subs	r3, #5
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b05      	subs	r3, #5
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
 8001d36:	e04c      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d824      	bhi.n	8001d8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b23      	subs	r3, #35	; 0x23
 8001d52:	221f      	movs	r2, #31
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b23      	subs	r3, #35	; 0x23
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
 8001d88:	e023      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b41      	subs	r3, #65	; 0x41
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b41      	subs	r3, #65	; 0x41
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_ADC_ConfigChannel+0x234>)
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_ADC_ConfigChannel+0x238>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1cc>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b12      	cmp	r3, #18
 8001de6:	d105      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_ADC_ConfigChannel+0x238>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d123      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x21e>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d003      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x1e6>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b11      	cmp	r3, #17
 8001e0c:	d11b      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d111      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_ADC_ConfigChannel+0x23c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a10      	ldr	r2, [pc, #64]	; (8001e68 <HAL_ADC_ConfigChannel+0x240>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0c9a      	lsrs	r2, r3, #18
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40012300 	.word	0x40012300
 8001e60:	40012000 	.word	0x40012000
 8001e64:	20000028 	.word	0x20000028
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <ADC_Init+0x1f0>)
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <ADC_Init+0x1f4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00f      	b.n	8001f6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0202 	bic.w	r2, r2, #2
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7e1b      	ldrb	r3, [r3, #24]
 8001f84:	005a      	lsls	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	035a      	lsls	r2, r3, #13
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e007      	b.n	8001fe0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	051a      	lsls	r2, r3, #20
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002022:	025a      	lsls	r2, r3, #9
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	029a      	lsls	r2, r3, #10
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	0f000001 	.word	0x0f000001

08002064 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800207a:	2b00      	cmp	r3, #0
 800207c:	d13c      	bne.n	80020f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d12b      	bne.n	80020f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d127      	bne.n	80020f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d119      	bne.n	80020f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0220 	bic.w	r2, r2, #32
 80020ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7fe facb 	bl	800068c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020f6:	e00e      	b.n	8002116 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff fd85 	bl	8001c14 <HAL_ADC_ErrorCallback>
}
 800210a:	e004      	b.n	8002116 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fd5d 	bl	8001bec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0204 	orr.w	r2, r3, #4
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff fd5a 	bl	8001c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80023a2:	f7fe f9ff 	bl	80007a4 <HAL_SYSTICK_Callback>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff f9a4 	bl	8001704 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e099      	b.n	80024fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e8:	e00f      	b.n	800240a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ea:	f7ff f98b 	bl	8001704 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d908      	bls.n	800240a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e078      	b.n	80024fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e8      	bne.n	80023ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_DMA_Init+0x158>)
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4313      	orrs	r3, r2
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b04      	cmp	r3, #4
 800249c:	d117      	bne.n	80024ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fa6f 	bl	8002994 <DMA_CheckFifoParam>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ca:	2301      	movs	r3, #1
 80024cc:	e016      	b.n	80024fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa26 	bl	8002928 <DMA_CalcBaseAndBitshift>
 80024dc:	4603      	mov	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	f010803f 	.word	0xf010803f

08002508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_DMA_Start_IT+0x26>
 800252a:	2302      	movs	r3, #2
 800252c:	e040      	b.n	80025b0 <HAL_DMA_Start_IT+0xa8>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12f      	bne.n	80025a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2202      	movs	r2, #2
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f9b8 	bl	80028cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	223f      	movs	r2, #63	; 0x3f
 8002562:	409a      	lsls	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0216 	orr.w	r2, r2, #22
 8002576:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c4:	4b8e      	ldr	r3, [pc, #568]	; (8002800 <HAL_DMA_IRQHandler+0x248>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a8e      	ldr	r2, [pc, #568]	; (8002804 <HAL_DMA_IRQHandler+0x24c>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2208      	movs	r2, #8
 80025e4:	409a      	lsls	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01a      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	2208      	movs	r2, #8
 8002612:	409a      	lsls	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2201      	movs	r2, #1
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	2204      	movs	r2, #4
 8002660:	409a      	lsls	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	2204      	movs	r2, #4
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	2210      	movs	r2, #16
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d043      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03c      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2210      	movs	r2, #16
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d018      	beq.n	80026fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	e01f      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e016      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2220      	movs	r2, #32
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 808f 	beq.w	8002858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8087 	beq.w	8002858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2220      	movs	r2, #32
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d136      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0216 	bic.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_DMA_IRQHandler+0x1da>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0208 	bic.w	r2, r2, #8
 80027a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	223f      	movs	r2, #63	; 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07e      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
        }
        return;
 80027ce:	e079      	b.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d031      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e02c      	b.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
 80027fe:	bf00      	nop
 8002800:	20000028 	.word	0x20000028
 8002804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e01e      	b.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0210 	bic.w	r2, r2, #16
 8002836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	2b00      	cmp	r3, #0
 800285e:	d032      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2205      	movs	r2, #5
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	d307      	bcc.n	80028a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f2      	bne.n	8002884 <HAL_DMA_IRQHandler+0x2cc>
 800289e:	e000      	b.n	80028a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028c4:	bf00      	nop
    }
  }
}
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d108      	bne.n	800290c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290a:	e007      	b.n	800291c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3b10      	subs	r3, #16
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <DMA_CalcBaseAndBitshift+0x64>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <DMA_CalcBaseAndBitshift+0x68>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d909      	bls.n	800296a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58
 8002968:	e007      	b.n	800297a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002972:	f023 0303 	bic.w	r3, r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	0800a510 	.word	0x0800a510

08002994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11f      	bne.n	80029ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d856      	bhi.n	8002a62 <DMA_CheckFifoParam+0xce>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x28>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029df 	.word	0x080029df
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	08002a63 	.word	0x08002a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d046      	beq.n	8002a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e043      	b.n	8002a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e6:	d140      	bne.n	8002a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e03d      	b.n	8002a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d121      	bne.n	8002a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d837      	bhi.n	8002a6e <DMA_CheckFifoParam+0xda>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <DMA_CheckFifoParam+0x70>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1b 	.word	0x08002a1b
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002a2d 	.word	0x08002a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e030      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d025      	beq.n	8002a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e022      	b.n	8002a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3a:	e01c      	b.n	8002a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d903      	bls.n	8002a4a <DMA_CheckFifoParam+0xb6>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d003      	beq.n	8002a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a48:	e018      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4e:	e015      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e00b      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a62:	bf00      	nop
 8002a64:	e00a      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e008      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e006      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e004      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e159      	b.n	8002d5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 8148 	bne.w	8002d56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d005      	beq.n	8002ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d130      	bne.n	8002b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 0201 	and.w	r2, r3, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d017      	beq.n	8002b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d123      	bne.n	8002bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	08da      	lsrs	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3208      	adds	r2, #8
 8002b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	08da      	lsrs	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3208      	adds	r2, #8
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0203 	and.w	r2, r3, #3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a2 	beq.w	8002d56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <HAL_GPIO_Init+0x2e8>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a56      	ldr	r2, [pc, #344]	; (8002d74 <HAL_GPIO_Init+0x2e8>)
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b54      	ldr	r3, [pc, #336]	; (8002d74 <HAL_GPIO_Init+0x2e8>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2e:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_GPIO_Init+0x2ec>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_GPIO_Init+0x2f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x202>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a48      	ldr	r2, [pc, #288]	; (8002d80 <HAL_GPIO_Init+0x2f4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x1fe>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <HAL_GPIO_Init+0x2f8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x1fa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <HAL_GPIO_Init+0x2fc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x1f6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a45      	ldr	r2, [pc, #276]	; (8002d8c <HAL_GPIO_Init+0x300>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x1f2>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca0:	4935      	ldr	r1, [pc, #212]	; (8002d78 <HAL_GPIO_Init+0x2ec>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d26:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f67f aea2 	bls.w	8002aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc8:	b08f      	sub	sp, #60	; 0x3c
 8002dca:	af0a      	add	r7, sp, #40	; 0x28
 8002dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e10f      	b.n	8002ff8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f006 fb92 	bl	800951c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fe61 	bl	8005ade <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	687e      	ldr	r6, [r7, #4]
 8002e24:	466d      	mov	r5, sp
 8002e26:	f106 0410 	add.w	r4, r6, #16
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3a:	1d33      	adds	r3, r6, #4
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f002 fd38 	bl	80058b4 <USB_CoreInit>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0d0      	b.n	8002ff8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fe4f 	bl	8005b00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e04a      	b.n	8002efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333d      	adds	r3, #61	; 0x3d
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	b298      	uxth	r0, r3
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3344      	adds	r3, #68	; 0x44
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3340      	adds	r3, #64	; 0x40
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3348      	adds	r3, #72	; 0x48
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334c      	adds	r3, #76	; 0x4c
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3354      	adds	r3, #84	; 0x54
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3af      	bcc.n	8002e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e044      	b.n	8002f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3b5      	bcc.n	8002f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	687e      	ldr	r6, [r7, #4]
 8002faa:	466d      	mov	r5, sp
 8002fac:	f106 0410 	add.w	r4, r6, #16
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc0:	1d33      	adds	r3, r6, #4
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f002 fde7 	bl	8005b98 <USB_DevInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e00d      	b.n	8002ff8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 ff36 	bl	8006e62 <USB_DevDisconnect>

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_Start+0x1c>
 8003018:	2302      	movs	r3, #2
 800301a:	e020      	b.n	800305e <HAL_PCD_Start+0x5e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	2b01      	cmp	r3, #1
 800302a:	d109      	bne.n	8003040 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fd39 	bl	8005abc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fee6 	bl	8006e20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003066:	b590      	push	{r4, r7, lr}
 8003068:	b08d      	sub	sp, #52	; 0x34
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 ffa4 	bl	8006fca <USB_GetMode>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 848a 	bne.w	800399e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 ff08 	bl	8006ea4 <USB_ReadInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8480 	beq.w	800399c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fef5 	bl	8006ea4 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f002 0202 	and.w	r2, r2, #2
 80030d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 fee3 	bl	8006ea4 <USB_ReadInterrupts>
 80030de:	4603      	mov	r3, r0
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d161      	bne.n	80031ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2b02      	cmp	r3, #2
 8003122:	d124      	bne.n	800316e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d035      	beq.n	800319c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6a38      	ldr	r0, [r7, #32]
 8003144:	f003 fd1a 	bl	8006b7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003154:	441a      	add	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003166:	441a      	add	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
 800316c:	e016      	b.n	800319c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	0c5b      	lsrs	r3, r3, #17
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2b06      	cmp	r3, #6
 8003178:	d110      	bne.n	800319c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003180:	2208      	movs	r2, #8
 8003182:	4619      	mov	r1, r3
 8003184:	6a38      	ldr	r0, [r7, #32]
 8003186:	f003 fcf9 	bl	8006b7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003196:	441a      	add	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0210 	orr.w	r2, r2, #16
 80031aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fe77 	bl	8006ea4 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031c0:	f040 80a7 	bne.w	8003312 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 fe7c 	bl	8006eca <USB_ReadDevAllOutEpInterrupt>
 80031d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031d4:	e099      	b.n	800330a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 808e 	beq.w	80032fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fea0 	bl	8006f32 <USB_ReadDevOutEPInterrupt>
 80031f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	2301      	movs	r3, #1
 800320e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fec2 	bl	8003f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	2308      	movs	r3, #8
 8003232:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 ff98 	bl	800416c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	461a      	mov	r2, r3
 8003254:	2310      	movs	r3, #16
 8003256:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d030      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d109      	bne.n	8003282 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800327c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003280:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	78db      	ldrb	r3, [r3, #3]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d108      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f006 fa31 	bl	8009714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	2302      	movs	r3, #2
 80032c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	2320      	movs	r3, #32
 80032de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f6:	461a      	mov	r2, r3
 80032f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	3301      	adds	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f47f af62 	bne.w	80031d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fdc4 	bl	8006ea4 <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003326:	f040 80db 	bne.w	80034e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fde5 	bl	8006efe <USB_ReadDevAllInEpInterrupt>
 8003334:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800333a:	e0cd      	b.n	80034d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80c2 	beq.w	80034cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fe0b 	bl	8006f6e <USB_ReadDevInEPInterrupt>
 8003358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d057      	beq.n	8003414 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	69f9      	ldr	r1, [r7, #28]
 8003380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003384:	4013      	ands	r3, r2
 8003386:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003394:	461a      	mov	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d132      	bne.n	8003408 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	; 0x4c
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4419      	add	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	334c      	adds	r3, #76	; 0x4c
 80033d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d113      	bne.n	8003408 <HAL_PCD_IRQHandler+0x3a2>
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3354      	adds	r3, #84	; 0x54
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003400:	461a      	mov	r2, r3
 8003402:	2101      	movs	r1, #1
 8003404:	f003 fe12 	bl	800702c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f006 f905 	bl	800961e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2308      	movs	r3, #8
 800342e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	461a      	mov	r2, r3
 8003448:	2310      	movs	r3, #16
 800344a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003462:	461a      	mov	r2, r3
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d023      	beq.n	80034ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003474:	6a38      	ldr	r0, [r7, #32]
 8003476:	f002 fcf3 	bl	8005e60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	3338      	adds	r3, #56	; 0x38
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d108      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f006 f948 	bl	8009738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	461a      	mov	r2, r3
 80034b6:	2302      	movs	r3, #2
 80034b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fcdb 	bl	8003e82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	3301      	adds	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f47f af2e 	bne.w	800333c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fcdd 	bl	8006ea4 <USB_ReadInterrupts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f4:	d122      	bne.n	800353c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003510:	2b01      	cmp	r3, #1
 8003512:	d108      	bne.n	8003526 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fec2 	bl	80042a8 <HAL_PCDEx_LPM_Callback>
 8003524:	e002      	b.n	800352c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f006 f8e6 	bl	80096f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800353a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fcaf 	bl	8006ea4 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d112      	bne.n	8003578 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d102      	bne.n	8003568 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f006 f8a2 	bl	80096ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003576:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fc91 	bl	8006ea4 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	f040 80b7 	bne.w	80036fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2110      	movs	r1, #16
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fc58 	bl	8005e60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b4:	e046      	b.n	8003644 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	461a      	mov	r2, r3
 80035c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003618:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	440a      	add	r2, r1
 8003634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800363c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	3301      	adds	r3, #1
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d3b3      	bcc.n	80035b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003660:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367a:	f043 030b 	orr.w	r3, r3, #11
 800367e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f043 030b 	orr.w	r3, r3, #11
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	e015      	b.n	80036c4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f043 030b 	orr.w	r3, r3, #11
 80036c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036e8:	461a      	mov	r2, r3
 80036ea:	f003 fc9f 	bl	800702c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fbce 	bl	8006ea4 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d124      	bne.n	800375e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fc64 	bl	8006fe6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fc19 	bl	8005f5a <USB_GetDevSpeed>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681c      	ldr	r4, [r3, #0]
 8003734:	f001 f9e8 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4620      	mov	r0, r4
 8003744:	f002 f918 	bl	8005978 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f005 ff90 	bl	800966e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fb9e 	bl	8006ea4 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d10a      	bne.n	8003788 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 ff6d 	bl	8009652 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f002 0208 	and.w	r2, r2, #8
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f003 fb89 	bl	8006ea4 <USB_ReadInterrupts>
 8003792:	4603      	mov	r3, r0
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d122      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a8:	2301      	movs	r3, #1
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e014      	b.n	80037d8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb27 	bl	8003e20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	3301      	adds	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3e5      	bcc.n	80037ae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fb5c 	bl	8006ea4 <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d13b      	bne.n	8003870 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f8:	2301      	movs	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e02b      	b.n	8003856 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3340      	adds	r3, #64	; 0x40
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d115      	bne.n	8003850 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003824:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003826:	2b00      	cmp	r3, #0
 8003828:	da12      	bge.n	8003850 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	333f      	adds	r3, #63	; 0x3f
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fae8 	bl	8003e20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	3301      	adds	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	429a      	cmp	r2, r3
 800385e:	d3ce      	bcc.n	80037fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800386e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 fb15 	bl	8006ea4 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003884:	d155      	bne.n	8003932 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003886:	2301      	movs	r3, #1
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	e045      	b.n	8003918 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d12e      	bne.n	8003912 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da2b      	bge.n	8003912 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d121      	bne.n	8003912 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390e:	6053      	str	r3, [r2, #4]
            break;
 8003910:	e007      	b.n	8003922 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	3301      	adds	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	429a      	cmp	r2, r3
 8003920:	d3b4      	bcc.n	800388c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f003 fab4 	bl	8006ea4 <USB_ReadInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d10a      	bne.n	800395e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f005 ff07 	bl	800975c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800395c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fa9e 	bl	8006ea4 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d115      	bne.n	800399e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f005 fef7 	bl	8009778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e000      	b.n	800399e <HAL_PCD_IRQHandler+0x938>
      return;
 800399c:	bf00      	nop
    }
  }
}
 800399e:	3734      	adds	r7, #52	; 0x34
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}

080039a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_PCD_SetAddress+0x1a>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e013      	b.n	80039e6 <HAL_PCD_SetAddress+0x42>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	4611      	mov	r1, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 f9fc 	bl	8006dd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	461a      	mov	r2, r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	70fb      	strb	r3, [r7, #3]
 8003a00:	460b      	mov	r3, r1
 8003a02:	803b      	strh	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da0f      	bge.n	8003a34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3338      	adds	r3, #56	; 0x38
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	705a      	strb	r2, [r3, #1]
 8003a32:	e00f      	b.n	8003a54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a60:	883a      	ldrh	r2, [r7, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	78ba      	ldrb	r2, [r7, #2]
 8003a6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d102      	bne.n	8003a8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_PCD_EP_Open+0xaa>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e00e      	b.n	8003ab6 <HAL_PCD_EP_Open+0xc8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f002 fa7c 	bl	8005fa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0f      	bge.n	8003af2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3338      	adds	r3, #56	; 0x38
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e00f      	b.n	8003b12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_PCD_EP_Close+0x6e>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e00e      	b.n	8003b4a <HAL_PCD_EP_Close+0x8c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 faba 	bl	80060b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f003 020f 	and.w	r2, r3, #15
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d102      	bne.n	8003bae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	f002 fd99 	bl	80066fc <USB_EP0StartXfer>
 8003bca:	e008      	b.n	8003bde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	f002 fb47 	bl	800626c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	f003 020f 	and.w	r2, r3, #15
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	460b      	mov	r3, r1
 8003c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2201      	movs	r2, #1
 8003c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d102      	bne.n	8003c72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c72:	7afb      	ldrb	r3, [r7, #11]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	f002 fd37 	bl	80066fc <USB_EP0StartXfer>
 8003c8e:	e008      	b.n	8003ca2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	f002 fae5 	bl	800626c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d901      	bls.n	8003cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e050      	b.n	8003d6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da0f      	bge.n	8003cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3338      	adds	r3, #56	; 0x38
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	705a      	strb	r2, [r3, #1]
 8003cf0:	e00d      	b.n	8003d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_PCD_EP_SetStall+0x82>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e01e      	b.n	8003d6c <HAL_PCD_EP_SetStall+0xc0>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f002 ff75 	bl	8006c2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	b2d9      	uxtb	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f003 f965 	bl	800702c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d901      	bls.n	8003d92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e042      	b.n	8003e18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da0f      	bge.n	8003dba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	3338      	adds	r3, #56	; 0x38
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	705a      	strb	r2, [r3, #1]
 8003db8:	e00f      	b.n	8003dda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_PCD_EP_ClrStall+0x86>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e00e      	b.n	8003e18 <HAL_PCD_EP_ClrStall+0xa4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 ff7d 	bl	8006d08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da0c      	bge.n	8003e4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	3338      	adds	r3, #56	; 0x38
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4413      	add	r3, r2
 8003e48:	3304      	adds	r3, #4
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e00c      	b.n	8003e68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68f9      	ldr	r1, [r7, #12]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fd9c 	bl	80069ac <USB_EPStopXfer>
 8003e74:	4603      	mov	r3, r0
 8003e76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e78:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08a      	sub	sp, #40	; 0x28
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3338      	adds	r3, #56	; 0x38
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d901      	bls.n	8003eba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06c      	b.n	8003f94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3303      	adds	r3, #3
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ede:	e02b      	b.n	8003f38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d902      	bls.n	8003efc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3303      	adds	r3, #3
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6919      	ldr	r1, [r3, #16]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4603      	mov	r3, r0
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f002 fdf0 	bl	8006b00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	441a      	add	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d809      	bhi.n	8003f62 <PCD_WriteEmptyTxFifo+0xe0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d203      	bcs.n	8003f62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1be      	bne.n	8003ee0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d811      	bhi.n	8003f92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2201      	movs	r2, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	6939      	ldr	r1, [r7, #16]
 8003f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8e:	4013      	ands	r3, r2
 8003f90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d17b      	bne.n	80040ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4a61      	ldr	r2, [pc, #388]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f240 80b9 	bls.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80b3 	beq.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	e0a7      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	2320      	movs	r3, #32
 8004022:	6093      	str	r3, [r2, #8]
 8004024:	e098      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8093 	bne.w	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90f      	bls.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	e07e      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	440b      	add	r3, r1
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a4:	461a      	mov	r2, r3
 80040a6:	2101      	movs	r1, #1
 80040a8:	f002 ffc0 	bl	800702c <USB_EP0_OutStart>
 80040ac:	e006      	b.n	80040bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f005 fa90 	bl	80095e8 <HAL_PCD_DataOutStageCallback>
 80040c8:	e046      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d124      	bne.n	800411c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	e032      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	461a      	mov	r2, r3
 800410a:	2320      	movs	r3, #32
 800410c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f005 fa67 	bl	80095e8 <HAL_PCD_DataOutStageCallback>
 800411a:	e01d      	b.n	8004158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d114      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f002 ff70 	bl	800702c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f005 fa48 	bl	80095e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	4f54300a 	.word	0x4f54300a
 8004168:	4f54310a 	.word	0x4f54310a

0800416c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	333c      	adds	r3, #60	; 0x3c
 8004184:	3304      	adds	r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d90e      	bls.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b8:	461a      	mov	r2, r3
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f005 f9ff 	bl	80095c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d90c      	bls.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	f002 ff22 	bl	800702c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	4f54300a 	.word	0x4f54300a

080041f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
 8004204:	4613      	mov	r3, r2
 8004206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004216:	883b      	ldrh	r3, [r7, #0]
 8004218:	0419      	lsls	r1, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	430a      	orrs	r2, r1
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
 8004224:	e028      	b.n	8004278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e00d      	b.n	8004256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	3340      	adds	r3, #64	; 0x40
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	3301      	adds	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	3b01      	subs	r3, #1
 800425c:	429a      	cmp	r2, r3
 800425e:	d3ec      	bcc.n	800423a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	0418      	lsls	r0, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	3b01      	subs	r3, #1
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4302      	orrs	r2, r0
 8004270:	3340      	adds	r3, #64	; 0x40
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	4b88      	ldr	r3, [pc, #544]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f9c4 	bl	8001704 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd f9c0 	bl	8001704 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd f9b0 	bl	8001704 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd f9ac 	bl	8001704 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd f965 	bl	8001704 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd f961 	bl	8001704 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd f944 	bl	8001704 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd f940 	bl	8001704 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd f924 	bl	8001704 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fd f920 	bl	8001704 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fd f90d 	bl	8001704 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fd f909 	bl	8001704 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fd f8c9 	bl	8001704 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fd f8c5 	bl	8001704 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd f88a 	bl	8001704 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fd f886 	bl	8001704 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fd f874 	bl	8001704 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fd f870 	bl	8001704 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fd f844 	bl	8001704 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7fd f840 	bl	8001704 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd f819 	bl	8001704 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd f815 	bl	8001704 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd f802 	bl	8001704 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fffe 	bl	8001704 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fc ff30 	bl	8001704 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc ff2c 	bl	8001704 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fe90 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800a500 	.word	0x0800a500
 8004974:	20000028 	.word	0x20000028
 8004978:	2000002c 	.word	0x2000002c

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b090      	sub	sp, #64	; 0x40
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
 8004988:	2300      	movs	r3, #0
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	2300      	movs	r3, #0
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80a1 	bhi.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e09b      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049b4:	e09b      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049ba:	e098      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b4f      	ldr	r3, [pc, #316]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	627a      	str	r2, [r7, #36]	; 0x24
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049e4:	2100      	movs	r1, #0
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80049e8:	fb03 f201 	mul.w	r2, r3, r1
 80049ec:	2300      	movs	r3, #0
 80049ee:	fb00 f303 	mul.w	r3, r0, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	4a43      	ldr	r2, [pc, #268]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f6:	fba0 1202 	umull	r1, r2, r0, r2
 80049fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fc:	460a      	mov	r2, r1
 80049fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a02:	4413      	add	r3, r2
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	2200      	movs	r2, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	61fa      	str	r2, [r7, #28]
 8004a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a16:	f7fb fc3b 	bl	8000290 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4613      	mov	r3, r2
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a22:	e053      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a24:	4b35      	ldr	r3, [pc, #212]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	617a      	str	r2, [r7, #20]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a36:	f04f 0b00 	mov.w	fp, #0
 8004a3a:	4652      	mov	r2, sl
 8004a3c:	465b      	mov	r3, fp
 8004a3e:	f04f 0000 	mov.w	r0, #0
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	0159      	lsls	r1, r3, #5
 8004a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4c:	0150      	lsls	r0, r2, #5
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	ebb2 080a 	subs.w	r8, r2, sl
 8004a56:	eb63 090b 	sbc.w	r9, r3, fp
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8004a72:	eb63 0509 	sbc.w	r5, r3, r9
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	00eb      	lsls	r3, r5, #3
 8004a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a84:	00e2      	lsls	r2, r4, #3
 8004a86:	4614      	mov	r4, r2
 8004a88:	461d      	mov	r5, r3
 8004a8a:	eb14 030a 	adds.w	r3, r4, sl
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	eb45 030b 	adc.w	r3, r5, fp
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	028b      	lsls	r3, r1, #10
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aac:	4621      	mov	r1, r4
 8004aae:	028a      	lsls	r2, r1, #10
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac0:	f7fb fbe6 	bl	8000290 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae6:	e002      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3740      	adds	r7, #64	; 0x40
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	00f42400 	.word	0x00f42400
 8004b04:	017d7840 	.word	0x017d7840

08004b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000028 	.word	0x20000028

08004b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e041      	b.n	8004bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fc4a 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 fb1c 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e03c      	b.n	8004c52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_TIM_Base_Start+0xa0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start+0x5c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start+0x5c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_TIM_Base_Start+0xa4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start+0x5c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start+0xa8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start+0x5c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_TIM_Base_Start+0xac>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start+0x5c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <HAL_TIM_Base_Start+0xb0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d111      	bne.n	8004c40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d010      	beq.n	8004c50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	e007      	b.n	8004c50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40014000 	.word	0x40014000

08004c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e041      	b.n	8004d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f839 	bl	8004d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fa72 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_TIM_PWM_Start+0x24>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e022      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d109      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x3e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e015      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x58>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e008      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e068      	b.n	8004e6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0x82>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da8:	e013      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0x92>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	e00b      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	e003      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fc84 	bl	80056e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <HAL_TIM_PWM_Start+0x14c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <HAL_TIM_PWM_Start+0x14c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_TIM_PWM_Start+0x150>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_TIM_PWM_Start+0x154>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_TIM_PWM_Start+0x158>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <HAL_TIM_PWM_Start+0x15c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e0ae      	b.n	8005004 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b0c      	cmp	r3, #12
 8004eb2:	f200 809f 	bhi.w	8004ff4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004ff5 	.word	0x08004ff5
 8004ec4:	08004ff5 	.word	0x08004ff5
 8004ec8:	08004ff5 	.word	0x08004ff5
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	08004ff5 	.word	0x08004ff5
 8004ed4:	08004ff5 	.word	0x08004ff5
 8004ed8:	08004ff5 	.word	0x08004ff5
 8004edc:	08004f73 	.word	0x08004f73
 8004ee0:	08004ff5 	.word	0x08004ff5
 8004ee4:	08004ff5 	.word	0x08004ff5
 8004ee8:	08004ff5 	.word	0x08004ff5
 8004eec:	08004fb3 	.word	0x08004fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f9d0 	bl	800529c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0204 	bic.w	r2, r2, #4
 8004f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	619a      	str	r2, [r3, #24]
      break;
 8004f2e:	e064      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fa16 	bl	8005368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6999      	ldr	r1, [r3, #24]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	021a      	lsls	r2, r3, #8
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	619a      	str	r2, [r3, #24]
      break;
 8004f70:	e043      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fa61 	bl	8005440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0208 	orr.w	r2, r2, #8
 8004f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0204 	bic.w	r2, r2, #4
 8004f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69d9      	ldr	r1, [r3, #28]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	61da      	str	r2, [r3, #28]
      break;
 8004fb0:	e023      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 faab 	bl	8005514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69d9      	ldr	r1, [r3, #28]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	021a      	lsls	r2, r3, #8
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	61da      	str	r2, [r3, #28]
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIM_ConfigClockSource+0x1c>
 8005024:	2302      	movs	r3, #2
 8005026:	e0b4      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x186>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800504e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005060:	d03e      	beq.n	80050e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	f200 8087 	bhi.w	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	f000 8086 	beq.w	800517e <HAL_TIM_ConfigClockSource+0x172>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d87f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b70      	cmp	r3, #112	; 0x70
 800507a:	d01a      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0xa6>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d87b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b60      	cmp	r3, #96	; 0x60
 8005082:	d050      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x11a>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d877      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b50      	cmp	r3, #80	; 0x50
 800508a:	d03c      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xfa>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d873      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d058      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0x13a>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d86f      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b30      	cmp	r3, #48	; 0x30
 800509a:	d064      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d86b      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d060      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d867      	bhi.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d05c      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d05a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	e062      	b.n	8005178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f000 faf1 	bl	80056a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	609a      	str	r2, [r3, #8]
      break;
 80050de:	e04f      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f000 fada 	bl	80056a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005102:	609a      	str	r2, [r3, #8]
      break;
 8005104:	e03c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fa4e 	bl	80055b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2150      	movs	r1, #80	; 0x50
 800511e:	4618      	mov	r0, r3
 8005120:	f000 faa7 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005124:	e02c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	461a      	mov	r2, r3
 8005134:	f000 fa6d 	bl	8005612 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2160      	movs	r1, #96	; 0x60
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fa97 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005144:	e01c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 fa2e 	bl	80055b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fa87 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005164:	e00c      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f000 fa7e 	bl	8005672 <TIM_ITRx_SetConfig>
      break;
 8005176:	e003      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      break;
 800517c:	e000      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800517e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a34      	ldr	r2, [pc, #208]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a31      	ldr	r2, [pc, #196]	; (8005284 <TIM_Base_SetConfig+0xe8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a30      	ldr	r2, [pc, #192]	; (8005288 <TIM_Base_SetConfig+0xec>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <TIM_Base_SetConfig+0xf0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a25      	ldr	r2, [pc, #148]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01b      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f4:	d017      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <TIM_Base_SetConfig+0xe8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <TIM_Base_SetConfig+0xec>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00f      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <TIM_Base_SetConfig+0xf0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00b      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <TIM_Base_SetConfig+0xf4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d007      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <TIM_Base_SetConfig+0xf8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <TIM_Base_SetConfig+0xfc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d108      	bne.n	8005238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a08      	ldr	r2, [pc, #32]	; (8005280 <TIM_Base_SetConfig+0xe4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 0302 	bic.w	r3, r3, #2
 80052e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_OC1_SetConfig+0xc8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10c      	bne.n	8005312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0308 	bic.w	r3, r3, #8
 80052fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <TIM_OC1_SetConfig+0xc8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d111      	bne.n	800533e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40010000 	.word	0x40010000

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0210 	bic.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0320 	bic.w	r3, r3, #32
 80053b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <TIM_OC2_SetConfig+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10d      	bne.n	80053e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <TIM_OC2_SetConfig+0xd4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d113      	bne.n	8005414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000

08005440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <TIM_OC3_SetConfig+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d10d      	bne.n	80054ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a14      	ldr	r2, [pc, #80]	; (8005510 <TIM_OC3_SetConfig+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d113      	bne.n	80054ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40010000 	.word	0x40010000

08005514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	031b      	lsls	r3, r3, #12
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_OC4_SetConfig+0x9c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d109      	bne.n	8005588 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	019b      	lsls	r3, r3, #6
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000

080055b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 030a 	bic.w	r3, r3, #10
 80055f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0210 	bic.w	r2, r3, #16
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800563c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800564e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	f043 0307 	orr.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2201      	movs	r2, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	43db      	mvns	r3, r3
 800570a:	401a      	ands	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	431a      	orrs	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e050      	b.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d013      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10c      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e03d      	b.n	80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 001c 	add.w	r0, r7, #28
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d122      	bne.n	8005912 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d105      	bne.n	8005906 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fbee 	bl	80070e8 <USB_CoreReset>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e01a      	b.n	8005948 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fbe2 	bl	80070e8 <USB_CoreReset>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
 800593a:	e005      	b.n	8005948 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	2b01      	cmp	r3, #1
 800594c:	d10b      	bne.n	8005966 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f043 0206 	orr.w	r2, r3, #6
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr
	...

08005978 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d165      	bne.n	8005a58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <USB_SetTurnaroundTime+0x11c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d906      	bls.n	80059a2 <USB_SetTurnaroundTime+0x2a>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4a40      	ldr	r2, [pc, #256]	; (8005a98 <USB_SetTurnaroundTime+0x120>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d202      	bcs.n	80059a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800599c:	230f      	movs	r3, #15
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e062      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <USB_SetTurnaroundTime+0x120>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d306      	bcc.n	80059b8 <USB_SetTurnaroundTime+0x40>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <USB_SetTurnaroundTime+0x124>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d202      	bcs.n	80059b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059b2:	230e      	movs	r3, #14
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e057      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <USB_SetTurnaroundTime+0x124>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d306      	bcc.n	80059ce <USB_SetTurnaroundTime+0x56>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4a37      	ldr	r2, [pc, #220]	; (8005aa0 <USB_SetTurnaroundTime+0x128>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d202      	bcs.n	80059ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059c8:	230d      	movs	r3, #13
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e04c      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <USB_SetTurnaroundTime+0x128>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d306      	bcc.n	80059e4 <USB_SetTurnaroundTime+0x6c>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4a32      	ldr	r2, [pc, #200]	; (8005aa4 <USB_SetTurnaroundTime+0x12c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d802      	bhi.n	80059e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059de:	230c      	movs	r3, #12
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e041      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <USB_SetTurnaroundTime+0x12c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d906      	bls.n	80059fa <USB_SetTurnaroundTime+0x82>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a2e      	ldr	r2, [pc, #184]	; (8005aa8 <USB_SetTurnaroundTime+0x130>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d802      	bhi.n	80059fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059f4:	230b      	movs	r3, #11
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	e036      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4a2a      	ldr	r2, [pc, #168]	; (8005aa8 <USB_SetTurnaroundTime+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d906      	bls.n	8005a10 <USB_SetTurnaroundTime+0x98>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4a29      	ldr	r2, [pc, #164]	; (8005aac <USB_SetTurnaroundTime+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d802      	bhi.n	8005a10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	e02b      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4a26      	ldr	r2, [pc, #152]	; (8005aac <USB_SetTurnaroundTime+0x134>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d906      	bls.n	8005a26 <USB_SetTurnaroundTime+0xae>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <USB_SetTurnaroundTime+0x138>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d202      	bcs.n	8005a26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a20:	2309      	movs	r3, #9
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e020      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <USB_SetTurnaroundTime+0x138>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d306      	bcc.n	8005a3c <USB_SetTurnaroundTime+0xc4>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <USB_SetTurnaroundTime+0x13c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d802      	bhi.n	8005a3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a36:	2308      	movs	r3, #8
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e015      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <USB_SetTurnaroundTime+0x13c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d906      	bls.n	8005a52 <USB_SetTurnaroundTime+0xda>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <USB_SetTurnaroundTime+0x140>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d202      	bcs.n	8005a52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a4c:	2307      	movs	r3, #7
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	e00a      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a52:	2306      	movs	r3, #6
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e007      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a5e:	2309      	movs	r3, #9
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e001      	b.n	8005a68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a64:	2309      	movs	r3, #9
 8005a66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	00d8acbf 	.word	0x00d8acbf
 8005a98:	00e4e1c0 	.word	0x00e4e1c0
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	01067380 	.word	0x01067380
 8005aa4:	011a499f 	.word	0x011a499f
 8005aa8:	01312cff 	.word	0x01312cff
 8005aac:	014ca43f 	.word	0x014ca43f
 8005ab0:	016e3600 	.word	0x016e3600
 8005ab4:	01a6ab1f 	.word	0x01a6ab1f
 8005ab8:	01e84800 	.word	0x01e84800

08005abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f043 0201 	orr.w	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d115      	bne.n	8005b4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b2e:	2001      	movs	r0, #1
 8005b30:	f7fb fdf4 	bl	800171c <HAL_Delay>
      ms++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fa45 	bl	8006fca <USB_GetMode>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d01e      	beq.n	8005b84 <USB_SetCurrentMode+0x84>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b31      	cmp	r3, #49	; 0x31
 8005b4a:	d9f0      	bls.n	8005b2e <USB_SetCurrentMode+0x2e>
 8005b4c:	e01a      	b.n	8005b84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d115      	bne.n	8005b80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b60:	2001      	movs	r0, #1
 8005b62:	f7fb fddb 	bl	800171c <HAL_Delay>
      ms++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fa2c 	bl	8006fca <USB_GetMode>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <USB_SetCurrentMode+0x84>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b31      	cmp	r3, #49	; 0x31
 8005b7c:	d9f0      	bls.n	8005b60 <USB_SetCurrentMode+0x60>
 8005b7e:	e001      	b.n	8005b84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e005      	b.n	8005b90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b32      	cmp	r3, #50	; 0x32
 8005b88:	d101      	bne.n	8005b8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b98:	b084      	sub	sp, #16
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	e009      	b.n	8005bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3340      	adds	r3, #64	; 0x40
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b0e      	cmp	r3, #14
 8005bd0:	d9f2      	bls.n	8005bb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11c      	bne.n	8005c12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c10:	e00b      	b.n	8005c2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	461a      	mov	r2, r3
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10c      	bne.n	8005c6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c56:	2100      	movs	r1, #0
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f965 	bl	8005f28 <USB_SetDevSpeed>
 8005c5e:	e008      	b.n	8005c72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c60:	2101      	movs	r1, #1
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f960 	bl	8005f28 <USB_SetDevSpeed>
 8005c68:	e003      	b.n	8005c72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c6a:	2103      	movs	r1, #3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f95b 	bl	8005f28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c72:	2110      	movs	r1, #16
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8f3 	bl	8005e60 <USB_FlushTxFifo>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f91f 	bl	8005ec8 <USB_FlushRxFifo>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	e043      	b.n	8005d46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd4:	d118      	bne.n	8005d08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e013      	b.n	8005d1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e008      	b.n	8005d1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	461a      	mov	r2, r3
 8005d16:	2300      	movs	r3, #0
 8005d18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	3301      	adds	r3, #1
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3b7      	bcc.n	8005cbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	e043      	b.n	8005ddc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6a:	d118      	bne.n	8005d9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e013      	b.n	8005db0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d94:	461a      	mov	r2, r3
 8005d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e008      	b.n	8005db0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3b7      	bcc.n	8005d54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f043 0210 	orr.w	r2, r3, #16
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <USB_DevInit+0x2c4>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f043 0208 	orr.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d107      	bne.n	8005e4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e58:	b004      	add	sp, #16
 8005e5a:	4770      	bx	lr
 8005e5c:	803c3800 	.word	0x803c3800

08005e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <USB_FlushTxFifo+0x64>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e01b      	b.n	8005eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	daf2      	bge.n	8005e6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	019b      	lsls	r3, r3, #6
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <USB_FlushTxFifo+0x64>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e006      	b.n	8005eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d0f0      	beq.n	8005e98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	00030d40 	.word	0x00030d40

08005ec8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <USB_FlushRxFifo+0x5c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e018      	b.n	8005f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	daf2      	bge.n	8005ed4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a08      	ldr	r2, [pc, #32]	; (8005f24 <USB_FlushRxFifo+0x5c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d901      	bls.n	8005f0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e006      	b.n	8005f18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d0f0      	beq.n	8005ef8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	00030d40 	.word	0x00030d40

08005f28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
 8005f7e:	e00a      	b.n	8005f96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d002      	beq.n	8005f8c <USB_GetDevSpeed+0x32>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b06      	cmp	r3, #6
 8005f8a:	d102      	bne.n	8005f92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	75fb      	strb	r3, [r7, #23]
 8005f90:	e001      	b.n	8005f96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f92:	230f      	movs	r3, #15
 8005f94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d13a      	bne.n	8006036 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d155      	bne.n	80060a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	791b      	ldrb	r3, [r3, #4]
 8006012:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006014:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	059b      	lsls	r3, r3, #22
 800601a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800601c:	4313      	orrs	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	e036      	b.n	80060a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	2101      	movs	r1, #1
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006054:	4313      	orrs	r3, r2
 8006056:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11a      	bne.n	80060a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800608a:	430b      	orrs	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d161      	bne.n	8006194 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e6:	d11f      	bne.n	8006128 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006106:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006126:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	2101      	movs	r1, #1
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	b29b      	uxth	r3, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006148:	4013      	ands	r3, r2
 800614a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	2101      	movs	r1, #1
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800616c:	4013      	ands	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	0159      	lsls	r1, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	440b      	add	r3, r1
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	4619      	mov	r1, r3
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <USB_DeactivateEndpoint+0x1b0>)
 800618e:	4013      	ands	r3, r2
 8006190:	600b      	str	r3, [r1, #0]
 8006192:	e060      	b.n	8006256 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061aa:	d11f      	bne.n	80061ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	43db      	mvns	r3, r3
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620c:	4013      	ands	r3, r2
 800620e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	2101      	movs	r1, #1
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	43db      	mvns	r3, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006230:	4013      	ands	r3, r2
 8006232:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	0159      	lsls	r1, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	440b      	add	r3, r1
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	4619      	mov	r1, r3
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <USB_DeactivateEndpoint+0x1b4>)
 8006252:	4013      	ands	r3, r2
 8006254:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	ec337800 	.word	0xec337800
 8006268:	eff37800 	.word	0xeff37800

0800626c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 815c 	bne.w	8006546 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d132      	bne.n	80062fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	0cdb      	lsrs	r3, r3, #19
 80062f6:	04db      	lsls	r3, r3, #19
 80062f8:	6113      	str	r3, [r2, #16]
 80062fa:	e074      	b.n	80063e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	0cdb      	lsrs	r3, r3, #19
 8006318:	04db      	lsls	r3, r3, #19
 800631a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800633a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800633e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	440b      	add	r3, r1
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006362:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006364:	4b9d      	ldr	r3, [pc, #628]	; (80065dc <USB_EPStartXfer+0x370>)
 8006366:	400b      	ands	r3, r1
 8006368:	69b9      	ldr	r1, [r7, #24]
 800636a:	0148      	lsls	r0, r1, #5
 800636c:	69f9      	ldr	r1, [r7, #28]
 800636e:	4401      	add	r1, r0
 8006370:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006374:	4313      	orrs	r3, r2
 8006376:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638e:	69b9      	ldr	r1, [r7, #24]
 8006390:	0148      	lsls	r0, r1, #5
 8006392:	69f9      	ldr	r1, [r7, #28]
 8006394:	4401      	add	r1, r0
 8006396:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800639a:	4313      	orrs	r3, r2
 800639c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d11f      	bne.n	80063e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d14b      	bne.n	8006484 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d009      	beq.n	8006408 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	461a      	mov	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d128      	bne.n	8006462 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d110      	bne.n	8006442 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e00f      	b.n	8006462 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e133      	b.n	80066ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	791b      	ldrb	r3, [r3, #4]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d015      	beq.n	80064d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 811b 	beq.w	80066ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	2101      	movs	r1, #1
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	69f9      	ldr	r1, [r7, #28]
 80064ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d2:	4313      	orrs	r3, r2
 80064d4:	634b      	str	r3, [r1, #52]	; 0x34
 80064d6:	e109      	b.n	80066ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d110      	bne.n	800650a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e00f      	b.n	800652a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006528:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6919      	ldr	r1, [r3, #16]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	b298      	uxth	r0, r3
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4603      	mov	r3, r0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fade 	bl	8006b00 <USB_WritePacket>
 8006544:	e0d2      	b.n	80066ec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	440a      	add	r2, r1
 800655c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006560:	0cdb      	lsrs	r3, r3, #19
 8006562:	04db      	lsls	r3, r3, #19
 8006564:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006588:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d126      	bne.n	80065e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a8:	69b9      	ldr	r1, [r7, #24]
 80065aa:	0148      	lsls	r0, r1, #5
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	4401      	add	r1, r0
 80065b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065b4:	4313      	orrs	r3, r2
 80065b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065d6:	6113      	str	r3, [r2, #16]
 80065d8:	e03a      	b.n	8006650 <USB_EPStartXfer+0x3e4>
 80065da:	bf00      	nop
 80065dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	8afa      	ldrh	r2, [r7, #22]
 80065fc:	fb03 f202 	mul.w	r2, r3, r2
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	8afb      	ldrh	r3, [r7, #22]
 8006614:	04d9      	lsls	r1, r3, #19
 8006616:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <USB_EPStartXfer+0x48c>)
 8006618:	400b      	ands	r3, r1
 800661a:	69b9      	ldr	r1, [r7, #24]
 800661c:	0148      	lsls	r0, r1, #5
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	4401      	add	r1, r0
 8006622:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006626:	4313      	orrs	r3, r2
 8006628:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006640:	69b9      	ldr	r1, [r7, #24]
 8006642:	0148      	lsls	r0, r1, #5
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	4401      	add	r1, r0
 8006648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800664c:	4313      	orrs	r3, r2
 800664e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10d      	bne.n	8006672 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6919      	ldr	r1, [r3, #16]
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	460a      	mov	r2, r1
 8006670:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d128      	bne.n	80066cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006686:	2b00      	cmp	r3, #0
 8006688:	d110      	bne.n	80066ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e00f      	b.n	80066cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	1ff80000 	.word	0x1ff80000

080066fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 80ce 	bne.w	80068ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d132      	bne.n	800678c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006744:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006784:	0cdb      	lsrs	r3, r3, #19
 8006786:	04db      	lsls	r3, r3, #19
 8006788:	6113      	str	r3, [r2, #16]
 800678a:	e04e      	b.n	800682a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a6:	0cdb      	lsrs	r3, r3, #19
 80067a8:	04db      	lsls	r3, r3, #19
 80067aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d903      	bls.n	80067e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681a:	6939      	ldr	r1, [r7, #16]
 800681c:	0148      	lsls	r0, r1, #5
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	4401      	add	r1, r0
 8006822:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006826:	4313      	orrs	r3, r2
 8006828:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11e      	bne.n	800686e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e097      	b.n	800699e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006888:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800688c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8083 	beq.w	800699e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f303 	lsl.w	r3, r1, r3
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b4:	4313      	orrs	r3, r2
 80068b6:	634b      	str	r3, [r1, #52]	; 0x34
 80068b8:	e071      	b.n	800699e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d4:	0cdb      	lsrs	r3, r3, #19
 80068d6:	04db      	lsls	r3, r3, #19
 80068d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694c:	6939      	ldr	r1, [r7, #16]
 800694e:	0148      	lsls	r0, r1, #5
 8006950:	6979      	ldr	r1, [r7, #20]
 8006952:	4401      	add	r1, r0
 8006954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006958:	4313      	orrs	r3, r2
 800695a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10d      	bne.n	800697e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6919      	ldr	r1, [r3, #16]
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	460a      	mov	r2, r1
 800697c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800699c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d14a      	bne.n	8006a60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e2:	f040 8086 	bne.w	8006af2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d902      	bls.n	8006a44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e056      	b.n	8006af2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d0e7      	beq.n	8006a2e <USB_EPStopXfer+0x82>
 8006a5e:	e048      	b.n	8006af2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a78:	d13b      	bne.n	8006af2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	7812      	ldrb	r2, [r2, #0]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	7812      	ldrb	r2, [r2, #0]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d902      	bls.n	8006ad8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad6:	e00c      	b.n	8006af2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af0:	d0e7      	beq.n	8006ac2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b089      	sub	sp, #36	; 0x24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	460b      	mov	r3, r1
 8006b10:	71fb      	strb	r3, [r7, #7]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d123      	bne.n	8006b6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b26:	88bb      	ldrh	r3, [r7, #4]
 8006b28:	3303      	adds	r3, #3
 8006b2a:	089b      	lsrs	r3, r3, #2
 8006b2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e018      	b.n	8006b66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	031a      	lsls	r2, r3, #12
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	461a      	mov	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	3301      	adds	r3, #1
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d3e2      	bcc.n	8006b34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3724      	adds	r7, #36	; 0x24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b08b      	sub	sp, #44	; 0x2c
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	089b      	lsrs	r3, r3, #2
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	e014      	b.n	8006bd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	3301      	adds	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	623b      	str	r3, [r7, #32]
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d3e6      	bcc.n	8006ba8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bda:	8bfb      	ldrh	r3, [r7, #30]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01e      	beq.n	8006c1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bea:	461a      	mov	r2, r3
 8006bec:	f107 0310 	add.w	r3, r7, #16
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	701a      	strb	r2, [r3, #0]
      i++;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	3301      	adds	r3, #1
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c12:	8bfb      	ldrh	r3, [r7, #30]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c18:	8bfb      	ldrh	r3, [r7, #30]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ea      	bne.n	8006bf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	372c      	adds	r7, #44	; 0x2c
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d12c      	bne.n	8006ca2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	db12      	blt.n	8006c80 <USB_EPSetStall+0x54>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	e02b      	b.n	8006cfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	db12      	blt.n	8006cda <USB_EPSetStall+0xae>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d128      	bne.n	8006d76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	791b      	ldrb	r3, [r3, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d003      	beq.n	8006d54 <USB_EPClearStall+0x4c>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d138      	bne.n	8006dc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	e027      	b.n	8006dc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	791b      	ldrb	r3, [r3, #4]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d003      	beq.n	8006da6 <USB_EPClearStall+0x9e>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	791b      	ldrb	r3, [r3, #4]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d10f      	bne.n	8006dc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006df6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4e:	f023 0302 	bic.w	r3, r3, #2
 8006e52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b085      	sub	sp, #20
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e90:	f043 0302 	orr.w	r3, r3, #2
 8006e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	b29b      	uxth	r3, r3
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f60:	68bb      	ldr	r3, [r7, #8]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9e:	01db      	lsls	r3, r3, #7
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007004:	f023 0307 	bic.w	r3, r3, #7
 8007008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	460b      	mov	r3, r1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	333c      	adds	r3, #60	; 0x3c
 8007042:	3304      	adds	r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <USB_EP0_OutStart+0xb8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d90a      	bls.n	8007066 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007060:	d101      	bne.n	8007066 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e037      	b.n	80070d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	461a      	mov	r2, r3
 800706e:	2300      	movs	r3, #0
 8007070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007094:	f043 0318 	orr.w	r3, r3, #24
 8007098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10f      	bne.n	80070d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	4f54300a 	.word	0x4f54300a

080070e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a13      	ldr	r2, [pc, #76]	; (800714c <USB_CoreReset+0x64>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e01b      	b.n	800713e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	daf2      	bge.n	80070f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f043 0201 	orr.w	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <USB_CoreReset+0x64>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d901      	bls.n	8007130 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e006      	b.n	800713e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b01      	cmp	r3, #1
 800713a:	d0f0      	beq.n	800711e <USB_CoreReset+0x36>

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	00030d40 	.word	0x00030d40

08007150 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800715c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007160:	f002 fca2 	bl	8009aa8 <USBD_static_malloc>
 8007164:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	32b0      	adds	r2, #176	; 0xb0
 8007176:	2100      	movs	r1, #0
 8007178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800717c:	2302      	movs	r3, #2
 800717e:	e0d4      	b.n	800732a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007180:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007184:	2100      	movs	r1, #0
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f002 fcf2 	bl	8009b70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32b0      	adds	r2, #176	; 0xb0
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	32b0      	adds	r2, #176	; 0xb0
 80071a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7c1b      	ldrb	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d138      	bne.n	800722a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071b8:	4b5e      	ldr	r3, [pc, #376]	; (8007334 <USBD_CDC_Init+0x1e4>)
 80071ba:	7819      	ldrb	r1, [r3, #0]
 80071bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c0:	2202      	movs	r2, #2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f002 fb4d 	bl	8009862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071c8:	4b5a      	ldr	r3, [pc, #360]	; (8007334 <USBD_CDC_Init+0x1e4>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3324      	adds	r3, #36	; 0x24
 80071de:	2201      	movs	r2, #1
 80071e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071e2:	4b55      	ldr	r3, [pc, #340]	; (8007338 <USBD_CDC_Init+0x1e8>)
 80071e4:	7819      	ldrb	r1, [r3, #0]
 80071e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ea:	2202      	movs	r2, #2
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 fb38 	bl	8009862 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071f2:	4b51      	ldr	r3, [pc, #324]	; (8007338 <USBD_CDC_Init+0x1e8>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800720a:	2201      	movs	r2, #1
 800720c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800720e:	4b4b      	ldr	r3, [pc, #300]	; (800733c <USBD_CDC_Init+0x1ec>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	3326      	adds	r3, #38	; 0x26
 8007224:	2210      	movs	r2, #16
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e035      	b.n	8007296 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800722a:	4b42      	ldr	r3, [pc, #264]	; (8007334 <USBD_CDC_Init+0x1e4>)
 800722c:	7819      	ldrb	r1, [r3, #0]
 800722e:	2340      	movs	r3, #64	; 0x40
 8007230:	2202      	movs	r2, #2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 fb15 	bl	8009862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007238:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <USBD_CDC_Init+0x1e4>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	2201      	movs	r2, #1
 8007250:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007252:	4b39      	ldr	r3, [pc, #228]	; (8007338 <USBD_CDC_Init+0x1e8>)
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	2202      	movs	r2, #2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f002 fb01 	bl	8009862 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <USBD_CDC_Init+0x1e8>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007278:	2201      	movs	r2, #1
 800727a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800727c:	4b2f      	ldr	r3, [pc, #188]	; (800733c <USBD_CDC_Init+0x1ec>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3326      	adds	r3, #38	; 0x26
 8007292:	2210      	movs	r2, #16
 8007294:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007296:	4b29      	ldr	r3, [pc, #164]	; (800733c <USBD_CDC_Init+0x1ec>)
 8007298:	7819      	ldrb	r1, [r3, #0]
 800729a:	2308      	movs	r3, #8
 800729c:	2203      	movs	r2, #3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f002 fadf 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072a4:	4b25      	ldr	r3, [pc, #148]	; (800733c <USBD_CDC_Init+0x1ec>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 020f 	and.w	r2, r3, #15
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	3324      	adds	r3, #36	; 0x24
 80072ba:	2201      	movs	r2, #1
 80072bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	33b0      	adds	r3, #176	; 0xb0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e018      	b.n	800732a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7c1b      	ldrb	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007300:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <USBD_CDC_Init+0x1e8>)
 8007302:	7819      	ldrb	r1, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800730a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 fb96 	bl	8009a40 <USBD_LL_PrepareReceive>
 8007314:	e008      	b.n	8007328 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007316:	4b08      	ldr	r3, [pc, #32]	; (8007338 <USBD_CDC_Init+0x1e8>)
 8007318:	7819      	ldrb	r1, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f002 fb8c 	bl	8009a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	200000bb 	.word	0x200000bb
 8007338:	200000bc 	.word	0x200000bc
 800733c:	200000bd 	.word	0x200000bd

08007340 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800734c:	4b3a      	ldr	r3, [pc, #232]	; (8007438 <USBD_CDC_DeInit+0xf8>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f002 faab 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007358:	4b37      	ldr	r3, [pc, #220]	; (8007438 <USBD_CDC_DeInit+0xf8>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3324      	adds	r3, #36	; 0x24
 800736e:	2200      	movs	r2, #0
 8007370:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007372:	4b32      	ldr	r3, [pc, #200]	; (800743c <USBD_CDC_DeInit+0xfc>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 fa98 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800737e:	4b2f      	ldr	r3, [pc, #188]	; (800743c <USBD_CDC_DeInit+0xfc>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	f003 020f 	and.w	r2, r3, #15
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007396:	2200      	movs	r2, #0
 8007398:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <USBD_CDC_DeInit+0x100>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f002 fa84 	bl	80098ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073a6:	4b26      	ldr	r3, [pc, #152]	; (8007440 <USBD_CDC_DeInit+0x100>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	3324      	adds	r3, #36	; 0x24
 80073bc:	2200      	movs	r2, #0
 80073be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073c0:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <USBD_CDC_DeInit+0x100>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	f003 020f 	and.w	r2, r3, #15
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	3326      	adds	r3, #38	; 0x26
 80073d6:	2200      	movs	r2, #0
 80073d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	32b0      	adds	r2, #176	; 0xb0
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01f      	beq.n	800742c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	33b0      	adds	r3, #176	; 0xb0
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	32b0      	adds	r2, #176	; 0xb0
 800740a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740e:	4618      	mov	r0, r3
 8007410:	f002 fb58 	bl	8009ac4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32b0      	adds	r2, #176	; 0xb0
 800741e:	2100      	movs	r1, #0
 8007420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200000bb 	.word	0x200000bb
 800743c:	200000bc 	.word	0x200000bc
 8007440:	200000bd 	.word	0x200000bd

08007444 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	32b0      	adds	r2, #176	; 0xb0
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	e0bf      	b.n	80075f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800747c:	2b00      	cmp	r3, #0
 800747e:	d050      	beq.n	8007522 <USBD_CDC_Setup+0xde>
 8007480:	2b20      	cmp	r3, #32
 8007482:	f040 80af 	bne.w	80075e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d03a      	beq.n	8007504 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	b25b      	sxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	da1b      	bge.n	80074d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	33b0      	adds	r3, #176	; 0xb0
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	88d2      	ldrh	r2, [r2, #6]
 80074b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	88db      	ldrh	r3, [r3, #6]
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	bf28      	it	cs
 80074be:	2307      	movcs	r3, #7
 80074c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	89fa      	ldrh	r2, [r7, #14]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fd89 	bl	8008fe0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074ce:	e090      	b.n	80075f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	785a      	ldrb	r2, [r3, #1]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	88db      	ldrh	r3, [r3, #6]
 80074de:	2b3f      	cmp	r3, #63	; 0x3f
 80074e0:	d803      	bhi.n	80074ea <USBD_CDC_Setup+0xa6>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	e000      	b.n	80074ec <USBD_CDC_Setup+0xa8>
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074f2:	6939      	ldr	r1, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074fa:	461a      	mov	r2, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fd9b 	bl	8009038 <USBD_CtlPrepareRx>
      break;
 8007502:	e076      	b.n	80075f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	33b0      	adds	r3, #176	; 0xb0
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	7850      	ldrb	r0, [r2, #1]
 800751a:	2200      	movs	r2, #0
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	4798      	blx	r3
      break;
 8007520:	e067      	b.n	80075f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b0b      	cmp	r3, #11
 8007528:	d851      	bhi.n	80075ce <USBD_CDC_Setup+0x18a>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <USBD_CDC_Setup+0xec>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007561 	.word	0x08007561
 8007534:	080075dd 	.word	0x080075dd
 8007538:	080075cf 	.word	0x080075cf
 800753c:	080075cf 	.word	0x080075cf
 8007540:	080075cf 	.word	0x080075cf
 8007544:	080075cf 	.word	0x080075cf
 8007548:	080075cf 	.word	0x080075cf
 800754c:	080075cf 	.word	0x080075cf
 8007550:	080075cf 	.word	0x080075cf
 8007554:	080075cf 	.word	0x080075cf
 8007558:	0800758b 	.word	0x0800758b
 800755c:	080075b5 	.word	0x080075b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b03      	cmp	r3, #3
 800756a:	d107      	bne.n	800757c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800756c:	f107 030a 	add.w	r3, r7, #10
 8007570:	2202      	movs	r2, #2
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fd33 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800757a:	e032      	b.n	80075e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fcbd 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	75fb      	strb	r3, [r7, #23]
          break;
 8007588:	e02b      	b.n	80075e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b03      	cmp	r3, #3
 8007594:	d107      	bne.n	80075a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007596:	f107 030d 	add.w	r3, r7, #13
 800759a:	2201      	movs	r2, #1
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fd1e 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075a4:	e01d      	b.n	80075e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fca8 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 80075ae:	2303      	movs	r3, #3
 80075b0:	75fb      	strb	r3, [r7, #23]
          break;
 80075b2:	e016      	b.n	80075e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d00f      	beq.n	80075e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fc9b 	bl	8008efe <USBD_CtlError>
            ret = USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075cc:	e008      	b.n	80075e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fc94 	bl	8008efe <USBD_CtlError>
          ret = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	75fb      	strb	r3, [r7, #23]
          break;
 80075da:	e002      	b.n	80075e2 <USBD_CDC_Setup+0x19e>
          break;
 80075dc:	bf00      	nop
 80075de:	e008      	b.n	80075f2 <USBD_CDC_Setup+0x1ae>
          break;
 80075e0:	bf00      	nop
      }
      break;
 80075e2:	e006      	b.n	80075f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 fc89 	bl	8008efe <USBD_CtlError>
      ret = USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
      break;
 80075f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800760e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32b0      	adds	r2, #176	; 0xb0
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	e065      	b.n	80076f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	32b0      	adds	r2, #176	; 0xb0
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	f003 020f 	and.w	r2, r3, #15
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	3318      	adds	r3, #24
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02f      	beq.n	80076b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	f003 020f 	and.w	r2, r3, #15
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	3318      	adds	r3, #24
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	f003 010f 	and.w	r1, r3, #15
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	460b      	mov	r3, r1
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	440b      	add	r3, r1
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4403      	add	r3, r0
 8007678:	3348      	adds	r3, #72	; 0x48
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007686:	2b00      	cmp	r3, #0
 8007688:	d112      	bne.n	80076b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	f003 020f 	and.w	r2, r3, #15
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3318      	adds	r3, #24
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076a2:	78f9      	ldrb	r1, [r7, #3]
 80076a4:	2300      	movs	r3, #0
 80076a6:	2200      	movs	r2, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 f9a8 	bl	80099fe <USBD_LL_Transmit>
 80076ae:	e01f      	b.n	80076f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	; 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d010      	beq.n	80076f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	33b0      	adds	r3, #176	; 0xb0
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	32b0      	adds	r2, #176	; 0xb0
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	32b0      	adds	r2, #176	; 0xb0
 8007720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	e01a      	b.n	8007762 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f002 f9a6 	bl	8009a82 <USBD_LL_GetRxDataSize>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	33b0      	adds	r3, #176	; 0xb0
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800775c:	4611      	mov	r1, r2
 800775e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	32b0      	adds	r2, #176	; 0xb0
 800777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007780:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	e025      	b.n	80077d8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	33b0      	adds	r3, #176	; 0xb0
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01a      	beq.n	80077d6 <USBD_CDC_EP0_RxReady+0x6c>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077a6:	2bff      	cmp	r3, #255	; 0xff
 80077a8:	d015      	beq.n	80077d6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	33b0      	adds	r3, #176	; 0xb0
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ca:	b292      	uxth	r2, r2
 80077cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	22ff      	movs	r2, #255	; 0xff
 80077d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077e8:	2182      	movs	r1, #130	; 0x82
 80077ea:	4818      	ldr	r0, [pc, #96]	; (800784c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077ec:	f000 fd4f 	bl	800828e <USBD_GetEpDesc>
 80077f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077f2:	2101      	movs	r1, #1
 80077f4:	4815      	ldr	r0, [pc, #84]	; (800784c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077f6:	f000 fd4a 	bl	800828e <USBD_GetEpDesc>
 80077fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077fc:	2181      	movs	r1, #129	; 0x81
 80077fe:	4813      	ldr	r0, [pc, #76]	; (800784c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007800:	f000 fd45 	bl	800828e <USBD_GetEpDesc>
 8007804:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2210      	movs	r2, #16
 8007810:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d006      	beq.n	8007826 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2200      	movs	r2, #0
 800781c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007820:	711a      	strb	r2, [r3, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d006      	beq.n	800783a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007834:	711a      	strb	r2, [r3, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2243      	movs	r2, #67	; 0x43
 800783e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000078 	.word	0x20000078

08007850 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007858:	2182      	movs	r1, #130	; 0x82
 800785a:	4818      	ldr	r0, [pc, #96]	; (80078bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800785c:	f000 fd17 	bl	800828e <USBD_GetEpDesc>
 8007860:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007862:	2101      	movs	r1, #1
 8007864:	4815      	ldr	r0, [pc, #84]	; (80078bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007866:	f000 fd12 	bl	800828e <USBD_GetEpDesc>
 800786a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800786c:	2181      	movs	r1, #129	; 0x81
 800786e:	4813      	ldr	r0, [pc, #76]	; (80078bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007870:	f000 fd0d 	bl	800828e <USBD_GetEpDesc>
 8007874:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2210      	movs	r2, #16
 8007880:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2200      	movs	r2, #0
 800788c:	711a      	strb	r2, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f042 0202 	orr.w	r2, r2, #2
 8007894:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	711a      	strb	r2, [r3, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f042 0202 	orr.w	r2, r2, #2
 80078a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2243      	movs	r2, #67	; 0x43
 80078ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078b0:	4b02      	ldr	r3, [pc, #8]	; (80078bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000078 	.word	0x20000078

080078c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078c8:	2182      	movs	r1, #130	; 0x82
 80078ca:	4818      	ldr	r0, [pc, #96]	; (800792c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078cc:	f000 fcdf 	bl	800828e <USBD_GetEpDesc>
 80078d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078d2:	2101      	movs	r1, #1
 80078d4:	4815      	ldr	r0, [pc, #84]	; (800792c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078d6:	f000 fcda 	bl	800828e <USBD_GetEpDesc>
 80078da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078dc:	2181      	movs	r1, #129	; 0x81
 80078de:	4813      	ldr	r0, [pc, #76]	; (800792c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078e0:	f000 fcd5 	bl	800828e <USBD_GetEpDesc>
 80078e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2210      	movs	r2, #16
 80078f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007900:	711a      	strb	r2, [r3, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	711a      	strb	r2, [r3, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2243      	movs	r2, #67	; 0x43
 800791e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000078 	.word	0x20000078

08007930 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	220a      	movs	r2, #10
 800793c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20000034 	.word	0x20000034

08007950 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	e009      	b.n	8007978 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	33b0      	adds	r3, #176	; 0xb0
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	32b0      	adds	r2, #176	; 0xb0
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e008      	b.n	80079bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	32b0      	adds	r2, #176	; 0xb0
 80079dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e004      	b.n	80079f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32b0      	adds	r2, #176	; 0xb0
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	32b0      	adds	r2, #176	; 0xb0
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e025      	b.n	8007a82 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d11f      	bne.n	8007a80 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a48:	4b10      	ldr	r3, [pc, #64]	; (8007a8c <USBD_CDC_TransmitPacket+0x88>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4403      	add	r3, r0
 8007a62:	3318      	adds	r3, #24
 8007a64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <USBD_CDC_TransmitPacket+0x88>)
 8007a68:	7819      	ldrb	r1, [r3, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 ffc1 	bl	80099fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200000bb 	.word	0x200000bb

08007a90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32b0      	adds	r2, #176	; 0xb0
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32b0      	adds	r2, #176	; 0xb0
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e018      	b.n	8007af0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7c1b      	ldrb	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <USBD_CDC_ReceivePacket+0x68>)
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 ffb3 	bl	8009a40 <USBD_LL_PrepareReceive>
 8007ada:	e008      	b.n	8007aee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <USBD_CDC_ReceivePacket+0x68>)
 8007ade:	7819      	ldrb	r1, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae6:	2340      	movs	r3, #64	; 0x40
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ffa9 	bl	8009a40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200000bc 	.word	0x200000bc

08007afc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e01f      	b.n	8007b54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	79fa      	ldrb	r2, [r7, #7]
 8007b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f001 fe23 	bl	8009794 <USBD_LL_Init>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e025      	b.n	8007bc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00f      	beq.n	8007bb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 020e 	add.w	r2, r7, #14
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	4602      	mov	r2, r0
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 fe2b 	bl	800982c <USBD_LL_Start>
 8007bd6:	4603      	mov	r3, r0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 f908 	bl	8008e8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d01a      	beq.n	8007cd4 <USBD_LL_SetupStage+0x72>
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d822      	bhi.n	8007ce8 <USBD_LL_SetupStage+0x86>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <USBD_LL_SetupStage+0x4a>
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d00a      	beq.n	8007cc0 <USBD_LL_SetupStage+0x5e>
 8007caa:	e01d      	b.n	8007ce8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fb5f 	bl	8008378 <USBD_StdDevReq>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e020      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fbc7 	bl	800845c <USBD_StdItfReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e016      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fc29 	bl	8008534 <USBD_StdEPReq>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e00c      	b.n	8007d02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 fdf8 	bl	80098ec <USBD_LL_StallEP>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	bf00      	nop
  }

  return ret;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	460b      	mov	r3, r1
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d16e      	bne.n	8007e02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	f040 8098 	bne.w	8007e68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d913      	bls.n	8007d6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf28      	it	cs
 8007d5e:	4613      	movcs	r3, r2
 8007d60:	461a      	mov	r2, r3
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 f984 	bl	8009072 <USBD_CtlContinueRx>
 8007d6a:	e07d      	b.n	8007e68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d72:	f003 031f 	and.w	r3, r3, #31
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d014      	beq.n	8007da4 <USBD_LL_DataOutStage+0x98>
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d81d      	bhi.n	8007dba <USBD_LL_DataOutStage+0xae>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <USBD_LL_DataOutStage+0x7c>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d003      	beq.n	8007d8e <USBD_LL_DataOutStage+0x82>
 8007d86:	e018      	b.n	8007dba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d8c:	e018      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fa5e 	bl	800825a <USBD_CoreFindIF>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75bb      	strb	r3, [r7, #22]
            break;
 8007da2:	e00d      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fa60 	bl	8008274 <USBD_CoreFindEP>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75bb      	strb	r3, [r7, #22]
            break;
 8007db8:	e002      	b.n	8007dc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75bb      	strb	r3, [r7, #22]
            break;
 8007dbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dc0:	7dbb      	ldrb	r3, [r7, #22]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d119      	bne.n	8007dfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d113      	bne.n	8007dfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dd2:	7dba      	ldrb	r2, [r7, #22]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	32ae      	adds	r2, #174	; 0xae
 8007dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007de2:	7dba      	ldrb	r2, [r7, #22]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dea:	7dba      	ldrb	r2, [r7, #22]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	32ae      	adds	r2, #174	; 0xae
 8007df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 f94a 	bl	8009094 <USBD_CtlSendStatus>
 8007e00:	e032      	b.n	8007e68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fa31 	bl	8008274 <USBD_CoreFindEP>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	2bff      	cmp	r3, #255	; 0xff
 8007e1a:	d025      	beq.n	8007e68 <USBD_LL_DataOutStage+0x15c>
 8007e1c:	7dbb      	ldrb	r3, [r7, #22]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d122      	bne.n	8007e68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d117      	bne.n	8007e5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e2e:	7dba      	ldrb	r2, [r7, #22]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	32ae      	adds	r2, #174	; 0xae
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e3e:	7dba      	ldrb	r2, [r7, #22]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e46:	7dba      	ldrb	r2, [r7, #22]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	32ae      	adds	r2, #174	; 0xae
 8007e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	7afa      	ldrb	r2, [r7, #11]
 8007e54:	4611      	mov	r1, r2
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	4798      	blx	r3
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	e000      	b.n	8007e6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d16f      	bne.n	8007f66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3314      	adds	r3, #20
 8007e8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d15a      	bne.n	8007f4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d914      	bls.n	8007ecc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f001 f8ac 	bl	8009016 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f001 fdbb 	bl	8009a40 <USBD_LL_PrepareReceive>
 8007eca:	e03f      	b.n	8007f4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d11c      	bne.n	8007f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d316      	bcc.n	8007f12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d20f      	bcs.n	8007f12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f001 f88d 	bl	8009016 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f04:	2300      	movs	r3, #0
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 fd98 	bl	8009a40 <USBD_LL_PrepareReceive>
 8007f10:	e01c      	b.n	8007f4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d10f      	bne.n	8007f3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 fcd3 	bl	80098ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 f8b7 	bl	80090ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d03a      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fe42 	bl	8007be0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f64:	e032      	b.n	8007fcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f97f 	bl	8008274 <USBD_CoreFindEP>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	2bff      	cmp	r3, #255	; 0xff
 8007f7e:	d025      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d122      	bne.n	8007fcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d11c      	bne.n	8007fcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f92:	7dfa      	ldrb	r2, [r7, #23]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	32ae      	adds	r2, #174	; 0xae
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d014      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fa2:	7dfa      	ldrb	r2, [r7, #23]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007faa:	7dfa      	ldrb	r2, [r7, #23]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	32ae      	adds	r2, #174	; 0xae
 8007fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	7afa      	ldrb	r2, [r7, #11]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fc2:	7dbb      	ldrb	r3, [r7, #22]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fc8:	7dbb      	ldrb	r3, [r7, #22]
 8007fca:	e000      	b.n	8007fce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d014      	beq.n	800803c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	4611      	mov	r1, r2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2200      	movs	r2, #0
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fc0d 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2240      	movs	r2, #64	; 0x40
 8008054:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	2200      	movs	r2, #0
 800805c:	2180      	movs	r1, #128	; 0x80
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 fbff 	bl	8009862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	621a      	str	r2, [r3, #32]

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2204      	movs	r2, #4
 80080b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d106      	bne.n	80080e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d110      	bne.n	800812c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32ae      	adds	r2, #174	; 0xae
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e01c      	b.n	8008192 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d115      	bne.n	8008190 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	; 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	78fa      	ldrb	r2, [r7, #3]
 800818a:	4611      	mov	r1, r2
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	32ae      	adds	r2, #174	; 0xae
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e01c      	b.n	80081f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d115      	bne.n	80081f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	; 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	; 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6852      	ldr	r2, [r2, #4]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008266:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008280:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d920      	bls.n	80082f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082be:	e013      	b.n	80082e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082c0:	f107 030a 	add.w	r3, r7, #10
 80082c4:	4619      	mov	r1, r3
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	f000 f81b 	bl	8008302 <USBD_GetNextDesc>
 80082cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	d108      	bne.n	80082e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	789b      	ldrb	r3, [r3, #2]
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d008      	beq.n	80082f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	885b      	ldrh	r3, [r3, #2]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	897b      	ldrh	r3, [r7, #10]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d8e5      	bhi.n	80082c0 <USBD_GetEpDesc+0x32>
 80082f4:	e000      	b.n	80082f8 <USBD_GetEpDesc+0x6a>
          break;
 80082f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082f8:	693b      	ldr	r3, [r7, #16]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	881a      	ldrh	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	4413      	add	r3, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3301      	adds	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800835a:	8a3b      	ldrh	r3, [r7, #16]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	b21a      	sxth	r2, r3
 8008360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008364:	4313      	orrs	r3, r2
 8008366:	b21b      	sxth	r3, r3
 8008368:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800836a:	89fb      	ldrh	r3, [r7, #14]
}
 800836c:	4618      	mov	r0, r3
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d005      	beq.n	800839e <USBD_StdDevReq+0x26>
 8008392:	2b40      	cmp	r3, #64	; 0x40
 8008394:	d857      	bhi.n	8008446 <USBD_StdDevReq+0xce>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00f      	beq.n	80083ba <USBD_StdDevReq+0x42>
 800839a:	2b20      	cmp	r3, #32
 800839c:	d153      	bne.n	8008446 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]
      break;
 80083b8:	e04a      	b.n	8008450 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d83b      	bhi.n	800843a <USBD_StdDevReq+0xc2>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <USBD_StdDevReq+0x50>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008431 	.word	0x08008431
 80083d0:	0800843b 	.word	0x0800843b
 80083d4:	08008427 	.word	0x08008427
 80083d8:	0800843b 	.word	0x0800843b
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	0800843b 	.word	0x0800843b
 80083e8:	08008413 	.word	0x08008413
 80083ec:	08008405 	.word	0x08008405
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa3c 	bl	8008870 <USBD_GetDescriptor>
          break;
 80083f8:	e024      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fba1 	bl	8008b44 <USBD_SetAddress>
          break;
 8008402:	e01f      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbe0 	bl	8008bcc <USBD_SetConfig>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
          break;
 8008410:	e018      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc83 	bl	8008d20 <USBD_GetConfig>
          break;
 800841a:	e013      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fcb4 	bl	8008d8c <USBD_GetStatus>
          break;
 8008424:	e00e      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fce3 	bl	8008df4 <USBD_SetFeature>
          break;
 800842e:	e009      	b.n	8008444 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fd07 	bl	8008e46 <USBD_ClrFeature>
          break;
 8008438:	e004      	b.n	8008444 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd5e 	bl	8008efe <USBD_CtlError>
          break;
 8008442:	bf00      	nop
      }
      break;
 8008444:	e004      	b.n	8008450 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fd58 	bl	8008efe <USBD_CtlError>
      break;
 800844e:	bf00      	nop
  }

  return ret;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop

0800845c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d005      	beq.n	8008482 <USBD_StdItfReq+0x26>
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d852      	bhi.n	8008520 <USBD_StdItfReq+0xc4>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <USBD_StdItfReq+0x26>
 800847e:	2b20      	cmp	r3, #32
 8008480:	d14e      	bne.n	8008520 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	2b02      	cmp	r3, #2
 800848e:	d840      	bhi.n	8008512 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	889b      	ldrh	r3, [r3, #4]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	d836      	bhi.n	8008508 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fed9 	bl	800825a <USBD_CoreFindIF>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2bff      	cmp	r3, #255	; 0xff
 80084b0:	d01d      	beq.n	80084ee <USBD_StdItfReq+0x92>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084b8:	7bba      	ldrb	r2, [r7, #14]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	; 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084c8:	7bba      	ldrb	r2, [r7, #14]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084d0:	7bba      	ldrb	r2, [r7, #14]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32ae      	adds	r2, #174	; 0xae
 80084d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084e6:	e004      	b.n	80084f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084ec:	e001      	b.n	80084f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <USBD_StdItfReq+0xc0>
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10d      	bne.n	800851c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fdc7 	bl	8009094 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008506:	e009      	b.n	800851c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fcf7 	bl	8008efe <USBD_CtlError>
          break;
 8008510:	e004      	b.n	800851c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fcf2 	bl	8008efe <USBD_CtlError>
          break;
 800851a:	e000      	b.n	800851e <USBD_StdItfReq+0xc2>
          break;
 800851c:	bf00      	nop
      }
      break;
 800851e:	e004      	b.n	800852a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fceb 	bl	8008efe <USBD_CtlError>
      break;
 8008528:	bf00      	nop
  }

  return ret;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	889b      	ldrh	r3, [r3, #4]
 8008546:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d007      	beq.n	8008564 <USBD_StdEPReq+0x30>
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	f200 817f 	bhi.w	8008858 <USBD_StdEPReq+0x324>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d02a      	beq.n	80085b4 <USBD_StdEPReq+0x80>
 800855e:	2b20      	cmp	r3, #32
 8008560:	f040 817a 	bne.w	8008858 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fe83 	bl	8008274 <USBD_CoreFindEP>
 800856e:	4603      	mov	r3, r0
 8008570:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2bff      	cmp	r3, #255	; 0xff
 8008576:	f000 8174 	beq.w	8008862 <USBD_StdEPReq+0x32e>
 800857a:	7b7b      	ldrb	r3, [r7, #13]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 8170 	bne.w	8008862 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008582:	7b7a      	ldrb	r2, [r7, #13]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800858a:	7b7a      	ldrb	r2, [r7, #13]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	32ae      	adds	r2, #174	; 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8163 	beq.w	8008862 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800859c:	7b7a      	ldrb	r2, [r7, #13]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32ae      	adds	r2, #174	; 0xae
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085b2:	e156      	b.n	8008862 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d008      	beq.n	80085ce <USBD_StdEPReq+0x9a>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	f300 8145 	bgt.w	800884c <USBD_StdEPReq+0x318>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 809b 	beq.w	80086fe <USBD_StdEPReq+0x1ca>
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d03c      	beq.n	8008646 <USBD_StdEPReq+0x112>
 80085cc:	e13e      	b.n	800884c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d002      	beq.n	80085e0 <USBD_StdEPReq+0xac>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d016      	beq.n	800860c <USBD_StdEPReq+0xd8>
 80085de:	e02c      	b.n	800863a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <USBD_StdEPReq+0xce>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d00a      	beq.n	8008602 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f97b 	bl	80098ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f977 	bl	80098ec <USBD_LL_StallEP>
 80085fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008600:	e020      	b.n	8008644 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc7a 	bl	8008efe <USBD_CtlError>
              break;
 800860a:	e01b      	b.n	8008644 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10e      	bne.n	8008632 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <USBD_StdEPReq+0xfe>
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d008      	beq.n	8008632 <USBD_StdEPReq+0xfe>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d104      	bne.n	8008632 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 f95d 	bl	80098ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fd2e 	bl	8009094 <USBD_CtlSendStatus>

              break;
 8008638:	e004      	b.n	8008644 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc5e 	bl	8008efe <USBD_CtlError>
              break;
 8008642:	bf00      	nop
          }
          break;
 8008644:	e107      	b.n	8008856 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d002      	beq.n	8008658 <USBD_StdEPReq+0x124>
 8008652:	2b03      	cmp	r3, #3
 8008654:	d016      	beq.n	8008684 <USBD_StdEPReq+0x150>
 8008656:	e04b      	b.n	80086f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <USBD_StdEPReq+0x146>
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d00a      	beq.n	800867a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f93f 	bl	80098ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800866e:	2180      	movs	r1, #128	; 0x80
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 f93b 	bl	80098ec <USBD_LL_StallEP>
 8008676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008678:	e040      	b.n	80086fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc3e 	bl	8008efe <USBD_CtlError>
              break;
 8008682:	e03b      	b.n	80086fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d136      	bne.n	80086fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 f945 	bl	800992a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fcf7 	bl	8009094 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff fde2 	bl	8008274 <USBD_CoreFindEP>
 80086b0:	4603      	mov	r3, r0
 80086b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b4:	7b7b      	ldrb	r3, [r7, #13]
 80086b6:	2bff      	cmp	r3, #255	; 0xff
 80086b8:	d01f      	beq.n	80086fa <USBD_StdEPReq+0x1c6>
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11c      	bne.n	80086fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086c0:	7b7a      	ldrb	r2, [r7, #13]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086c8:	7b7a      	ldrb	r2, [r7, #13]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d010      	beq.n	80086fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086d8:	7b7a      	ldrb	r2, [r7, #13]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32ae      	adds	r2, #174	; 0xae
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086ee:	e004      	b.n	80086fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc03 	bl	8008efe <USBD_CtlError>
              break;
 80086f8:	e000      	b.n	80086fc <USBD_StdEPReq+0x1c8>
              break;
 80086fa:	bf00      	nop
          }
          break;
 80086fc:	e0ab      	b.n	8008856 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USBD_StdEPReq+0x1dc>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d032      	beq.n	8008774 <USBD_StdEPReq+0x240>
 800870e:	e097      	b.n	8008840 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <USBD_StdEPReq+0x1f2>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d004      	beq.n	8008726 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbed 	bl	8008efe <USBD_CtlError>
                break;
 8008724:	e091      	b.n	800884a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	da0b      	bge.n	8008746 <USBD_StdEPReq+0x212>
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	3310      	adds	r3, #16
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	3304      	adds	r3, #4
 8008744:	e00b      	b.n	800875e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	3304      	adds	r3, #4
 800875e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2202      	movs	r2, #2
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc37 	bl	8008fe0 <USBD_CtlSendData>
              break;
 8008772:	e06a      	b.n	800884a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da11      	bge.n	80087a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 020f 	and.w	r2, r3, #15
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d117      	bne.n	80087c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbb0 	bl	8008efe <USBD_CtlError>
                  break;
 800879e:	e054      	b.n	800884a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 020f 	and.w	r2, r3, #15
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb9d 	bl	8008efe <USBD_CtlError>
                  break;
 80087c4:	e041      	b.n	800884a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da0b      	bge.n	80087e6 <USBD_StdEPReq+0x2b2>
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3310      	adds	r3, #16
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	3304      	adds	r3, #4
 80087e4:	e00b      	b.n	80087fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4413      	add	r3, r2
 80087fc:	3304      	adds	r3, #4
 80087fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <USBD_StdEPReq+0x2d8>
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d103      	bne.n	8008814 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e00e      	b.n	8008832 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 f8a5 	bl	8009968 <USBD_LL_IsStallEP>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e002      	b.n	8008832 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2202      	movs	r2, #2
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fbd1 	bl	8008fe0 <USBD_CtlSendData>
              break;
 800883e:	e004      	b.n	800884a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb5b 	bl	8008efe <USBD_CtlError>
              break;
 8008848:	bf00      	nop
          }
          break;
 800884a:	e004      	b.n	8008856 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fb55 	bl	8008efe <USBD_CtlError>
          break;
 8008854:	bf00      	nop
      }
      break;
 8008856:	e005      	b.n	8008864 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fb4f 	bl	8008efe <USBD_CtlError>
      break;
 8008860:	e000      	b.n	8008864 <USBD_StdEPReq+0x330>
      break;
 8008862:	bf00      	nop
  }

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	2b06      	cmp	r3, #6
 8008892:	f200 8128 	bhi.w	8008ae6 <USBD_GetDescriptor+0x276>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <USBD_GetDescriptor+0x2c>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	08008911 	.word	0x08008911
 80088a8:	08008ae7 	.word	0x08008ae7
 80088ac:	08008ae7 	.word	0x08008ae7
 80088b0:	08008a87 	.word	0x08008a87
 80088b4:	08008ab3 	.word	0x08008ab3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
      break;
 80088ce:	e112      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c1b      	ldrb	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10d      	bne.n	80088f4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e0:	f107 0208 	add.w	r2, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	2202      	movs	r2, #2
 80088f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088f2:	e100      	b.n	8008af6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	f107 0208 	add.w	r2, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
      break;
 800890e:	e0f2      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	885b      	ldrh	r3, [r3, #2]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b05      	cmp	r3, #5
 8008918:	f200 80ac 	bhi.w	8008a74 <USBD_GetDescriptor+0x204>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <USBD_GetDescriptor+0xb4>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	0800893d 	.word	0x0800893d
 8008928:	08008971 	.word	0x08008971
 800892c:	080089a5 	.word	0x080089a5
 8008930:	080089d9 	.word	0x080089d9
 8008934:	08008a0d 	.word	0x08008a0d
 8008938:	08008a41 	.word	0x08008a41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e091      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 facb 	bl	8008efe <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e089      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e077      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fab1 	bl	8008efe <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e06f      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e05d      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa97 	bl	8008efe <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e055      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7c12      	ldrb	r2, [r2, #16]
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fa:	e043      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa7d 	bl	8008efe <USBD_CtlError>
            err++;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	3301      	adds	r3, #1
 8008a08:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0a:	e03b      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	7c12      	ldrb	r2, [r2, #16]
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2e:	e029      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa63 	bl	8008efe <USBD_CtlError>
            err++;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3e:	e021      	b.n	8008a84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	7c12      	ldrb	r2, [r2, #16]
 8008a58:	f107 0108 	add.w	r1, r7, #8
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
 8008a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a62:	e00f      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa49 	bl	8008efe <USBD_CtlError>
            err++;
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	72fb      	strb	r3, [r7, #11]
          break;
 8008a72:	e007      	b.n	8008a84 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa41 	bl	8008efe <USBD_CtlError>
          err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a82:	bf00      	nop
      }
      break;
 8008a84:	e037      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7c1b      	ldrb	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	f107 0208 	add.w	r2, r7, #8
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4798      	blx	r3
 8008a9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa0:	e029      	b.n	8008af6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa2a 	bl	8008efe <USBD_CtlError>
        err++;
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	3301      	adds	r3, #1
 8008aae:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab0:	e021      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7c1b      	ldrb	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10d      	bne.n	8008ad6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	f107 0208 	add.w	r2, r7, #8
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad4:	e00f      	b.n	8008af6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa10 	bl	8008efe <USBD_CtlError>
        err++;
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae4:	e007      	b.n	8008af6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa08 	bl	8008efe <USBD_CtlError>
      err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
      break;
 8008af4:	bf00      	nop
  }

  if (err != 0U)
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11e      	bne.n	8008b3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	88db      	ldrh	r3, [r3, #6]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d016      	beq.n	8008b32 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b04:	893b      	ldrh	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00e      	beq.n	8008b28 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88da      	ldrh	r2, [r3, #6]
 8008b0e:	893b      	ldrh	r3, [r7, #8]
 8008b10:	4293      	cmp	r3, r2
 8008b12:	bf28      	it	cs
 8008b14:	4613      	movcs	r3, r2
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b1a:	893b      	ldrh	r3, [r7, #8]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa5d 	bl	8008fe0 <USBD_CtlSendData>
 8008b26:	e009      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f9e7 	bl	8008efe <USBD_CtlError>
 8008b30:	e004      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 faae 	bl	8009094 <USBD_CtlSendStatus>
 8008b38:	e000      	b.n	8008b3c <USBD_GetDescriptor+0x2cc>
    return;
 8008b3a:	bf00      	nop
  }
}
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop

08008b44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889b      	ldrh	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d131      	bne.n	8008bba <USBD_SetAddress+0x76>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d12d      	bne.n	8008bba <USBD_SetAddress+0x76>
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	2b7f      	cmp	r3, #127	; 0x7f
 8008b64:	d829      	bhi.n	8008bba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d104      	bne.n	8008b88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9bc 	bl	8008efe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	e01d      	b.n	8008bc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7bfa      	ldrb	r2, [r7, #15]
 8008b8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 ff13 	bl	80099c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa7a 	bl	8009094 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	e009      	b.n	8008bc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb8:	e004      	b.n	8008bc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f99e 	bl	8008efe <USBD_CtlError>
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	4b4e      	ldr	r3, [pc, #312]	; (8008d1c <USBD_SetConfig+0x150>)
 8008be2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008be4:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <USBD_SetConfig+0x150>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d905      	bls.n	8008bf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f985 	bl	8008efe <USBD_CtlError>
    return USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e08c      	b.n	8008d12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d002      	beq.n	8008c0a <USBD_SetConfig+0x3e>
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d029      	beq.n	8008c5c <USBD_SetConfig+0x90>
 8008c08:	e075      	b.n	8008cf6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c0a:	4b44      	ldr	r3, [pc, #272]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c12:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fe ffe7 	bl	8007bf6 <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d008      	beq.n	8008c44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f962 	bl	8008efe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c42:	e065      	b.n	8008d10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa25 	bl	8009094 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c52:	e05d      	b.n	8008d10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa1d 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008c5a:	e059      	b.n	8008d10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c5c:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d112      	bne.n	8008c8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c6c:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe ffd6 	bl	8007c2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa06 	bl	8009094 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c88:	e042      	b.n	8008d10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <USBD_SetConfig+0x150>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d02a      	beq.n	8008cee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fe ffc4 	bl	8007c2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ca6:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <USBD_SetConfig+0x150>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <USBD_SetConfig+0x150>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fe ff9d 	bl	8007bf6 <USBD_SetClassConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00f      	beq.n	8008ce6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f918 	bl	8008efe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7fe ffa9 	bl	8007c2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ce4:	e014      	b.n	8008d10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f9d4 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008cec:	e010      	b.n	8008d10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f9d0 	bl	8009094 <USBD_CtlSendStatus>
      break;
 8008cf4:	e00c      	b.n	8008d10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f900 	bl	8008efe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <USBD_SetConfig+0x150>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fe ff92 	bl	8007c2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d0e:	bf00      	nop
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20009fcc 	.word	0x20009fcc

08008d20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d004      	beq.n	8008d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8e2 	bl	8008efe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d3a:	e023      	b.n	8008d84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	dc02      	bgt.n	8008d4e <USBD_GetConfig+0x2e>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dc03      	bgt.n	8008d54 <USBD_GetConfig+0x34>
 8008d4c:	e015      	b.n	8008d7a <USBD_GetConfig+0x5a>
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d00b      	beq.n	8008d6a <USBD_GetConfig+0x4a>
 8008d52:	e012      	b.n	8008d7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f93c 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d68:	e00c      	b.n	8008d84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f934 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d78:	e004      	b.n	8008d84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f8be 	bl	8008efe <USBD_CtlError>
        break;
 8008d82:	bf00      	nop
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d81e      	bhi.n	8008de2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	88db      	ldrh	r3, [r3, #6]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d004      	beq.n	8008db6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8a5 	bl	8008efe <USBD_CtlError>
        break;
 8008db4:	e01a      	b.n	8008dec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f043 0202 	orr.w	r2, r3, #2
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f900 	bl	8008fe0 <USBD_CtlSendData>
      break;
 8008de0:	e004      	b.n	8008dec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f88a 	bl	8008efe <USBD_CtlError>
      break;
 8008dea:	bf00      	nop
  }
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d107      	bne.n	8008e16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f940 	bl	8009094 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e14:	e013      	b.n	8008e3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	885b      	ldrh	r3, [r3, #2]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d10b      	bne.n	8008e36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	889b      	ldrh	r3, [r3, #4]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f930 	bl	8009094 <USBD_CtlSendStatus>
}
 8008e34:	e003      	b.n	8008e3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f860 	bl	8008efe <USBD_CtlError>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d80b      	bhi.n	8008e76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10c      	bne.n	8008e80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f910 	bl	8009094 <USBD_CtlSendStatus>
      }
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f840 	bl	8008efe <USBD_CtlError>
      break;
 8008e7e:	e000      	b.n	8008e82 <USBD_ClrFeature+0x3c>
      break;
 8008e80:	bf00      	nop
  }
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	781a      	ldrb	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff fa41 	bl	800833c <SWAPBYTE>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fa34 	bl	800833c <SWAPBYTE>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff fa27 	bl	800833c <SWAPBYTE>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	80da      	strh	r2, [r3, #6]
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fcee 	bl	80098ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f10:	2100      	movs	r1, #0
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fcea 	bl	80098ec <USBD_LL_StallEP>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d036      	beq.n	8008fa4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f000 f836 	bl	8008fac <USBD_GetLen>
 8008f40:	4603      	mov	r3, r0
 8008f42:	3301      	adds	r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	2203      	movs	r2, #3
 8008f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f70:	e013      	b.n	8008f9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	7812      	ldrb	r2, [r2, #0]
 8008f7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3301      	adds	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]
    idx++;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	3301      	adds	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	3301      	adds	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e7      	bne.n	8008f72 <USBD_GetString+0x52>
 8008fa2:	e000      	b.n	8008fa6 <USBD_GetString+0x86>
    return;
 8008fa4:	bf00      	nop
  }
}
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fbc:	e005      	b.n	8008fca <USBD_GetLen+0x1e>
  {
    len++;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f5      	bne.n	8008fbe <USBD_GetLen+0x12>
  }

  return len;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	2100      	movs	r1, #0
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fcf9 	bl	80099fe <USBD_LL_Transmit>

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	2100      	movs	r1, #0
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fce8 	bl	80099fe <USBD_LL_Transmit>

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2203      	movs	r2, #3
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fcec 	bl	8009a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	2100      	movs	r1, #0
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fcdb 	bl	8009a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2204      	movs	r2, #4
 80090a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a4:	2300      	movs	r3, #0
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fca7 	bl	80099fe <USBD_LL_Transmit>

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2205      	movs	r2, #5
 80090c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fcb5 	bl	8009a40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4912      	ldr	r1, [pc, #72]	; (8009130 <MX_USB_DEVICE_Init+0x50>)
 80090e8:	4812      	ldr	r0, [pc, #72]	; (8009134 <MX_USB_DEVICE_Init+0x54>)
 80090ea:	f7fe fd07 	bl	8007afc <USBD_Init>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090f4:	f7f8 f8c6 	bl	8001284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090f8:	490f      	ldr	r1, [pc, #60]	; (8009138 <MX_USB_DEVICE_Init+0x58>)
 80090fa:	480e      	ldr	r0, [pc, #56]	; (8009134 <MX_USB_DEVICE_Init+0x54>)
 80090fc:	f7fe fd2e 	bl	8007b5c <USBD_RegisterClass>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009106:	f7f8 f8bd 	bl	8001284 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800910a:	490c      	ldr	r1, [pc, #48]	; (800913c <MX_USB_DEVICE_Init+0x5c>)
 800910c:	4809      	ldr	r0, [pc, #36]	; (8009134 <MX_USB_DEVICE_Init+0x54>)
 800910e:	f7fe fc1f 	bl	8007950 <USBD_CDC_RegisterInterface>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009118:	f7f8 f8b4 	bl	8001284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800911c:	4805      	ldr	r0, [pc, #20]	; (8009134 <MX_USB_DEVICE_Init+0x54>)
 800911e:	f7fe fd53 	bl	8007bc8 <USBD_Start>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009128:	f7f8 f8ac 	bl	8001284 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800912c:	bf00      	nop
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200000d4 	.word	0x200000d4
 8009134:	20009fd0 	.word	0x20009fd0
 8009138:	20000040 	.word	0x20000040
 800913c:	200000c0 	.word	0x200000c0

08009140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009144:	2200      	movs	r2, #0
 8009146:	4905      	ldr	r1, [pc, #20]	; (800915c <CDC_Init_FS+0x1c>)
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <CDC_Init_FS+0x20>)
 800914a:	f7fe fc1b 	bl	8007984 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800914e:	4905      	ldr	r1, [pc, #20]	; (8009164 <CDC_Init_FS+0x24>)
 8009150:	4803      	ldr	r0, [pc, #12]	; (8009160 <CDC_Init_FS+0x20>)
 8009152:	f7fe fc39 	bl	80079c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009158:	4618      	mov	r0, r3
 800915a:	bd80      	pop	{r7, pc}
 800915c:	2000a6ac 	.word	0x2000a6ac
 8009160:	20009fd0 	.word	0x20009fd0
 8009164:	2000a2ac 	.word	0x2000a2ac

08009168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800916c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800916e:	4618      	mov	r0, r3
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	6039      	str	r1, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
 8009184:	4613      	mov	r3, r2
 8009186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b23      	cmp	r3, #35	; 0x23
 800918c:	d84a      	bhi.n	8009224 <CDC_Control_FS+0xac>
 800918e:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <CDC_Control_FS+0x1c>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	08009225 	.word	0x08009225
 8009198:	08009225 	.word	0x08009225
 800919c:	08009225 	.word	0x08009225
 80091a0:	08009225 	.word	0x08009225
 80091a4:	08009225 	.word	0x08009225
 80091a8:	08009225 	.word	0x08009225
 80091ac:	08009225 	.word	0x08009225
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009225 	.word	0x08009225
 80091b8:	08009225 	.word	0x08009225
 80091bc:	08009225 	.word	0x08009225
 80091c0:	08009225 	.word	0x08009225
 80091c4:	08009225 	.word	0x08009225
 80091c8:	08009225 	.word	0x08009225
 80091cc:	08009225 	.word	0x08009225
 80091d0:	08009225 	.word	0x08009225
 80091d4:	08009225 	.word	0x08009225
 80091d8:	08009225 	.word	0x08009225
 80091dc:	08009225 	.word	0x08009225
 80091e0:	08009225 	.word	0x08009225
 80091e4:	08009225 	.word	0x08009225
 80091e8:	08009225 	.word	0x08009225
 80091ec:	08009225 	.word	0x08009225
 80091f0:	08009225 	.word	0x08009225
 80091f4:	08009225 	.word	0x08009225
 80091f8:	08009225 	.word	0x08009225
 80091fc:	08009225 	.word	0x08009225
 8009200:	08009225 	.word	0x08009225
 8009204:	08009225 	.word	0x08009225
 8009208:	08009225 	.word	0x08009225
 800920c:	08009225 	.word	0x08009225
 8009210:	08009225 	.word	0x08009225
 8009214:	08009225 	.word	0x08009225
 8009218:	08009225 	.word	0x08009225
 800921c:	08009225 	.word	0x08009225
 8009220:	08009225 	.word	0x08009225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009224:	bf00      	nop
  }

  return (USBD_OK);
 8009226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	480f      	ldr	r0, [pc, #60]	; (8009280 <CDC_Receive_FS+0x4c>)
 8009242:	f7fe fbc1 	bl	80079c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009246:	480e      	ldr	r0, [pc, #56]	; (8009280 <CDC_Receive_FS+0x4c>)
 8009248:	f7fe fc22 	bl	8007a90 <USBD_CDC_ReceivePacket>

  	memset (usb_rx_buffer, '\0', 64);  // clear the buffer
 800924c:	2240      	movs	r2, #64	; 0x40
 800924e:	2100      	movs	r1, #0
 8009250:	480c      	ldr	r0, [pc, #48]	; (8009284 <CDC_Receive_FS+0x50>)
 8009252:	f000 fc8d 	bl	8009b70 <memset>
    uint32_t len = (uint32_t)*Len;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
    memcpy(usb_rx_buffer, Buf, len);  // copy the data to the buffer
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4808      	ldr	r0, [pc, #32]	; (8009284 <CDC_Receive_FS+0x50>)
 8009262:	f000 fcb9 	bl	8009bd8 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	2100      	movs	r1, #0
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fc80 	bl	8009b70 <memset>

    flag_usbrx = 1;
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <CDC_Receive_FS+0x54>)
 8009272:	2201      	movs	r2, #1
 8009274:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8009276:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20009fd0 	.word	0x20009fd0
 8009284:	200002cc 	.word	0x200002cc
 8009288:	2000030c 	.word	0x2000030c

0800928c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <CDC_Transmit_FS+0x48>)
 800929e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e00b      	b.n	80092ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092b2:	887b      	ldrh	r3, [r7, #2]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4806      	ldr	r0, [pc, #24]	; (80092d4 <CDC_Transmit_FS+0x48>)
 80092ba:	f7fe fb63 	bl	8007984 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092be:	4805      	ldr	r0, [pc, #20]	; (80092d4 <CDC_Transmit_FS+0x48>)
 80092c0:	f7fe fba0 	bl	8007a04 <USBD_CDC_TransmitPacket>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20009fd0 	.word	0x20009fd0

080092d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2212      	movs	r2, #18
 800930c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800930e:	4b03      	ldr	r3, [pc, #12]	; (800931c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	200000f0 	.word	0x200000f0

08009320 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2204      	movs	r2, #4
 8009330:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009332:	4b03      	ldr	r3, [pc, #12]	; (8009340 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000104 	.word	0x20000104

08009344 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	6039      	str	r1, [r7, #0]
 800934e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4907      	ldr	r1, [pc, #28]	; (8009378 <USBD_FS_ProductStrDescriptor+0x34>)
 800935a:	4808      	ldr	r0, [pc, #32]	; (800937c <USBD_FS_ProductStrDescriptor+0x38>)
 800935c:	f7ff fde0 	bl	8008f20 <USBD_GetString>
 8009360:	e004      	b.n	800936c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4904      	ldr	r1, [pc, #16]	; (8009378 <USBD_FS_ProductStrDescriptor+0x34>)
 8009366:	4805      	ldr	r0, [pc, #20]	; (800937c <USBD_FS_ProductStrDescriptor+0x38>)
 8009368:	f7ff fdda 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2000aaac 	.word	0x2000aaac
 800937c:	0800a4b8 	.word	0x0800a4b8

08009380 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	4904      	ldr	r1, [pc, #16]	; (80093a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009390:	4804      	ldr	r0, [pc, #16]	; (80093a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009392:	f7ff fdc5 	bl	8008f20 <USBD_GetString>
  return USBD_StrDesc;
 8009396:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	2000aaac 	.word	0x2000aaac
 80093a4:	0800a4d0 	.word	0x0800a4d0

080093a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	221a      	movs	r2, #26
 80093b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ba:	f000 f843 	bl	8009444 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093be:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000108 	.word	0x20000108

080093cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	6039      	str	r1, [r7, #0]
 80093d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d105      	bne.n	80093ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4907      	ldr	r1, [pc, #28]	; (8009400 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093e2:	4808      	ldr	r0, [pc, #32]	; (8009404 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093e4:	f7ff fd9c 	bl	8008f20 <USBD_GetString>
 80093e8:	e004      	b.n	80093f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ee:	4805      	ldr	r0, [pc, #20]	; (8009404 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093f0:	f7ff fd96 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	2000aaac 	.word	0x2000aaac
 8009404:	0800a4e4 	.word	0x0800a4e4

08009408 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4907      	ldr	r1, [pc, #28]	; (800943c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800941e:	4808      	ldr	r0, [pc, #32]	; (8009440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009420:	f7ff fd7e 	bl	8008f20 <USBD_GetString>
 8009424:	e004      	b.n	8009430 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4904      	ldr	r1, [pc, #16]	; (800943c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800942a:	4805      	ldr	r0, [pc, #20]	; (8009440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800942c:	f7ff fd78 	bl	8008f20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000aaac 	.word	0x2000aaac
 8009440:	0800a4f0 	.word	0x0800a4f0

08009444 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <Get_SerialNum+0x44>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <Get_SerialNum+0x48>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009456:	4b0e      	ldr	r3, [pc, #56]	; (8009490 <Get_SerialNum+0x4c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800946a:	2208      	movs	r2, #8
 800946c:	4909      	ldr	r1, [pc, #36]	; (8009494 <Get_SerialNum+0x50>)
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 f814 	bl	800949c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009474:	2204      	movs	r2, #4
 8009476:	4908      	ldr	r1, [pc, #32]	; (8009498 <Get_SerialNum+0x54>)
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f000 f80f 	bl	800949c <IntToUnicode>
  }
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	1fff7a10 	.word	0x1fff7a10
 800948c:	1fff7a14 	.word	0x1fff7a14
 8009490:	1fff7a18 	.word	0x1fff7a18
 8009494:	2000010a 	.word	0x2000010a
 8009498:	2000011a 	.word	0x2000011a

0800949c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]
 80094b2:	e027      	b.n	8009504 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	2b09      	cmp	r3, #9
 80094ba:	d80b      	bhi.n	80094d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	0f1b      	lsrs	r3, r3, #28
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4619      	mov	r1, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	440b      	add	r3, r1
 80094cc:	3230      	adds	r2, #48	; 0x30
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	e00a      	b.n	80094ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	0f1b      	lsrs	r3, r3, #28
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	4619      	mov	r1, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	440b      	add	r3, r1
 80094e4:	3237      	adds	r2, #55	; 0x37
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	3301      	adds	r3, #1
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	4413      	add	r3, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	3301      	adds	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
 8009504:	7dfa      	ldrb	r2, [r7, #23]
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	429a      	cmp	r2, r3
 800950a:	d3d3      	bcc.n	80094b4 <IntToUnicode+0x18>
  }
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	371c      	adds	r7, #28
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	; 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	609a      	str	r2, [r3, #8]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800953c:	d13a      	bne.n	80095b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	4b1e      	ldr	r3, [pc, #120]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 8009548:	f043 0301 	orr.w	r3, r3, #1
 800954c:	6313      	str	r3, [r2, #48]	; 0x30
 800954e:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	613b      	str	r3, [r7, #16]
 8009558:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800955a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800955e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009560:	2302      	movs	r3, #2
 8009562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009568:	2303      	movs	r3, #3
 800956a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800956c:	230a      	movs	r3, #10
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	4619      	mov	r1, r3
 8009576:	4812      	ldr	r0, [pc, #72]	; (80095c0 <HAL_PCD_MspInit+0xa4>)
 8009578:	f7f9 fa88 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 800957e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009580:	4a0e      	ldr	r2, [pc, #56]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	6353      	str	r3, [r2, #52]	; 0x34
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 800958e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009590:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 8009592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009596:	6453      	str	r3, [r2, #68]	; 0x44
 8009598:	4b08      	ldr	r3, [pc, #32]	; (80095bc <HAL_PCD_MspInit+0xa0>)
 800959a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095a4:	2200      	movs	r2, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	2043      	movs	r0, #67	; 0x43
 80095aa:	f7f8 fec2 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095ae:	2043      	movs	r0, #67	; 0x43
 80095b0:	f7f8 fedb 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095b4:	bf00      	nop
 80095b6:	3728      	adds	r7, #40	; 0x28
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	40023800 	.word	0x40023800
 80095c0:	40020000 	.word	0x40020000

080095c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fb41 	bl	8007c62 <USBD_LL_SetupStage>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	4619      	mov	r1, r3
 8009612:	f7fe fb7b 	bl	8007d0c <USBD_LL_DataOutStage>
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	4613      	mov	r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	334c      	adds	r3, #76	; 0x4c
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	4619      	mov	r1, r3
 8009646:	f7fe fc14 	bl	8007e72 <USBD_LL_DataInStage>
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fd48 	bl	80080f6 <USBD_LL_SOF>
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009676:	2301      	movs	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	2b02      	cmp	r3, #2
 8009680:	d001      	beq.n	8009686 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009682:	f7f7 fdff 	bl	8001284 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968c:	7bfa      	ldrb	r2, [r7, #15]
 800968e:	4611      	mov	r1, r2
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fcf2 	bl	800807a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe fc9a 	bl	8007fd6 <USBD_LL_Reset>
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fced 	bl	800809a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <HAL_PCD_SuspendCallback+0x48>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	4a03      	ldr	r2, [pc, #12]	; (80096f4 <HAL_PCD_SuspendCallback+0x48>)
 80096e6:	f043 0306 	orr.w	r3, r3, #6
 80096ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	e000ed00 	.word	0xe000ed00

080096f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fcdd 	bl	80080c6 <USBD_LL_Resume>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fd35 	bl	800819a <USBD_LL_IsoOUTIncomplete>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	4611      	mov	r1, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fcf1 	bl	8008136 <USBD_LL_IsoINIncomplete>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fd47 	bl	80081fe <USBD_LL_DevConnected>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fd44 	bl	8008214 <USBD_LL_DevDisconnected>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d13c      	bne.n	800981e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80097a4:	4a20      	ldr	r2, [pc, #128]	; (8009828 <USBD_LL_Init+0x94>)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a1e      	ldr	r2, [pc, #120]	; (8009828 <USBD_LL_Init+0x94>)
 80097b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097b4:	4b1c      	ldr	r3, [pc, #112]	; (8009828 <USBD_LL_Init+0x94>)
 80097b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097bc:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <USBD_LL_Init+0x94>)
 80097be:	2204      	movs	r2, #4
 80097c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097c2:	4b19      	ldr	r3, [pc, #100]	; (8009828 <USBD_LL_Init+0x94>)
 80097c4:	2202      	movs	r2, #2
 80097c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <USBD_LL_Init+0x94>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ce:	4b16      	ldr	r3, [pc, #88]	; (8009828 <USBD_LL_Init+0x94>)
 80097d0:	2202      	movs	r2, #2
 80097d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097d4:	4b14      	ldr	r3, [pc, #80]	; (8009828 <USBD_LL_Init+0x94>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <USBD_LL_Init+0x94>)
 80097dc:	2200      	movs	r2, #0
 80097de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <USBD_LL_Init+0x94>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <USBD_LL_Init+0x94>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <USBD_LL_Init+0x94>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097f2:	480d      	ldr	r0, [pc, #52]	; (8009828 <USBD_LL_Init+0x94>)
 80097f4:	f7f9 fae7 	bl	8002dc6 <HAL_PCD_Init>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097fe:	f7f7 fd41 	bl	8001284 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	4808      	ldr	r0, [pc, #32]	; (8009828 <USBD_LL_Init+0x94>)
 8009806:	f7fa fd3e 	bl	8004286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	2100      	movs	r1, #0
 800980e:	4806      	ldr	r0, [pc, #24]	; (8009828 <USBD_LL_Init+0x94>)
 8009810:	f7fa fcf2 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009814:	2280      	movs	r2, #128	; 0x80
 8009816:	2101      	movs	r1, #1
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <USBD_LL_Init+0x94>)
 800981a:	f7fa fced 	bl	80041f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	2000acac 	.word	0x2000acac

0800982c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009842:	4618      	mov	r0, r3
 8009844:	f7f9 fbdc 	bl	8003000 <HAL_PCD_Start>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f942 	bl	8009ad8 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	461a      	mov	r2, r3
 8009870:	4603      	mov	r3, r0
 8009872:	70fb      	strb	r3, [r7, #3]
 8009874:	460b      	mov	r3, r1
 8009876:	70bb      	strb	r3, [r7, #2]
 8009878:	4613      	mov	r3, r2
 800987a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800988a:	78bb      	ldrb	r3, [r7, #2]
 800988c:	883a      	ldrh	r2, [r7, #0]
 800988e:	78f9      	ldrb	r1, [r7, #3]
 8009890:	f7fa f8ad 	bl	80039ee <HAL_PCD_EP_Open>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f91c 	bl	8009ad8 <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fa f8f6 	bl	8003abe <HAL_PCD_EP_Close>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f8fd 	bl	8009ad8 <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f7fa f9ce 	bl	8003cac <HAL_PCD_EP_SetStall>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f8de 	bl	8009ad8 <USBD_Get_USB_Status>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009920:	7bbb      	ldrb	r3, [r7, #14]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	460b      	mov	r3, r1
 8009934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fa fa13 	bl	8003d74 <HAL_PCD_EP_ClrStall>
 800994e:	4603      	mov	r3, r0
 8009950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f8bf 	bl	8009ad8 <USBD_Get_USB_Status>
 800995a:	4603      	mov	r3, r0
 800995c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800997a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800997c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da0b      	bge.n	800999c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	4613      	mov	r3, r2
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	4413      	add	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	333e      	adds	r3, #62	; 0x3e
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	e00b      	b.n	80099b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	4613      	mov	r3, r2
 80099a6:	00db      	lsls	r3, r3, #3
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80099b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f9 ffe0 	bl	80039a4 <HAL_PCD_SetAddress>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f874 	bl	8009ad8 <USBD_Get_USB_Status>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b086      	sub	sp, #24
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a1c:	7af9      	ldrb	r1, [r7, #11]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	f7fa f8f9 	bl	8003c18 <HAL_PCD_EP_Transmit>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f853 	bl	8009ad8 <USBD_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a5e:	7af9      	ldrb	r1, [r7, #11]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f7fa f875 	bl	8003b52 <HAL_PCD_EP_Receive>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f832 	bl	8009ad8 <USBD_Get_USB_Status>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	4611      	mov	r1, r2
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fa f8a5 	bl	8003be8 <HAL_PCD_EP_GetRxCount>
 8009a9e:	4603      	mov	r3, r0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ab0:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <USBD_static_malloc+0x18>)
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	2000b1b8 	.word	0x2000b1b8

08009ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d817      	bhi.n	8009b1c <USBD_Get_USB_Status+0x44>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <USBD_Get_USB_Status+0x1c>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b0b 	.word	0x08009b0b
 8009afc:	08009b11 	.word	0x08009b11
 8009b00:	08009b17 	.word	0x08009b17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e00b      	b.n	8009b22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e008      	b.n	8009b22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	e005      	b.n	8009b22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b16:	2303      	movs	r3, #3
 8009b18:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1a:	e002      	b.n	8009b22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	bf00      	nop
  }
  return usb_status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <siprintf>:
 8009b30:	b40e      	push	{r1, r2, r3}
 8009b32:	b500      	push	{lr}
 8009b34:	b09c      	sub	sp, #112	; 0x70
 8009b36:	ab1d      	add	r3, sp, #116	; 0x74
 8009b38:	9002      	str	r0, [sp, #8]
 8009b3a:	9006      	str	r0, [sp, #24]
 8009b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b40:	4809      	ldr	r0, [pc, #36]	; (8009b68 <siprintf+0x38>)
 8009b42:	9107      	str	r1, [sp, #28]
 8009b44:	9104      	str	r1, [sp, #16]
 8009b46:	4909      	ldr	r1, [pc, #36]	; (8009b6c <siprintf+0x3c>)
 8009b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4c:	9105      	str	r1, [sp, #20]
 8009b4e:	6800      	ldr	r0, [r0, #0]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	a902      	add	r1, sp, #8
 8009b54:	f000 f9a0 	bl	8009e98 <_svfiprintf_r>
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	b01c      	add	sp, #112	; 0x70
 8009b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b64:	b003      	add	sp, #12
 8009b66:	4770      	bx	lr
 8009b68:	20000170 	.word	0x20000170
 8009b6c:	ffff0208 	.word	0xffff0208

08009b70 <memset>:
 8009b70:	4402      	add	r2, r0
 8009b72:	4603      	mov	r3, r0
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d100      	bne.n	8009b7a <memset+0xa>
 8009b78:	4770      	bx	lr
 8009b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b7e:	e7f9      	b.n	8009b74 <memset+0x4>

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000170 	.word	0x20000170

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4d0d      	ldr	r5, [pc, #52]	; (8009bc4 <__libc_init_array+0x38>)
 8009b90:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b92:	1b64      	subs	r4, r4, r5
 8009b94:	10a4      	asrs	r4, r4, #2
 8009b96:	2600      	movs	r6, #0
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	4d0b      	ldr	r5, [pc, #44]	; (8009bcc <__libc_init_array+0x40>)
 8009b9e:	4c0c      	ldr	r4, [pc, #48]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba0:	f000 fc6a 	bl	800a478 <_init>
 8009ba4:	1b64      	subs	r4, r4, r5
 8009ba6:	10a4      	asrs	r4, r4, #2
 8009ba8:	2600      	movs	r6, #0
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb4:	4798      	blx	r3
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbe:	4798      	blx	r3
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800a554 	.word	0x0800a554
 8009bc8:	0800a554 	.word	0x0800a554
 8009bcc:	0800a554 	.word	0x0800a554
 8009bd0:	0800a558 	.word	0x0800a558

08009bd4 <__retarget_lock_acquire_recursive>:
 8009bd4:	4770      	bx	lr

08009bd6 <__retarget_lock_release_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <memcpy>:
 8009bd8:	440a      	add	r2, r1
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be0:	d100      	bne.n	8009be4 <memcpy+0xc>
 8009be2:	4770      	bx	lr
 8009be4:	b510      	push	{r4, lr}
 8009be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	d1f9      	bne.n	8009be6 <memcpy+0xe>
 8009bf2:	bd10      	pop	{r4, pc}

08009bf4 <_free_r>:
 8009bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	d044      	beq.n	8009c84 <_free_r+0x90>
 8009bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bfe:	9001      	str	r0, [sp, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f1a1 0404 	sub.w	r4, r1, #4
 8009c06:	bfb8      	it	lt
 8009c08:	18e4      	addlt	r4, r4, r3
 8009c0a:	f000 f8df 	bl	8009dcc <__malloc_lock>
 8009c0e:	4a1e      	ldr	r2, [pc, #120]	; (8009c88 <_free_r+0x94>)
 8009c10:	9801      	ldr	r0, [sp, #4]
 8009c12:	6813      	ldr	r3, [r2, #0]
 8009c14:	b933      	cbnz	r3, 8009c24 <_free_r+0x30>
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	6014      	str	r4, [r2, #0]
 8009c1a:	b003      	add	sp, #12
 8009c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c20:	f000 b8da 	b.w	8009dd8 <__malloc_unlock>
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	d908      	bls.n	8009c3a <_free_r+0x46>
 8009c28:	6825      	ldr	r5, [r4, #0]
 8009c2a:	1961      	adds	r1, r4, r5
 8009c2c:	428b      	cmp	r3, r1
 8009c2e:	bf01      	itttt	eq
 8009c30:	6819      	ldreq	r1, [r3, #0]
 8009c32:	685b      	ldreq	r3, [r3, #4]
 8009c34:	1949      	addeq	r1, r1, r5
 8009c36:	6021      	streq	r1, [r4, #0]
 8009c38:	e7ed      	b.n	8009c16 <_free_r+0x22>
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	b10b      	cbz	r3, 8009c44 <_free_r+0x50>
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	d9fa      	bls.n	8009c3a <_free_r+0x46>
 8009c44:	6811      	ldr	r1, [r2, #0]
 8009c46:	1855      	adds	r5, r2, r1
 8009c48:	42a5      	cmp	r5, r4
 8009c4a:	d10b      	bne.n	8009c64 <_free_r+0x70>
 8009c4c:	6824      	ldr	r4, [r4, #0]
 8009c4e:	4421      	add	r1, r4
 8009c50:	1854      	adds	r4, r2, r1
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	d1e0      	bne.n	8009c1a <_free_r+0x26>
 8009c58:	681c      	ldr	r4, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	6053      	str	r3, [r2, #4]
 8009c5e:	440c      	add	r4, r1
 8009c60:	6014      	str	r4, [r2, #0]
 8009c62:	e7da      	b.n	8009c1a <_free_r+0x26>
 8009c64:	d902      	bls.n	8009c6c <_free_r+0x78>
 8009c66:	230c      	movs	r3, #12
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	e7d6      	b.n	8009c1a <_free_r+0x26>
 8009c6c:	6825      	ldr	r5, [r4, #0]
 8009c6e:	1961      	adds	r1, r4, r5
 8009c70:	428b      	cmp	r3, r1
 8009c72:	bf04      	itt	eq
 8009c74:	6819      	ldreq	r1, [r3, #0]
 8009c76:	685b      	ldreq	r3, [r3, #4]
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	bf04      	itt	eq
 8009c7c:	1949      	addeq	r1, r1, r5
 8009c7e:	6021      	streq	r1, [r4, #0]
 8009c80:	6054      	str	r4, [r2, #4]
 8009c82:	e7ca      	b.n	8009c1a <_free_r+0x26>
 8009c84:	b003      	add	sp, #12
 8009c86:	bd30      	pop	{r4, r5, pc}
 8009c88:	2000b518 	.word	0x2000b518

08009c8c <sbrk_aligned>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	4e0e      	ldr	r6, [pc, #56]	; (8009cc8 <sbrk_aligned+0x3c>)
 8009c90:	460c      	mov	r4, r1
 8009c92:	6831      	ldr	r1, [r6, #0]
 8009c94:	4605      	mov	r5, r0
 8009c96:	b911      	cbnz	r1, 8009c9e <sbrk_aligned+0x12>
 8009c98:	f000 fba6 	bl	800a3e8 <_sbrk_r>
 8009c9c:	6030      	str	r0, [r6, #0]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 fba1 	bl	800a3e8 <_sbrk_r>
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	d00a      	beq.n	8009cc0 <sbrk_aligned+0x34>
 8009caa:	1cc4      	adds	r4, r0, #3
 8009cac:	f024 0403 	bic.w	r4, r4, #3
 8009cb0:	42a0      	cmp	r0, r4
 8009cb2:	d007      	beq.n	8009cc4 <sbrk_aligned+0x38>
 8009cb4:	1a21      	subs	r1, r4, r0
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 fb96 	bl	800a3e8 <_sbrk_r>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d101      	bne.n	8009cc4 <sbrk_aligned+0x38>
 8009cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	2000b51c 	.word	0x2000b51c

08009ccc <_malloc_r>:
 8009ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	1ccd      	adds	r5, r1, #3
 8009cd2:	f025 0503 	bic.w	r5, r5, #3
 8009cd6:	3508      	adds	r5, #8
 8009cd8:	2d0c      	cmp	r5, #12
 8009cda:	bf38      	it	cc
 8009cdc:	250c      	movcc	r5, #12
 8009cde:	2d00      	cmp	r5, #0
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	db01      	blt.n	8009ce8 <_malloc_r+0x1c>
 8009ce4:	42a9      	cmp	r1, r5
 8009ce6:	d905      	bls.n	8009cf4 <_malloc_r+0x28>
 8009ce8:	230c      	movs	r3, #12
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	2600      	movs	r6, #0
 8009cee:	4630      	mov	r0, r6
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009dc8 <_malloc_r+0xfc>
 8009cf8:	f000 f868 	bl	8009dcc <__malloc_lock>
 8009cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8009d00:	461c      	mov	r4, r3
 8009d02:	bb5c      	cbnz	r4, 8009d5c <_malloc_r+0x90>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4638      	mov	r0, r7
 8009d08:	f7ff ffc0 	bl	8009c8c <sbrk_aligned>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	4604      	mov	r4, r0
 8009d10:	d155      	bne.n	8009dbe <_malloc_r+0xf2>
 8009d12:	f8d8 4000 	ldr.w	r4, [r8]
 8009d16:	4626      	mov	r6, r4
 8009d18:	2e00      	cmp	r6, #0
 8009d1a:	d145      	bne.n	8009da8 <_malloc_r+0xdc>
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	d048      	beq.n	8009db2 <_malloc_r+0xe6>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	4631      	mov	r1, r6
 8009d24:	4638      	mov	r0, r7
 8009d26:	eb04 0903 	add.w	r9, r4, r3
 8009d2a:	f000 fb5d 	bl	800a3e8 <_sbrk_r>
 8009d2e:	4581      	cmp	r9, r0
 8009d30:	d13f      	bne.n	8009db2 <_malloc_r+0xe6>
 8009d32:	6821      	ldr	r1, [r4, #0]
 8009d34:	1a6d      	subs	r5, r5, r1
 8009d36:	4629      	mov	r1, r5
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7ff ffa7 	bl	8009c8c <sbrk_aligned>
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d037      	beq.n	8009db2 <_malloc_r+0xe6>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	442b      	add	r3, r5
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	f8d8 3000 	ldr.w	r3, [r8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d038      	beq.n	8009dc2 <_malloc_r+0xf6>
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	42a2      	cmp	r2, r4
 8009d54:	d12b      	bne.n	8009dae <_malloc_r+0xe2>
 8009d56:	2200      	movs	r2, #0
 8009d58:	605a      	str	r2, [r3, #4]
 8009d5a:	e00f      	b.n	8009d7c <_malloc_r+0xb0>
 8009d5c:	6822      	ldr	r2, [r4, #0]
 8009d5e:	1b52      	subs	r2, r2, r5
 8009d60:	d41f      	bmi.n	8009da2 <_malloc_r+0xd6>
 8009d62:	2a0b      	cmp	r2, #11
 8009d64:	d917      	bls.n	8009d96 <_malloc_r+0xca>
 8009d66:	1961      	adds	r1, r4, r5
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	6025      	str	r5, [r4, #0]
 8009d6c:	bf18      	it	ne
 8009d6e:	6059      	strne	r1, [r3, #4]
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	bf08      	it	eq
 8009d74:	f8c8 1000 	streq.w	r1, [r8]
 8009d78:	5162      	str	r2, [r4, r5]
 8009d7a:	604b      	str	r3, [r1, #4]
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f104 060b 	add.w	r6, r4, #11
 8009d82:	f000 f829 	bl	8009dd8 <__malloc_unlock>
 8009d86:	f026 0607 	bic.w	r6, r6, #7
 8009d8a:	1d23      	adds	r3, r4, #4
 8009d8c:	1af2      	subs	r2, r6, r3
 8009d8e:	d0ae      	beq.n	8009cee <_malloc_r+0x22>
 8009d90:	1b9b      	subs	r3, r3, r6
 8009d92:	50a3      	str	r3, [r4, r2]
 8009d94:	e7ab      	b.n	8009cee <_malloc_r+0x22>
 8009d96:	42a3      	cmp	r3, r4
 8009d98:	6862      	ldr	r2, [r4, #4]
 8009d9a:	d1dd      	bne.n	8009d58 <_malloc_r+0x8c>
 8009d9c:	f8c8 2000 	str.w	r2, [r8]
 8009da0:	e7ec      	b.n	8009d7c <_malloc_r+0xb0>
 8009da2:	4623      	mov	r3, r4
 8009da4:	6864      	ldr	r4, [r4, #4]
 8009da6:	e7ac      	b.n	8009d02 <_malloc_r+0x36>
 8009da8:	4634      	mov	r4, r6
 8009daa:	6876      	ldr	r6, [r6, #4]
 8009dac:	e7b4      	b.n	8009d18 <_malloc_r+0x4c>
 8009dae:	4613      	mov	r3, r2
 8009db0:	e7cc      	b.n	8009d4c <_malloc_r+0x80>
 8009db2:	230c      	movs	r3, #12
 8009db4:	603b      	str	r3, [r7, #0]
 8009db6:	4638      	mov	r0, r7
 8009db8:	f000 f80e 	bl	8009dd8 <__malloc_unlock>
 8009dbc:	e797      	b.n	8009cee <_malloc_r+0x22>
 8009dbe:	6025      	str	r5, [r4, #0]
 8009dc0:	e7dc      	b.n	8009d7c <_malloc_r+0xb0>
 8009dc2:	605b      	str	r3, [r3, #4]
 8009dc4:	deff      	udf	#255	; 0xff
 8009dc6:	bf00      	nop
 8009dc8:	2000b518 	.word	0x2000b518

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f7ff bf01 	b.w	8009bd4 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	2000b514 	.word	0x2000b514

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f7ff befc 	b.w	8009bd6 <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	2000b514 	.word	0x2000b514

08009de4 <__ssputs_r>:
 8009de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	688e      	ldr	r6, [r1, #8]
 8009dea:	461f      	mov	r7, r3
 8009dec:	42be      	cmp	r6, r7
 8009dee:	680b      	ldr	r3, [r1, #0]
 8009df0:	4682      	mov	sl, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	4690      	mov	r8, r2
 8009df6:	d82c      	bhi.n	8009e52 <__ssputs_r+0x6e>
 8009df8:	898a      	ldrh	r2, [r1, #12]
 8009dfa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dfe:	d026      	beq.n	8009e4e <__ssputs_r+0x6a>
 8009e00:	6965      	ldr	r5, [r4, #20]
 8009e02:	6909      	ldr	r1, [r1, #16]
 8009e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e08:	eba3 0901 	sub.w	r9, r3, r1
 8009e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e10:	1c7b      	adds	r3, r7, #1
 8009e12:	444b      	add	r3, r9
 8009e14:	106d      	asrs	r5, r5, #1
 8009e16:	429d      	cmp	r5, r3
 8009e18:	bf38      	it	cc
 8009e1a:	461d      	movcc	r5, r3
 8009e1c:	0553      	lsls	r3, r2, #21
 8009e1e:	d527      	bpl.n	8009e70 <__ssputs_r+0x8c>
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7ff ff53 	bl	8009ccc <_malloc_r>
 8009e26:	4606      	mov	r6, r0
 8009e28:	b360      	cbz	r0, 8009e84 <__ssputs_r+0xa0>
 8009e2a:	6921      	ldr	r1, [r4, #16]
 8009e2c:	464a      	mov	r2, r9
 8009e2e:	f7ff fed3 	bl	8009bd8 <memcpy>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	6126      	str	r6, [r4, #16]
 8009e40:	6165      	str	r5, [r4, #20]
 8009e42:	444e      	add	r6, r9
 8009e44:	eba5 0509 	sub.w	r5, r5, r9
 8009e48:	6026      	str	r6, [r4, #0]
 8009e4a:	60a5      	str	r5, [r4, #8]
 8009e4c:	463e      	mov	r6, r7
 8009e4e:	42be      	cmp	r6, r7
 8009e50:	d900      	bls.n	8009e54 <__ssputs_r+0x70>
 8009e52:	463e      	mov	r6, r7
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	4632      	mov	r2, r6
 8009e58:	4641      	mov	r1, r8
 8009e5a:	f000 faab 	bl	800a3b4 <memmove>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	1b9b      	subs	r3, r3, r6
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	4433      	add	r3, r6
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e70:	462a      	mov	r2, r5
 8009e72:	f000 fac9 	bl	800a408 <_realloc_r>
 8009e76:	4606      	mov	r6, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1e0      	bne.n	8009e3e <__ssputs_r+0x5a>
 8009e7c:	6921      	ldr	r1, [r4, #16]
 8009e7e:	4650      	mov	r0, sl
 8009e80:	f7ff feb8 	bl	8009bf4 <_free_r>
 8009e84:	230c      	movs	r3, #12
 8009e86:	f8ca 3000 	str.w	r3, [sl]
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295
 8009e96:	e7e9      	b.n	8009e6c <__ssputs_r+0x88>

08009e98 <_svfiprintf_r>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	898b      	ldrh	r3, [r1, #12]
 8009ea0:	061b      	lsls	r3, r3, #24
 8009ea2:	b09d      	sub	sp, #116	; 0x74
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	d50e      	bpl.n	8009eca <_svfiprintf_r+0x32>
 8009eac:	690b      	ldr	r3, [r1, #16]
 8009eae:	b963      	cbnz	r3, 8009eca <_svfiprintf_r+0x32>
 8009eb0:	2140      	movs	r1, #64	; 0x40
 8009eb2:	f7ff ff0b 	bl	8009ccc <_malloc_r>
 8009eb6:	6028      	str	r0, [r5, #0]
 8009eb8:	6128      	str	r0, [r5, #16]
 8009eba:	b920      	cbnz	r0, 8009ec6 <_svfiprintf_r+0x2e>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e0d0      	b.n	800a068 <_svfiprintf_r+0x1d0>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	616b      	str	r3, [r5, #20]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	2320      	movs	r3, #32
 8009ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a080 <_svfiprintf_r+0x1e8>
 8009ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee2:	f04f 0901 	mov.w	r9, #1
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	469a      	mov	sl, r3
 8009eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eee:	b10a      	cbz	r2, 8009ef4 <_svfiprintf_r+0x5c>
 8009ef0:	2a25      	cmp	r2, #37	; 0x25
 8009ef2:	d1f9      	bne.n	8009ee8 <_svfiprintf_r+0x50>
 8009ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef8:	d00b      	beq.n	8009f12 <_svfiprintf_r+0x7a>
 8009efa:	465b      	mov	r3, fp
 8009efc:	4622      	mov	r2, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff ff6f 	bl	8009de4 <__ssputs_r>
 8009f06:	3001      	adds	r0, #1
 8009f08:	f000 80a9 	beq.w	800a05e <_svfiprintf_r+0x1c6>
 8009f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0e:	445a      	add	r2, fp
 8009f10:	9209      	str	r2, [sp, #36]	; 0x24
 8009f12:	f89a 3000 	ldrb.w	r3, [sl]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 80a1 	beq.w	800a05e <_svfiprintf_r+0x1c6>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f26:	f10a 0a01 	add.w	sl, sl, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	9307      	str	r3, [sp, #28]
 8009f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f32:	931a      	str	r3, [sp, #104]	; 0x68
 8009f34:	4654      	mov	r4, sl
 8009f36:	2205      	movs	r2, #5
 8009f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3c:	4850      	ldr	r0, [pc, #320]	; (800a080 <_svfiprintf_r+0x1e8>)
 8009f3e:	f7f6 f957 	bl	80001f0 <memchr>
 8009f42:	9a04      	ldr	r2, [sp, #16]
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_svfiprintf_r+0xe6>
 8009f46:	06d0      	lsls	r0, r2, #27
 8009f48:	bf44      	itt	mi
 8009f4a:	2320      	movmi	r3, #32
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	0711      	lsls	r1, r2, #28
 8009f52:	bf44      	itt	mi
 8009f54:	232b      	movmi	r3, #43	; 0x2b
 8009f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f60:	d015      	beq.n	8009f8e <_svfiprintf_r+0xf6>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4654      	mov	r4, sl
 8009f66:	2000      	movs	r0, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f72:	3b30      	subs	r3, #48	; 0x30
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d94d      	bls.n	800a014 <_svfiprintf_r+0x17c>
 8009f78:	b1b0      	cbz	r0, 8009fa8 <_svfiprintf_r+0x110>
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	e014      	b.n	8009fa8 <_svfiprintf_r+0x110>
 8009f7e:	eba0 0308 	sub.w	r3, r0, r8
 8009f82:	fa09 f303 	lsl.w	r3, r9, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	46a2      	mov	sl, r4
 8009f8c:	e7d2      	b.n	8009f34 <_svfiprintf_r+0x9c>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	9103      	str	r1, [sp, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bfbb      	ittet	lt
 8009f9a:	425b      	neglt	r3, r3
 8009f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa0:	9307      	strge	r3, [sp, #28]
 8009fa2:	9307      	strlt	r3, [sp, #28]
 8009fa4:	bfb8      	it	lt
 8009fa6:	9204      	strlt	r2, [sp, #16]
 8009fa8:	7823      	ldrb	r3, [r4, #0]
 8009faa:	2b2e      	cmp	r3, #46	; 0x2e
 8009fac:	d10c      	bne.n	8009fc8 <_svfiprintf_r+0x130>
 8009fae:	7863      	ldrb	r3, [r4, #1]
 8009fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb2:	d134      	bne.n	800a01e <_svfiprintf_r+0x186>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	9203      	str	r2, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfb8      	it	lt
 8009fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fc4:	3402      	adds	r4, #2
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a090 <_svfiprintf_r+0x1f8>
 8009fcc:	7821      	ldrb	r1, [r4, #0]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	f7f6 f90d 	bl	80001f0 <memchr>
 8009fd6:	b138      	cbz	r0, 8009fe8 <_svfiprintf_r+0x150>
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	eba0 000a 	sub.w	r0, r0, sl
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	4082      	lsls	r2, r0
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fec:	4825      	ldr	r0, [pc, #148]	; (800a084 <_svfiprintf_r+0x1ec>)
 8009fee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff2:	2206      	movs	r2, #6
 8009ff4:	f7f6 f8fc 	bl	80001f0 <memchr>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d038      	beq.n	800a06e <_svfiprintf_r+0x1d6>
 8009ffc:	4b22      	ldr	r3, [pc, #136]	; (800a088 <_svfiprintf_r+0x1f0>)
 8009ffe:	bb1b      	cbnz	r3, 800a048 <_svfiprintf_r+0x1b0>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	3307      	adds	r3, #7
 800a004:	f023 0307 	bic.w	r3, r3, #7
 800a008:	3308      	adds	r3, #8
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00e:	4433      	add	r3, r6
 800a010:	9309      	str	r3, [sp, #36]	; 0x24
 800a012:	e768      	b.n	8009ee6 <_svfiprintf_r+0x4e>
 800a014:	fb0c 3202 	mla	r2, ip, r2, r3
 800a018:	460c      	mov	r4, r1
 800a01a:	2001      	movs	r0, #1
 800a01c:	e7a6      	b.n	8009f6c <_svfiprintf_r+0xd4>
 800a01e:	2300      	movs	r3, #0
 800a020:	3401      	adds	r4, #1
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	4619      	mov	r1, r3
 800a026:	f04f 0c0a 	mov.w	ip, #10
 800a02a:	4620      	mov	r0, r4
 800a02c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a030:	3a30      	subs	r2, #48	; 0x30
 800a032:	2a09      	cmp	r2, #9
 800a034:	d903      	bls.n	800a03e <_svfiprintf_r+0x1a6>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0c6      	beq.n	8009fc8 <_svfiprintf_r+0x130>
 800a03a:	9105      	str	r1, [sp, #20]
 800a03c:	e7c4      	b.n	8009fc8 <_svfiprintf_r+0x130>
 800a03e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a042:	4604      	mov	r4, r0
 800a044:	2301      	movs	r3, #1
 800a046:	e7f0      	b.n	800a02a <_svfiprintf_r+0x192>
 800a048:	ab03      	add	r3, sp, #12
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	462a      	mov	r2, r5
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <_svfiprintf_r+0x1f4>)
 800a050:	a904      	add	r1, sp, #16
 800a052:	4638      	mov	r0, r7
 800a054:	f3af 8000 	nop.w
 800a058:	1c42      	adds	r2, r0, #1
 800a05a:	4606      	mov	r6, r0
 800a05c:	d1d6      	bne.n	800a00c <_svfiprintf_r+0x174>
 800a05e:	89ab      	ldrh	r3, [r5, #12]
 800a060:	065b      	lsls	r3, r3, #25
 800a062:	f53f af2d 	bmi.w	8009ec0 <_svfiprintf_r+0x28>
 800a066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a068:	b01d      	add	sp, #116	; 0x74
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	ab03      	add	r3, sp, #12
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	462a      	mov	r2, r5
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <_svfiprintf_r+0x1f4>)
 800a076:	a904      	add	r1, sp, #16
 800a078:	4638      	mov	r0, r7
 800a07a:	f000 f879 	bl	800a170 <_printf_i>
 800a07e:	e7eb      	b.n	800a058 <_svfiprintf_r+0x1c0>
 800a080:	0800a518 	.word	0x0800a518
 800a084:	0800a522 	.word	0x0800a522
 800a088:	00000000 	.word	0x00000000
 800a08c:	08009de5 	.word	0x08009de5
 800a090:	0800a51e 	.word	0x0800a51e

0800a094 <_printf_common>:
 800a094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	4616      	mov	r6, r2
 800a09a:	4699      	mov	r9, r3
 800a09c:	688a      	ldr	r2, [r1, #8]
 800a09e:	690b      	ldr	r3, [r1, #16]
 800a0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bfb8      	it	lt
 800a0a8:	4613      	movlt	r3, r2
 800a0aa:	6033      	str	r3, [r6, #0]
 800a0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b10a      	cbz	r2, 800a0ba <_printf_common+0x26>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	0699      	lsls	r1, r3, #26
 800a0be:	bf42      	ittt	mi
 800a0c0:	6833      	ldrmi	r3, [r6, #0]
 800a0c2:	3302      	addmi	r3, #2
 800a0c4:	6033      	strmi	r3, [r6, #0]
 800a0c6:	6825      	ldr	r5, [r4, #0]
 800a0c8:	f015 0506 	ands.w	r5, r5, #6
 800a0cc:	d106      	bne.n	800a0dc <_printf_common+0x48>
 800a0ce:	f104 0a19 	add.w	sl, r4, #25
 800a0d2:	68e3      	ldr	r3, [r4, #12]
 800a0d4:	6832      	ldr	r2, [r6, #0]
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc26      	bgt.n	800a12a <_printf_common+0x96>
 800a0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e0:	1e13      	subs	r3, r2, #0
 800a0e2:	6822      	ldr	r2, [r4, #0]
 800a0e4:	bf18      	it	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	0692      	lsls	r2, r2, #26
 800a0ea:	d42b      	bmi.n	800a144 <_printf_common+0xb0>
 800a0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d01e      	beq.n	800a138 <_printf_common+0xa4>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	6922      	ldr	r2, [r4, #16]
 800a0fe:	f003 0306 	and.w	r3, r3, #6
 800a102:	2b04      	cmp	r3, #4
 800a104:	bf02      	ittt	eq
 800a106:	68e5      	ldreq	r5, [r4, #12]
 800a108:	6833      	ldreq	r3, [r6, #0]
 800a10a:	1aed      	subeq	r5, r5, r3
 800a10c:	68a3      	ldr	r3, [r4, #8]
 800a10e:	bf0c      	ite	eq
 800a110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a114:	2500      	movne	r5, #0
 800a116:	4293      	cmp	r3, r2
 800a118:	bfc4      	itt	gt
 800a11a:	1a9b      	subgt	r3, r3, r2
 800a11c:	18ed      	addgt	r5, r5, r3
 800a11e:	2600      	movs	r6, #0
 800a120:	341a      	adds	r4, #26
 800a122:	42b5      	cmp	r5, r6
 800a124:	d11a      	bne.n	800a15c <_printf_common+0xc8>
 800a126:	2000      	movs	r0, #0
 800a128:	e008      	b.n	800a13c <_printf_common+0xa8>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4652      	mov	r2, sl
 800a12e:	4649      	mov	r1, r9
 800a130:	4638      	mov	r0, r7
 800a132:	47c0      	blx	r8
 800a134:	3001      	adds	r0, #1
 800a136:	d103      	bne.n	800a140 <_printf_common+0xac>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a140:	3501      	adds	r5, #1
 800a142:	e7c6      	b.n	800a0d2 <_printf_common+0x3e>
 800a144:	18e1      	adds	r1, r4, r3
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	2030      	movs	r0, #48	; 0x30
 800a14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a14e:	4422      	add	r2, r4
 800a150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a158:	3302      	adds	r3, #2
 800a15a:	e7c7      	b.n	800a0ec <_printf_common+0x58>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4622      	mov	r2, r4
 800a160:	4649      	mov	r1, r9
 800a162:	4638      	mov	r0, r7
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d0e6      	beq.n	800a138 <_printf_common+0xa4>
 800a16a:	3601      	adds	r6, #1
 800a16c:	e7d9      	b.n	800a122 <_printf_common+0x8e>
	...

0800a170 <_printf_i>:
 800a170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	7e0f      	ldrb	r7, [r1, #24]
 800a176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a178:	2f78      	cmp	r7, #120	; 0x78
 800a17a:	4691      	mov	r9, r2
 800a17c:	4680      	mov	r8, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	469a      	mov	sl, r3
 800a182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a186:	d807      	bhi.n	800a198 <_printf_i+0x28>
 800a188:	2f62      	cmp	r7, #98	; 0x62
 800a18a:	d80a      	bhi.n	800a1a2 <_printf_i+0x32>
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	f000 80d4 	beq.w	800a33a <_printf_i+0x1ca>
 800a192:	2f58      	cmp	r7, #88	; 0x58
 800a194:	f000 80c0 	beq.w	800a318 <_printf_i+0x1a8>
 800a198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1a0:	e03a      	b.n	800a218 <_printf_i+0xa8>
 800a1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1a6:	2b15      	cmp	r3, #21
 800a1a8:	d8f6      	bhi.n	800a198 <_printf_i+0x28>
 800a1aa:	a101      	add	r1, pc, #4	; (adr r1, 800a1b0 <_printf_i+0x40>)
 800a1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a199 	.word	0x0800a199
 800a1bc:	0800a199 	.word	0x0800a199
 800a1c0:	0800a199 	.word	0x0800a199
 800a1c4:	0800a199 	.word	0x0800a199
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a199 	.word	0x0800a199
 800a1d0:	0800a199 	.word	0x0800a199
 800a1d4:	0800a199 	.word	0x0800a199
 800a1d8:	0800a199 	.word	0x0800a199
 800a1dc:	0800a321 	.word	0x0800a321
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a2db 	.word	0x0800a2db
 800a1e8:	0800a199 	.word	0x0800a199
 800a1ec:	0800a199 	.word	0x0800a199
 800a1f0:	0800a343 	.word	0x0800a343
 800a1f4:	0800a199 	.word	0x0800a199
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a199 	.word	0x0800a199
 800a200:	0800a199 	.word	0x0800a199
 800a204:	0800a2e3 	.word	0x0800a2e3
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	602a      	str	r2, [r5, #0]
 800a210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a218:	2301      	movs	r3, #1
 800a21a:	e09f      	b.n	800a35c <_printf_i+0x1ec>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	0607      	lsls	r7, r0, #24
 800a222:	f103 0104 	add.w	r1, r3, #4
 800a226:	6029      	str	r1, [r5, #0]
 800a228:	d501      	bpl.n	800a22e <_printf_i+0xbe>
 800a22a:	681e      	ldr	r6, [r3, #0]
 800a22c:	e003      	b.n	800a236 <_printf_i+0xc6>
 800a22e:	0646      	lsls	r6, r0, #25
 800a230:	d5fb      	bpl.n	800a22a <_printf_i+0xba>
 800a232:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a236:	2e00      	cmp	r6, #0
 800a238:	da03      	bge.n	800a242 <_printf_i+0xd2>
 800a23a:	232d      	movs	r3, #45	; 0x2d
 800a23c:	4276      	negs	r6, r6
 800a23e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a242:	485a      	ldr	r0, [pc, #360]	; (800a3ac <_printf_i+0x23c>)
 800a244:	230a      	movs	r3, #10
 800a246:	e012      	b.n	800a26e <_printf_i+0xfe>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	6820      	ldr	r0, [r4, #0]
 800a24c:	1d19      	adds	r1, r3, #4
 800a24e:	6029      	str	r1, [r5, #0]
 800a250:	0605      	lsls	r5, r0, #24
 800a252:	d501      	bpl.n	800a258 <_printf_i+0xe8>
 800a254:	681e      	ldr	r6, [r3, #0]
 800a256:	e002      	b.n	800a25e <_printf_i+0xee>
 800a258:	0641      	lsls	r1, r0, #25
 800a25a:	d5fb      	bpl.n	800a254 <_printf_i+0xe4>
 800a25c:	881e      	ldrh	r6, [r3, #0]
 800a25e:	4853      	ldr	r0, [pc, #332]	; (800a3ac <_printf_i+0x23c>)
 800a260:	2f6f      	cmp	r7, #111	; 0x6f
 800a262:	bf0c      	ite	eq
 800a264:	2308      	moveq	r3, #8
 800a266:	230a      	movne	r3, #10
 800a268:	2100      	movs	r1, #0
 800a26a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a26e:	6865      	ldr	r5, [r4, #4]
 800a270:	60a5      	str	r5, [r4, #8]
 800a272:	2d00      	cmp	r5, #0
 800a274:	bfa2      	ittt	ge
 800a276:	6821      	ldrge	r1, [r4, #0]
 800a278:	f021 0104 	bicge.w	r1, r1, #4
 800a27c:	6021      	strge	r1, [r4, #0]
 800a27e:	b90e      	cbnz	r6, 800a284 <_printf_i+0x114>
 800a280:	2d00      	cmp	r5, #0
 800a282:	d04b      	beq.n	800a31c <_printf_i+0x1ac>
 800a284:	4615      	mov	r5, r2
 800a286:	fbb6 f1f3 	udiv	r1, r6, r3
 800a28a:	fb03 6711 	mls	r7, r3, r1, r6
 800a28e:	5dc7      	ldrb	r7, [r0, r7]
 800a290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a294:	4637      	mov	r7, r6
 800a296:	42bb      	cmp	r3, r7
 800a298:	460e      	mov	r6, r1
 800a29a:	d9f4      	bls.n	800a286 <_printf_i+0x116>
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d10b      	bne.n	800a2b8 <_printf_i+0x148>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	07de      	lsls	r6, r3, #31
 800a2a4:	d508      	bpl.n	800a2b8 <_printf_i+0x148>
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	6861      	ldr	r1, [r4, #4]
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	bfde      	ittt	le
 800a2ae:	2330      	movle	r3, #48	; 0x30
 800a2b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2b8:	1b52      	subs	r2, r2, r5
 800a2ba:	6122      	str	r2, [r4, #16]
 800a2bc:	f8cd a000 	str.w	sl, [sp]
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	aa03      	add	r2, sp, #12
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	f7ff fee4 	bl	800a094 <_printf_common>
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d14a      	bne.n	800a366 <_printf_i+0x1f6>
 800a2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d4:	b004      	add	sp, #16
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	f043 0320 	orr.w	r3, r3, #32
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	4833      	ldr	r0, [pc, #204]	; (800a3b0 <_printf_i+0x240>)
 800a2e4:	2778      	movs	r7, #120	; 0x78
 800a2e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	6829      	ldr	r1, [r5, #0]
 800a2ee:	061f      	lsls	r7, r3, #24
 800a2f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2f4:	d402      	bmi.n	800a2fc <_printf_i+0x18c>
 800a2f6:	065f      	lsls	r7, r3, #25
 800a2f8:	bf48      	it	mi
 800a2fa:	b2b6      	uxthmi	r6, r6
 800a2fc:	07df      	lsls	r7, r3, #31
 800a2fe:	bf48      	it	mi
 800a300:	f043 0320 	orrmi.w	r3, r3, #32
 800a304:	6029      	str	r1, [r5, #0]
 800a306:	bf48      	it	mi
 800a308:	6023      	strmi	r3, [r4, #0]
 800a30a:	b91e      	cbnz	r6, 800a314 <_printf_i+0x1a4>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	f023 0320 	bic.w	r3, r3, #32
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	2310      	movs	r3, #16
 800a316:	e7a7      	b.n	800a268 <_printf_i+0xf8>
 800a318:	4824      	ldr	r0, [pc, #144]	; (800a3ac <_printf_i+0x23c>)
 800a31a:	e7e4      	b.n	800a2e6 <_printf_i+0x176>
 800a31c:	4615      	mov	r5, r2
 800a31e:	e7bd      	b.n	800a29c <_printf_i+0x12c>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	6826      	ldr	r6, [r4, #0]
 800a324:	6961      	ldr	r1, [r4, #20]
 800a326:	1d18      	adds	r0, r3, #4
 800a328:	6028      	str	r0, [r5, #0]
 800a32a:	0635      	lsls	r5, r6, #24
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	d501      	bpl.n	800a334 <_printf_i+0x1c4>
 800a330:	6019      	str	r1, [r3, #0]
 800a332:	e002      	b.n	800a33a <_printf_i+0x1ca>
 800a334:	0670      	lsls	r0, r6, #25
 800a336:	d5fb      	bpl.n	800a330 <_printf_i+0x1c0>
 800a338:	8019      	strh	r1, [r3, #0]
 800a33a:	2300      	movs	r3, #0
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	4615      	mov	r5, r2
 800a340:	e7bc      	b.n	800a2bc <_printf_i+0x14c>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	1d1a      	adds	r2, r3, #4
 800a346:	602a      	str	r2, [r5, #0]
 800a348:	681d      	ldr	r5, [r3, #0]
 800a34a:	6862      	ldr	r2, [r4, #4]
 800a34c:	2100      	movs	r1, #0
 800a34e:	4628      	mov	r0, r5
 800a350:	f7f5 ff4e 	bl	80001f0 <memchr>
 800a354:	b108      	cbz	r0, 800a35a <_printf_i+0x1ea>
 800a356:	1b40      	subs	r0, r0, r5
 800a358:	6060      	str	r0, [r4, #4]
 800a35a:	6863      	ldr	r3, [r4, #4]
 800a35c:	6123      	str	r3, [r4, #16]
 800a35e:	2300      	movs	r3, #0
 800a360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a364:	e7aa      	b.n	800a2bc <_printf_i+0x14c>
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	462a      	mov	r2, r5
 800a36a:	4649      	mov	r1, r9
 800a36c:	4640      	mov	r0, r8
 800a36e:	47d0      	blx	sl
 800a370:	3001      	adds	r0, #1
 800a372:	d0ad      	beq.n	800a2d0 <_printf_i+0x160>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	079b      	lsls	r3, r3, #30
 800a378:	d413      	bmi.n	800a3a2 <_printf_i+0x232>
 800a37a:	68e0      	ldr	r0, [r4, #12]
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	4298      	cmp	r0, r3
 800a380:	bfb8      	it	lt
 800a382:	4618      	movlt	r0, r3
 800a384:	e7a6      	b.n	800a2d4 <_printf_i+0x164>
 800a386:	2301      	movs	r3, #1
 800a388:	4632      	mov	r2, r6
 800a38a:	4649      	mov	r1, r9
 800a38c:	4640      	mov	r0, r8
 800a38e:	47d0      	blx	sl
 800a390:	3001      	adds	r0, #1
 800a392:	d09d      	beq.n	800a2d0 <_printf_i+0x160>
 800a394:	3501      	adds	r5, #1
 800a396:	68e3      	ldr	r3, [r4, #12]
 800a398:	9903      	ldr	r1, [sp, #12]
 800a39a:	1a5b      	subs	r3, r3, r1
 800a39c:	42ab      	cmp	r3, r5
 800a39e:	dcf2      	bgt.n	800a386 <_printf_i+0x216>
 800a3a0:	e7eb      	b.n	800a37a <_printf_i+0x20a>
 800a3a2:	2500      	movs	r5, #0
 800a3a4:	f104 0619 	add.w	r6, r4, #25
 800a3a8:	e7f5      	b.n	800a396 <_printf_i+0x226>
 800a3aa:	bf00      	nop
 800a3ac:	0800a529 	.word	0x0800a529
 800a3b0:	0800a53a 	.word	0x0800a53a

0800a3b4 <memmove>:
 800a3b4:	4288      	cmp	r0, r1
 800a3b6:	b510      	push	{r4, lr}
 800a3b8:	eb01 0402 	add.w	r4, r1, r2
 800a3bc:	d902      	bls.n	800a3c4 <memmove+0x10>
 800a3be:	4284      	cmp	r4, r0
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	d807      	bhi.n	800a3d4 <memmove+0x20>
 800a3c4:	1e43      	subs	r3, r0, #1
 800a3c6:	42a1      	cmp	r1, r4
 800a3c8:	d008      	beq.n	800a3dc <memmove+0x28>
 800a3ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3d2:	e7f8      	b.n	800a3c6 <memmove+0x12>
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	428a      	cmp	r2, r1
 800a3da:	d100      	bne.n	800a3de <memmove+0x2a>
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3e6:	e7f7      	b.n	800a3d8 <memmove+0x24>

0800a3e8 <_sbrk_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	; (800a404 <_sbrk_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7f7 f8ae 	bl	8001554 <_sbrk>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_sbrk_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_sbrk_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	2000b510 	.word	0x2000b510

0800a408 <_realloc_r>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	4680      	mov	r8, r0
 800a40e:	4614      	mov	r4, r2
 800a410:	460e      	mov	r6, r1
 800a412:	b921      	cbnz	r1, 800a41e <_realloc_r+0x16>
 800a414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a418:	4611      	mov	r1, r2
 800a41a:	f7ff bc57 	b.w	8009ccc <_malloc_r>
 800a41e:	b92a      	cbnz	r2, 800a42c <_realloc_r+0x24>
 800a420:	f7ff fbe8 	bl	8009bf4 <_free_r>
 800a424:	4625      	mov	r5, r4
 800a426:	4628      	mov	r0, r5
 800a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42c:	f000 f81b 	bl	800a466 <_malloc_usable_size_r>
 800a430:	4284      	cmp	r4, r0
 800a432:	4607      	mov	r7, r0
 800a434:	d802      	bhi.n	800a43c <_realloc_r+0x34>
 800a436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a43a:	d812      	bhi.n	800a462 <_realloc_r+0x5a>
 800a43c:	4621      	mov	r1, r4
 800a43e:	4640      	mov	r0, r8
 800a440:	f7ff fc44 	bl	8009ccc <_malloc_r>
 800a444:	4605      	mov	r5, r0
 800a446:	2800      	cmp	r0, #0
 800a448:	d0ed      	beq.n	800a426 <_realloc_r+0x1e>
 800a44a:	42bc      	cmp	r4, r7
 800a44c:	4622      	mov	r2, r4
 800a44e:	4631      	mov	r1, r6
 800a450:	bf28      	it	cs
 800a452:	463a      	movcs	r2, r7
 800a454:	f7ff fbc0 	bl	8009bd8 <memcpy>
 800a458:	4631      	mov	r1, r6
 800a45a:	4640      	mov	r0, r8
 800a45c:	f7ff fbca 	bl	8009bf4 <_free_r>
 800a460:	e7e1      	b.n	800a426 <_realloc_r+0x1e>
 800a462:	4635      	mov	r5, r6
 800a464:	e7df      	b.n	800a426 <_realloc_r+0x1e>

0800a466 <_malloc_usable_size_r>:
 800a466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a46a:	1f18      	subs	r0, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	bfbc      	itt	lt
 800a470:	580b      	ldrlt	r3, [r1, r0]
 800a472:	18c0      	addlt	r0, r0, r3
 800a474:	4770      	bx	lr
	...

0800a478 <_init>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr

0800a484 <_fini>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr
