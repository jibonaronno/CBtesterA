
CBtesterA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa8  08009fa8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb0  08009fb0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b358  2000015c  0800a114  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b4b4  0800a114  0002b4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015636  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038bd  00000000  00000000  00035805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  000390c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e94  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a650  00000000  00000000  0003b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184cf  00000000  00000000  000558c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad35  00000000  00000000  0006dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005498  00000000  00000000  00108ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ed8 	.word	0x08009ed8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08009ed8 	.word	0x08009ed8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <kalman_filter>:
static int kalman_adc_int = 0;

uint8_t  trip1 = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <kalman_filter+0xe0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <kalman_filter+0xe4>)
 80005ae:	ed93 7a00 	vldr	s14, [r3]
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <kalman_filter+0xe8>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <kalman_filter+0xec>)
 80005be:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <kalman_filter+0xec>)
 80005c4:	edd3 6a00 	vldr	s13, [r3]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <kalman_filter+0xec>)
 80005ca:	ed93 7a00 	vldr	s14, [r3]
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <kalman_filter+0xf0>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <kalman_filter+0xf4>)
 80005de:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <kalman_filter+0xe0>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <kalman_filter+0xf4>)
 80005f2:	edd3 7a00 	vldr	s15, [r3]
 80005f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80005fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000602:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <kalman_filter+0xf4>)
 8000608:	edd3 7a00 	vldr	s15, [r3]
 800060c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <kalman_filter+0xec>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <kalman_filter+0xe4>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <kalman_filter+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <kalman_filter+0xec>)
 800062a:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <kalman_filter+0xf8>)
 8000638:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <kalman_filter+0xe0>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000642:	edd7 7a02 	vldr	s15, [r7, #8]
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <kalman_filter+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000652:	edd7 7a02 	vldr	s15, [r7, #8]
 8000656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065a:	ee17 3a90 	vmov	r3, s15
}
 800065e:	4618      	mov	r0, r3
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20009f4c 	.word	0x20009f4c
 8000670:	20009f44 	.word	0x20009f44
 8000674:	20000004 	.word	0x20000004
 8000678:	2000000c 	.word	0x2000000c
 800067c:	20000008 	.word	0x20000008
 8000680:	20009f48 	.word	0x20009f48
 8000684:	20009f40 	.word	0x20009f40
 8000688:	20009f50 	.word	0x20009f50

0800068c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
	conv_rate++;
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a38      	ldr	r2, [pc, #224]	; (8000784 <HAL_ADC_ConvCpltCallback+0xf8>)
 80006a2:	6013      	str	r3, [r2, #0]
	ad1_audio = ad1_raw[0]; //32;
 80006a4:	4b38      	ldr	r3, [pc, #224]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006ae:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1 = ad1_audio;

	if(buf_num == 1)
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d124      	bne.n	8000702 <HAL_ADC_ConvCpltCallback+0x76>
	{
		if(buf_idx < 2000)
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006c0:	d218      	bcs.n	80006f4 <HAL_ADC_ConvCpltCallback+0x68>
		{
			buf1[buf_idx] = ad1_audio;
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a31      	ldr	r2, [pc, #196]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4933      	ldr	r1, [pc, #204]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf2[buf_idx]);
			kalman_adc_int = kalman_filter(buf2[buf_idx]);
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 80006d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff56 	bl	800058c <kalman_filter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 80006e6:	601a      	str	r2, [r3, #0]
			buf_idx++;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a29      	ldr	r2, [pc, #164]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e02e      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 2;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e027      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}
	else if(buf_num == 2)
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d123      	bne.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
	{
		if(buf_idx < 2000)
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000712:	d218      	bcs.n	8000746 <HAL_ADC_ConvCpltCallback+0xba>
		{
			buf2[buf_idx] = ad1_audio;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1c      	ldr	r2, [pc, #112]	; (800078c <HAL_ADC_ConvCpltCallback+0x100>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	491f      	ldr	r1, [pc, #124]	; (800079c <HAL_ADC_ConvCpltCallback+0x110>)
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// <PWM OUTPUT> TIM1->CCR1 = kalman_filter(buf1[buf_idx]);
			kalman_adc_int = kalman_filter(buf1[buf_idx]);
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff2d 	bl	800058c <kalman_filter>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000738:	601a      	str	r2, [r3, #0]
			buf_idx++;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e005      	b.n	8000752 <HAL_ADC_ConvCpltCallback+0xc6>
		}
		else
		{
			buf_num = 1;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_ADC_ConvCpltCallback+0x104>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
			buf_idx = 0;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_ADC_ConvCpltCallback+0x108>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		}
	}

	if(kalman_adc_int > 320)
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800075a:	dd07      	ble.n	800076c <HAL_ADC_ConvCpltCallback+0xe0>
	{
		trip1 = 1;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x118>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000768:	f002 f85c 	bl	8002824 <HAL_GPIO_WritePin>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 800076c:	2301      	movs	r3, #1
 800076e:	461a      	mov	r2, r3
 8000770:	4905      	ldr	r1, [pc, #20]	; (8000788 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <HAL_ADC_ConvCpltCallback+0x120>)
 8000774:	f000 fe98 	bl	80014a8 <HAL_ADC_Start_DMA>

}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200002f0 	.word	0x200002f0
 8000784:	200002f4 	.word	0x200002f4
 8000788:	200002e4 	.word	0x200002e4
 800078c:	200002f8 	.word	0x200002f8
 8000790:	20000000 	.word	0x20000000
 8000794:	200002fc 	.word	0x200002fc
 8000798:	20000300 	.word	0x20000300
 800079c:	20005120 	.word	0x20005120
 80007a0:	20009f50 	.word	0x20009f50
 80007a4:	20009f54 	.word	0x20009f54
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000178 	.word	0x20000178

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint32_t a_shot = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  uint32_t b_shot = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fc89 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f887 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fa5d 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 fa3b 	bl	8000c44 <MX_DMA_Init>
  MX_ADC1_Init();
 80007ce:	f000 f8ed 	bl	80009ac <MX_ADC1_Init>
  MX_TIM2_Init();
 80007d2:	f000 f9eb 	bl	8000bac <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007d6:	f008 f9cb 	bl	8008b70 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80007da:	f000 f939 	bl	8000a50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start_IT(&hdma_adc1, SrcAddress, DstAddress, DataLength);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
 80007de:	2301      	movs	r3, #1
 80007e0:	461a      	mov	r2, r3
 80007e2:	4930      	ldr	r1, [pc, #192]	; (80008a4 <main+0xf4>)
 80007e4:	4830      	ldr	r0, [pc, #192]	; (80008a8 <main+0xf8>)
 80007e6:	f000 fe5f 	bl	80014a8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 80007ea:	4830      	ldr	r0, [pc, #192]	; (80008ac <main+0xfc>)
 80007ec:	f003 ff30 	bl	8004650 <HAL_TIM_Base_Start>

  // <PWM OUTPUT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007f0:	2100      	movs	r1, #0
 80007f2:	482f      	ldr	r0, [pc, #188]	; (80008b0 <main+0x100>)
 80007f4:	f003 ffe0 	bl	80047b8 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <main+0x104>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  b_shot = HAL_GetTick();
 80007fe:	f000 fccf 	bl	80011a0 <HAL_GetTick>
 8000802:	6038      	str	r0, [r7, #0]
  HAL_Delay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fcd7 	bl	80011b8 <HAL_Delay>
  TIM1->CCR1 = 0;
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <main+0x104>)
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() > (a_shot + 1000))
 8000810:	f000 fcc6 	bl	80011a0 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800081c:	429a      	cmp	r2, r3
 800081e:	d92b      	bls.n	8000878 <main+0xc8>
	  {
		  a_shot = HAL_GetTick();
 8000820:	f000 fcbe 	bl	80011a0 <HAL_GetTick>
 8000824:	6078      	str	r0, [r7, #4]
		  if(adcConversionComplete == 1)
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <main+0x108>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d120      	bne.n	8000870 <main+0xc0>
		  {
			  adcConversionComplete = 0;
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <main+0x108>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
			  //ad1_audio = ad1_raw[0] / 32; // map(ad1_raw[1], 0, 4096, 0, 254);
			  //sprintf(strA1, "A1:%d,Rate:%d,Map:%d\n", ad1_raw[0], conv_rate, ad1_audio);
			  sprintf(strA1, "A1:%d,Kalman:%d,Map:%d,Rate:%d\n", ad1_raw[0], kalman_adc_int, ad1_audio, conv_rate); // @suppress("Float formatting support")
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <main+0xf4>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <main+0x10c>)
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <main+0x110>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <main+0x114>)
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	4602      	mov	r2, r0
 8000850:	491d      	ldr	r1, [pc, #116]	; (80008c8 <main+0x118>)
 8000852:	481e      	ldr	r0, [pc, #120]	; (80008cc <main+0x11c>)
 8000854:	f008 fe9c 	bl	8009590 <siprintf>
			  CDC_Transmit_FS(strA1, strlen(strA1));
 8000858:	481c      	ldr	r0, [pc, #112]	; (80008cc <main+0x11c>)
 800085a:	f7ff fcc1 	bl	80001e0 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	4619      	mov	r1, r3
 8000864:	4819      	ldr	r0, [pc, #100]	; (80008cc <main+0x11c>)
 8000866:	f008 fa41 	bl	8008cec <CDC_Transmit_FS>
			  conv_rate = 0;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <main+0x114>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
			  //In the video example following function is called at the end of every conversion.
			  //But my goal is to start the conversion from the trigger of the TIM2
			  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ad1_raw, adcChannelCount);
		  }

		  CDC_Transmit_FS(".", 1);
 8000870:	2101      	movs	r1, #1
 8000872:	4817      	ldr	r0, [pc, #92]	; (80008d0 <main+0x120>)
 8000874:	f008 fa3a 	bl	8008cec <CDC_Transmit_FS>
	  }

	  if(HAL_GetTick() > (b_shot + 3000))
 8000878:	f000 fc92 	bl	80011a0 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000884:	429a      	cmp	r2, r3
 8000886:	d9c3      	bls.n	8000810 <main+0x60>
	  {
		  b_shot = HAL_GetTick();
 8000888:	f000 fc8a 	bl	80011a0 <HAL_GetTick>
 800088c:	6038      	str	r0, [r7, #0]

		  TIM1->CCR1 = 250;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <main+0x104>)
 8000890:	22fa      	movs	r2, #250	; 0xfa
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(10);
 8000894:	200a      	movs	r0, #10
 8000896:	f000 fc8f 	bl	80011b8 <HAL_Delay>
		  TIM1->CCR1 = 0;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <main+0x104>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
	  if(HAL_GetTick() > (a_shot + 1000))
 80008a0:	e7b6      	b.n	8000810 <main+0x60>
 80008a2:	bf00      	nop
 80008a4:	200002e4 	.word	0x200002e4
 80008a8:	20000178 	.word	0x20000178
 80008ac:	20000268 	.word	0x20000268
 80008b0:	20000220 	.word	0x20000220
 80008b4:	40010000 	.word	0x40010000
 80008b8:	200002f0 	.word	0x200002f0
 80008bc:	20009f50 	.word	0x20009f50
 80008c0:	200002f8 	.word	0x200002f8
 80008c4:	200002f4 	.word	0x200002f4
 80008c8:	08009ef0 	.word	0x08009ef0
 80008cc:	200002b0 	.word	0x200002b0
 80008d0:	08009f10 	.word	0x08009f10

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 fe74 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <SystemClock_Config+0xd0>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <SystemClock_Config+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xd4>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000948:	2319      	movs	r3, #25
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800094c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000952:	2304      	movs	r3, #4
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000956:	2307      	movs	r3, #7
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	4618      	mov	r0, r3
 8000960:	f003 f9f6 	bl	8003d50 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800096a:	f000 f9db 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fc58 	bl	8004240 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000996:	f000 f9c5 	bl	8000d24 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <MX_ADC1_Init+0xa0>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_ADC1_Init+0x9c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_ADC1_Init+0x9c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_ADC1_Init+0x9c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_ADC1_Init+0x9c>)
 8000a12:	f000 fbf5 	bl	8001200 <HAL_ADC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a1c:	f000 f982 	bl	8000d24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_ADC1_Init+0x9c>)
 8000a32:	f000 fe47 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a3c:	f000 f972 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000178 	.word	0x20000178
 8000a4c:	40012000 	.word	0x40012000

08000a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2220      	movs	r2, #32
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f008 fda1 	bl	80095d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000a90:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <MX_TIM1_Init+0x158>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000a94:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000aa2:	22fe      	movs	r2, #254	; 0xfe
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aac:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab2:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab8:	483a      	ldr	r0, [pc, #232]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000aba:	f003 fd79 	bl	80045b0 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ac4:	f000 f92e 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000ad6:	f003 ffe1 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ae0:	f000 f920 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae4:	482f      	ldr	r0, [pc, #188]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000ae6:	f003 fe0d 	bl	8004704 <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000af0:	f000 f918 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b00:	4619      	mov	r1, r3
 8000b02:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000b04:	f004 fb5e 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b0e:	f000 f909 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 8;
 8000b16:	2308      	movs	r3, #8
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000b38:	f003 feee 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b42:	f000 f8ef 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8000b46:	230a      	movs	r3, #10
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000b54:	f003 fee0 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000b5e:	f000 f8e1 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000b86:	f004 fb8b 	bl	80052a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b90:	f000 f8c8 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM1_Init+0x154>)
 8000b96:	f000 f9a9 	bl	8000eec <HAL_TIM_MspPostInit>

}
 8000b9a:	bf00      	nop
 8000b9c:	3758      	adds	r7, #88	; 0x58
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000220 	.word	0x20000220
 8000ba8:	40010000 	.word	0x40010000

08000bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bde:	2232      	movs	r2, #50	; 0x32
 8000be0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000bf0:	f003 fcde 	bl	80045b0 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 f893 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000c0c:	f003 ff46 	bl	8004a9c <HAL_TIM_ConfigClockSource>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f885 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM2_Init+0x94>)
 8000c28:	f004 facc 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c32:	f000 f877 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000268 	.word	0x20000268

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_DMA_Init+0x3c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <MX_DMA_Init+0x3c>)
 8000c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_DMA_Init+0x3c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2038      	movs	r0, #56	; 0x38
 8000c6c:	f001 f8af 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c70:	2038      	movs	r0, #56	; 0x38
 8000c72:	f001 f8c8 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_GPIO_Init+0x98>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000cf4:	f001 fd96 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0x9c>)
 8000d10:	f001 fc04 	bl	800251c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <HAL_ADC_MspInit+0xec>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d15f      	bne.n	8000e62 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_ADC_MspInit+0xf0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <HAL_ADC_MspInit+0xf4>)
 8000dee:	f001 fb95 	bl	800251c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <HAL_ADC_MspInit+0xfc>)
 8000df6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e38:	f001 f800 	bl	8001e3c <HAL_DMA_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e42:	f7ff ff6f 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_ADC_MspInit+0xf8>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2012      	movs	r0, #18
 8000e58:	f000 ffb9 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e5c:	2012      	movs	r0, #18
 8000e5e:	f000 ffd2 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012000 	.word	0x40012000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	200001c0 	.word	0x200001c0
 8000e7c:	40026410 	.word	0x40026410

08000e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <HAL_TIM_Base_MspInit+0x64>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d10e      	bne.n	8000eb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eae:	e012      	b.n	8000ed6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_TIM_Base_MspInit+0x68>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <HAL_TIM_MspPostInit+0x68>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d11e      	bne.n	8000f4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_TIM_MspPostInit+0x6c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_TIM_MspPostInit+0x6c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_TIM_MspPostInit+0x6c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_TIM_MspPostInit+0x70>)
 8000f48:	f001 fae8 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010000 	.word	0x40010000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8e4 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <ADC_IRQHandler+0x10>)
 8000fba:	f000 f964 	bl	8001286 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000178 	.word	0x20000178

08000fc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fce:	f001 f83b 	bl	8002048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001c0 	.word	0x200001c0

08000fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <OTG_FS_IRQHandler+0x10>)
 8000fe2:	f001 fd88 	bl	8002af6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000ac40 	.word	0x2000ac40

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f008 fade 	bl	80095e0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20010000 	.word	0x20010000
 8001050:	00000400 	.word	0x00000400
 8001054:	20009f58 	.word	0x20009f58
 8001058:	2000b4b8 	.word	0x2000b4b8

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f008 fa9d 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fb7d 	bl	80007b0 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80010c4:	08009fb8 	.word	0x08009fb8
  ldr r2, =_sbss
 80010c8:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80010cc:	2000b4b4 	.word	0x2000b4b4

080010d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <DMA1_Stream0_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fe5b 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fe12 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fe73 	bl	8001e22 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 fe3b 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000010 	.word	0x20000010
 8001170:	20000018 	.word	0x20000018
 8001174:	20000014 	.word	0x20000014

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000018 	.word	0x20000018
 800119c:	20009f5c 	.word	0x20009f5c

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20009f5c 	.word	0x20009f5c

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e033      	b.n	800127e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fdae 	bl	8000d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001246:	f023 0302 	bic.w	r3, r3, #2
 800124a:	f043 0202 	orr.w	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fb58 	bl	8001908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
 800126e:	e001      	b.n	8001274 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d049      	beq.n	8001350 <HAL_ADC_IRQHandler+0xca>
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d046      	beq.n	8001350 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12b      	bne.n	8001340 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d127      	bne.n	8001340 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001308:	2b00      	cmp	r3, #0
 800130a:	d119      	bne.n	8001340 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0220 	bic.w	r2, r2, #32
 800131a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff f9a3 	bl	800068c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0212 	mvn.w	r2, #18
 800134e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d057      	beq.n	8001416 <HAL_ADC_IRQHandler+0x190>
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d054      	beq.n	8001416 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d139      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d12b      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d124      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11d      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d119      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fbfc 	bl	8001c04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f06f 020c 	mvn.w	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001424:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <HAL_ADC_IRQHandler+0x1d6>
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10d      	bne.n	800145c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f925 	bl	800169c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 0201 	mvn.w	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_ADC_IRQHandler+0x218>
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d012      	beq.n	800149e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0220 	mvn.w	r2, #32
 800148c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f90e 	bl	80016b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f06f 0220 	mvn.w	r2, #32
 800149c:	601a      	str	r2, [r3, #0]
  }
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Start_DMA+0x1e>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e0ce      	b.n	8001664 <HAL_ADC_Start_DMA+0x1bc>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d018      	beq.n	800150e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_ADC_Start_DMA+0x1c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_ADC_Start_DMA+0x1c8>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9a      	lsrs	r2, r3, #18
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001500:	e002      	b.n	8001508 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	3b01      	subs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800151c:	d107      	bne.n	800152e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800152c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 8086 	bne.w	800164a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157c:	d106      	bne.n	800158c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f023 0206 	bic.w	r2, r3, #6
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
 800158a:	e002      	b.n	8001592 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159a:	4b36      	ldr	r3, [pc, #216]	; (8001674 <HAL_ADC_Start_DMA+0x1cc>)
 800159c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	4a35      	ldr	r2, [pc, #212]	; (8001678 <HAL_ADC_Start_DMA+0x1d0>)
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	4a34      	ldr	r2, [pc, #208]	; (800167c <HAL_ADC_Start_DMA+0x1d4>)
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	4a33      	ldr	r2, [pc, #204]	; (8001680 <HAL_ADC_Start_DMA+0x1d8>)
 80015b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	334c      	adds	r3, #76	; 0x4c
 80015ea:	4619      	mov	r1, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f000 fcd2 	bl	8001f98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10f      	bne.n	8001620 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d129      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	e020      	b.n	8001662 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_ADC_Start_DMA+0x1dc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d11b      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1ba>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d114      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00b      	b.n	8001662 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000010 	.word	0x20000010
 8001670:	431bde83 	.word	0x431bde83
 8001674:	40012300 	.word	0x40012300
 8001678:	08001b01 	.word	0x08001b01
 800167c:	08001bbb 	.word	0x08001bbb
 8001680:	08001bd7 	.word	0x08001bd7
 8001684:	40012000 	.word	0x40012000

08001688 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1c>
 80016dc:	2302      	movs	r3, #2
 80016de:	e105      	b.n	80018ec <HAL_ADC_ConfigChannel+0x228>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d925      	bls.n	800173c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	4603      	mov	r3, r0
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4403      	add	r3, r0
 800172e:	3b1e      	subs	r3, #30
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	e022      	b.n	8001782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	2207      	movs	r2, #7
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6919      	ldr	r1, [r3, #16]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	4603      	mov	r3, r0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4403      	add	r3, r0
 8001778:	409a      	lsls	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b06      	cmp	r3, #6
 8001788:	d824      	bhi.n	80017d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b05      	subs	r3, #5
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b05      	subs	r3, #5
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	e04c      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d824      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b23      	subs	r3, #35	; 0x23
 80017ee:	221f      	movs	r2, #31
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b23      	subs	r3, #35	; 0x23
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
 8001824:	e023      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b41      	subs	r3, #65	; 0x41
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b41      	subs	r3, #65	; 0x41
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_ADC_ConfigChannel+0x234>)
 8001870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_ADC_ConfigChannel+0x238>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d109      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1cc>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d105      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_ADC_ConfigChannel+0x238>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d123      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d003      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x1e6>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b11      	cmp	r3, #17
 80018a8:	d11b      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d111      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_ADC_ConfigChannel+0x23c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x240>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0c9a      	lsrs	r2, r3, #18
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40012300 	.word	0x40012300
 80018fc:	40012000 	.word	0x40012000
 8001900:	20000010 	.word	0x20000010
 8001904:	431bde83 	.word	0x431bde83

08001908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <ADC_Init+0x1f0>)
 8001912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	431a      	orrs	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	021a      	lsls	r2, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <ADC_Init+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e00f      	b.n	8001a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0202 	bic.w	r2, r2, #2
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
 8001a20:	005a      	lsls	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	035a      	lsls	r2, r3, #13
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e007      	b.n	8001a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	051a      	lsls	r2, r3, #20
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001abe:	025a      	lsls	r2, r3, #9
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	029a      	lsls	r2, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40012300 	.word	0x40012300
 8001afc:	0f000001 	.word	0x0f000001

08001b00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13c      	bne.n	8001b94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d12b      	bne.n	8001b8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d127      	bne.n	8001b8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d119      	bne.n	8001b8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0220 	bic.w	r2, r2, #32
 8001b66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fd7d 	bl	800068c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b92:	e00e      	b.n	8001bb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fd85 	bl	80016b0 <HAL_ADC_ErrorCallback>
}
 8001ba6:	e004      	b.n	8001bb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff fd5d 	bl	8001688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f043 0204 	orr.w	r2, r3, #4
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff fd5a 	bl	80016b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff3e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff31 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff f9aa 	bl	80011a0 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e099      	b.n	8001f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e78:	e00f      	b.n	8001e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7a:	f7ff f991 	bl	80011a0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d908      	bls.n	8001e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2203      	movs	r2, #3
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e078      	b.n	8001f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e8      	bne.n	8001e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_DMA_Init+0x158>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d107      	bne.n	8001f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4313      	orrs	r3, r2
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d117      	bne.n	8001f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa6f 	bl	8002424 <DMA_CheckFifoParam>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa26 	bl	80023b8 <DMA_CalcBaseAndBitshift>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	f010803f 	.word	0xf010803f

08001f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Start_IT+0x26>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e040      	b.n	8002040 <HAL_DMA_Start_IT+0xa8>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12f      	bne.n	8002032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f9b8 	bl	800235c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	223f      	movs	r2, #63	; 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0216 	orr.w	r2, r2, #22
 8002006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e005      	b.n	800203e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002054:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_DMA_IRQHandler+0x248>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <HAL_DMA_IRQHandler+0x24c>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2208      	movs	r2, #8
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0204 	bic.w	r2, r2, #4
 800209a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2208      	movs	r2, #8
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2201      	movs	r2, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2201      	movs	r2, #1
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f043 0202 	orr.w	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2204      	movs	r2, #4
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2204      	movs	r2, #4
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0204 	orr.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2210      	movs	r2, #16
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d043      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03c      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2210      	movs	r2, #16
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d018      	beq.n	800218a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d024      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	e01f      	b.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e016      	b.n	80021b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0208 	bic.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2220      	movs	r2, #32
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 808f 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8087 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	2220      	movs	r2, #32
 80021e0:	409a      	lsls	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d136      	bne.n	8002260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0216 	bic.w	r2, r2, #22
 8002200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_DMA_IRQHandler+0x1da>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0208 	bic.w	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	223f      	movs	r2, #63	; 0x3f
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002252:	2b00      	cmp	r3, #0
 8002254:	d07e      	beq.n	8002354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
        }
        return;
 800225e:	e079      	b.n	8002354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	2b00      	cmp	r3, #0
 8002282:	d031      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
 800228c:	e02c      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
 800228e:	bf00      	nop
 8002290:	20000010 	.word	0x20000010
 8002294:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e01e      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0210 	bic.w	r2, r2, #16
 80022c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2205      	movs	r2, #5
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3301      	adds	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d307      	bcc.n	8002330 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f2      	bne.n	8002314 <HAL_DMA_IRQHandler+0x2cc>
 800232e:	e000      	b.n	8002332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e000      	b.n	8002356 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002354:	bf00      	nop
    }
  }
}
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002378:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d108      	bne.n	800239c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800239a:	e007      	b.n	80023ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3b10      	subs	r3, #16
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <DMA_CalcBaseAndBitshift+0x64>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <DMA_CalcBaseAndBitshift+0x68>)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d909      	bls.n	80023fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	1d1a      	adds	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58
 80023f8:	e007      	b.n	800240a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	aaaaaaab 	.word	0xaaaaaaab
 8002420:	08009f6c 	.word	0x08009f6c

08002424 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11f      	bne.n	800247e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d856      	bhi.n	80024f2 <DMA_CheckFifoParam+0xce>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <DMA_CheckFifoParam+0x28>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	0800245d 	.word	0x0800245d
 8002450:	0800246f 	.word	0x0800246f
 8002454:	0800245d 	.word	0x0800245d
 8002458:	080024f3 	.word	0x080024f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d046      	beq.n	80024f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e043      	b.n	80024f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002476:	d140      	bne.n	80024fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e03d      	b.n	80024fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d121      	bne.n	80024cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d837      	bhi.n	80024fe <DMA_CheckFifoParam+0xda>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <DMA_CheckFifoParam+0x70>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024ab 	.word	0x080024ab
 800249c:	080024a5 	.word	0x080024a5
 80024a0:	080024bd 	.word	0x080024bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e030      	b.n	800250c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d025      	beq.n	8002502 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e022      	b.n	8002502 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ca:	e01c      	b.n	8002506 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d903      	bls.n	80024da <DMA_CheckFifoParam+0xb6>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d003      	beq.n	80024e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d8:	e018      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      break;
 80024de:	e015      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00e      	beq.n	800250a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e00b      	b.n	800250a <DMA_CheckFifoParam+0xe6>
      break;
 80024f2:	bf00      	nop
 80024f4:	e00a      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e008      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e006      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;   
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
    }
  } 
  
  return status; 
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e159      	b.n	80027ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8148 	bne.w	80027e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a2 	beq.w	80027e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a56      	ldr	r2, [pc, #344]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x2ec>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a49      	ldr	r2, [pc, #292]	; (800280c <HAL_GPIO_Init+0x2f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x202>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a48      	ldr	r2, [pc, #288]	; (8002810 <HAL_GPIO_Init+0x2f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x1fe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_GPIO_Init+0x2f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x1fa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_GPIO_Init+0x2fc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x1f6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a45      	ldr	r2, [pc, #276]	; (800281c <HAL_GPIO_Init+0x300>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x1f2>
 800270a:	2304      	movs	r3, #4
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800270e:	2307      	movs	r3, #7
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x204>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x204>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800271e:	2300      	movs	r3, #0
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	4935      	ldr	r1, [pc, #212]	; (8002808 <HAL_GPIO_Init+0x2ec>)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002762:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_GPIO_Init+0x304>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800278c:	4a24      	ldr	r2, [pc, #144]	; (8002820 <HAL_GPIO_Init+0x304>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b6:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f aea2 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002858:	b08f      	sub	sp, #60	; 0x3c
 800285a:	af0a      	add	r7, sp, #40	; 0x28
 800285c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e10f      	b.n	8002a88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f006 fb7a 	bl	8008f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2203      	movs	r2, #3
 800288c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fe61 	bl	800556e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	687e      	ldr	r6, [r7, #4]
 80028b4:	466d      	mov	r5, sp
 80028b6:	f106 0410 	add.w	r4, r6, #16
 80028ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ca:	1d33      	adds	r3, r6, #4
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f002 fd38 	bl	8005344 <USB_CoreInit>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0d0      	b.n	8002a88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 fe4f 	bl	8005590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e04a      	b.n	800298e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	333d      	adds	r3, #61	; 0x3d
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	b298      	uxth	r0, r3
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3344      	adds	r3, #68	; 0x44
 8002934:	4602      	mov	r2, r0
 8002936:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3340      	adds	r3, #64	; 0x40
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3348      	adds	r3, #72	; 0x48
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334c      	adds	r3, #76	; 0x4c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	3354      	adds	r3, #84	; 0x54
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	3301      	adds	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3af      	bcc.n	80028f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e044      	b.n	8002a28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	3301      	adds	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3b5      	bcc.n	800299e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	687e      	ldr	r6, [r7, #4]
 8002a3a:	466d      	mov	r5, sp
 8002a3c:	f106 0410 	add.w	r4, r6, #16
 8002a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a50:	1d33      	adds	r3, r6, #4
 8002a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a54:	6838      	ldr	r0, [r7, #0]
 8002a56:	f002 fde7 	bl	8005628 <USB_DevInit>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e00d      	b.n	8002a88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 ff36 	bl	80068f2 <USB_DevDisconnect>

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_PCD_Start+0x1c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e020      	b.n	8002aee <HAL_PCD_Start+0x5e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d109      	bne.n	8002ad0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d005      	beq.n	8002ad0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fd39 	bl	800554c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fee6 	bl	80068b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b08d      	sub	sp, #52	; 0x34
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 ffa4 	bl	8006a5a <USB_GetMode>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 848a 	bne.w	800342e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 ff08 	bl	8006934 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8480 	beq.w	800342c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fef5 	bl	8006934 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d107      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f002 0202 	and.w	r2, r2, #2
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fee3 	bl	8006934 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d161      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0210 	bic.w	r2, r2, #16
 8002b86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	0c5b      	lsrs	r3, r3, #17
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d124      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d035      	beq.n	8002c2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6a38      	ldr	r0, [r7, #32]
 8002bd4:	f003 fd1a 	bl	800660c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be4:	441a      	add	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf6:	441a      	add	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	e016      	b.n	8002c2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	0c5b      	lsrs	r3, r3, #17
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d110      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c10:	2208      	movs	r2, #8
 8002c12:	4619      	mov	r1, r3
 8002c14:	6a38      	ldr	r0, [r7, #32]
 8002c16:	f003 fcf9 	bl	800660c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c26:	441a      	add	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0210 	orr.w	r2, r2, #16
 8002c3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fe77 	bl	8006934 <USB_ReadInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c50:	f040 80a7 	bne.w	8002da2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fe7c 	bl	800695a <USB_ReadDevAllOutEpInterrupt>
 8002c62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c64:	e099      	b.n	8002d9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808e 	beq.w	8002d8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fea0 	bl	80069c2 <USB_ReadDevOutEPInterrupt>
 8002c82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fec2 	bl	8003a2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 ff98 	bl	8003bfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d030      	beq.n	8002d54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d109      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	78db      	ldrb	r3, [r3, #3]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d108      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f006 fa19 	bl	8009174 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2302      	movs	r3, #2
 8002d52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d86:	461a      	mov	r2, r3
 8002d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	3301      	adds	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f af62 	bne.w	8002c66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fdc4 	bl	8006934 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db6:	f040 80db 	bne.w	8002f70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fde5 	bl	800698e <USB_ReadDevAllInEpInterrupt>
 8002dc4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dca:	e0cd      	b.n	8002f68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80c2 	beq.w	8002f5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fe0b 	bl	80069fe <USB_ReadDevInEPInterrupt>
 8002de8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d057      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e14:	4013      	ands	r3, r2
 8002e16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	2301      	movs	r3, #1
 8002e28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d132      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	334c      	adds	r3, #76	; 0x4c
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4403      	add	r3, r0
 8002e52:	3348      	adds	r3, #72	; 0x48
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4419      	add	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4403      	add	r3, r0
 8002e66:	334c      	adds	r3, #76	; 0x4c
 8002e68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d113      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x3a2>
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3354      	adds	r3, #84	; 0x54
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e90:	461a      	mov	r2, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	f003 fe12 	bl	8006abc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f006 f8ed 	bl	800907e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2310      	movs	r3, #16
 8002eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d023      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f04:	6a38      	ldr	r0, [r7, #32]
 8002f06:	f002 fcf3 	bl	80058f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	3338      	adds	r3, #56	; 0x38
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	78db      	ldrb	r3, [r3, #3]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f006 f930 	bl	8009198 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f44:	461a      	mov	r2, r3
 8002f46:	2302      	movs	r3, #2
 8002f48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fcdb 	bl	8003912 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f af2e 	bne.w	8002dcc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fcdd 	bl	8006934 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f84:	d122      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d108      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fac:	2100      	movs	r1, #0
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fec2 	bl	8003d38 <HAL_PCDEx_LPM_Callback>
 8002fb4:	e002      	b.n	8002fbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f006 f8ce 	bl	8009158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fcaf 	bl	8006934 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	d112      	bne.n	8003008 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f006 f88a 	bl	800910c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003006:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fc91 	bl	8006934 <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	f040 80b7 	bne.w	800318e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2110      	movs	r1, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fc58 	bl	80058f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003044:	e046      	b.n	80030d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003058:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	440a      	add	r2, r1
 8003070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003074:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003078:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800308c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309e:	0151      	lsls	r1, r2, #5
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	440a      	add	r2, r1
 80030a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030be:	0151      	lsls	r1, r2, #5
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	440a      	add	r2, r1
 80030c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	3301      	adds	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3b3      	bcc.n	8003046 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800310a:	f043 030b 	orr.w	r3, r3, #11
 800310e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003120:	f043 030b 	orr.w	r3, r3, #11
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	e015      	b.n	8003154 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800313a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800313e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314e:	f043 030b 	orr.w	r3, r3, #11
 8003152:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003162:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003166:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003178:	461a      	mov	r2, r3
 800317a:	f003 fc9f 	bl	8006abc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800318c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fbce 	bl	8006934 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	d124      	bne.n	80031ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fc64 	bl	8006a76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 fc19 	bl	80059ea <USB_GetDevSpeed>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681c      	ldr	r4, [r3, #0]
 80031c4:	f001 f9e8 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80031c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4620      	mov	r0, r4
 80031d4:	f002 f918 	bl	8005408 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f005 ff78 	bl	80090ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fb9e 	bl	8006934 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d10a      	bne.n	8003218 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f005 ff55 	bl	80090b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f002 0208 	and.w	r2, r2, #8
 8003216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fb89 	bl	8006934 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	d122      	bne.n	8003272 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e014      	b.n	8003268 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb27 	bl	80038b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d3e5      	bcc.n	800323e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fb5c 	bl	8006934 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003286:	d13b      	bne.n	8003300 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	e02b      	b.n	80032e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d115      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da12      	bge.n	80032e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	333f      	adds	r3, #63	; 0x3f
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fae8 	bl	80038b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	3301      	adds	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3ce      	bcc.n	800328e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fb15 	bl	8006934 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003314:	d155      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003316:	2301      	movs	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	e045      	b.n	80033a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d12e      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003344:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	da2b      	bge.n	80033a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003356:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800335a:	429a      	cmp	r2, r3
 800335c:	d121      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339e:	6053      	str	r3, [r2, #4]
            break;
 80033a0:	e007      	b.n	80033b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3b4      	bcc.n	800331c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 fab4 	bl	8006934 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d6:	d10a      	bne.n	80033ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f005 feef 	bl	80091bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fa9e 	bl	8006934 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d115      	bne.n	800342e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f005 fedf 	bl	80091d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e000      	b.n	800342e <HAL_PCD_IRQHandler+0x938>
      return;
 800342c:	bf00      	nop
    }
  }
}
 800342e:	3734      	adds	r7, #52	; 0x34
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_PCD_SetAddress+0x1a>
 800344a:	2302      	movs	r3, #2
 800344c:	e013      	b.n	8003476 <HAL_PCD_SetAddress+0x42>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f003 f9fc 	bl	8006864 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	4608      	mov	r0, r1
 8003488:	4611      	mov	r1, r2
 800348a:	461a      	mov	r2, r3
 800348c:	4603      	mov	r3, r0
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	460b      	mov	r3, r1
 8003492:	803b      	strh	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3338      	adds	r3, #56	; 0x38
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00f      	b.n	80034e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034f0:	883a      	ldrh	r2, [r7, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	78ba      	ldrb	r2, [r7, #2]
 80034fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d102      	bne.n	800351a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_PCD_EP_Open+0xaa>
 8003524:	2302      	movs	r3, #2
 8003526:	e00e      	b.n	8003546 <HAL_PCD_EP_Open+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	4618      	mov	r0, r3
 8003538:	f002 fa7c 	bl	8005a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003544:	7afb      	ldrb	r3, [r7, #11]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800355a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355e:	2b00      	cmp	r3, #0
 8003560:	da0f      	bge.n	8003582 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	3338      	adds	r3, #56	; 0x38
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	705a      	strb	r2, [r3, #1]
 8003580:	e00f      	b.n	80035a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_EP_Close+0x6e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e00e      	b.n	80035da <HAL_PCD_EP_Close+0x8c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 faba 	bl	8005b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	460b      	mov	r3, r1
 80035f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	7afb      	ldrb	r3, [r7, #11]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003624:	7afb      	ldrb	r3, [r7, #11]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	b2da      	uxtb	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	6979      	ldr	r1, [r7, #20]
 8003656:	f002 fd99 	bl	800618c <USB_EP0StartXfer>
 800365a:	e008      	b.n	800366e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	f002 fb47 	bl	8005cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 020f 	and.w	r2, r3, #15
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	460b      	mov	r3, r1
 80036b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3338      	adds	r3, #56	; 0x38
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2201      	movs	r2, #1
 80036e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e8:	7afb      	ldrb	r3, [r7, #11]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	6979      	ldr	r1, [r7, #20]
 800371a:	f002 fd37 	bl	800618c <USB_EP0StartXfer>
 800371e:	e008      	b.n	8003732 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	f002 fae5 	bl	8005cfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d901      	bls.n	800375a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e050      	b.n	80037fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800375a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	da0f      	bge.n	8003782 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	3338      	adds	r3, #56	; 0x38
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
 8003780:	e00d      	b.n	800379e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_SetStall+0x82>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e01e      	b.n	80037fc <HAL_PCD_EP_SetStall+0xc0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 ff75 	bl	80066bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	b2d9      	uxtb	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ec:	461a      	mov	r2, r3
 80037ee:	f003 f965 	bl	8006abc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d901      	bls.n	8003822 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da0f      	bge.n	800384a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	3338      	adds	r3, #56	; 0x38
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	705a      	strb	r2, [r3, #1]
 8003848:	e00f      	b.n	800386a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_ClrStall+0x86>
 8003886:	2302      	movs	r3, #2
 8003888:	e00e      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 ff7d 	bl	8006798 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da0c      	bge.n	80038de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3338      	adds	r3, #56	; 0x38
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	3304      	adds	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e00c      	b.n	80038f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 020f 	and.w	r2, r3, #15
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 fd9c 	bl	800643c <USB_EPStopXfer>
 8003904:	4603      	mov	r3, r0
 8003906:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003908:	7afb      	ldrb	r3, [r7, #11]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3338      	adds	r3, #56	; 0x38
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	3304      	adds	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	429a      	cmp	r2, r3
 8003944:	d901      	bls.n	800394a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06c      	b.n	8003a24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d902      	bls.n	8003966 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3303      	adds	r3, #3
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396e:	e02b      	b.n	80039c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d902      	bls.n	800398c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3303      	adds	r3, #3
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6919      	ldr	r1, [r3, #16]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f002 fdf0 	bl	8006590 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d809      	bhi.n	80039f2 <PCD_WriteEmptyTxFifo+0xe0>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d203      	bcs.n	80039f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1be      	bne.n	8003970 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d811      	bhi.n	8003a22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	2201      	movs	r2, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1e:	4013      	ands	r3, r2
 8003a20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	333c      	adds	r3, #60	; 0x3c
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d17b      	bne.n	8003b5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4a61      	ldr	r2, [pc, #388]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f240 80b9 	bls.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b3 	beq.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a94:	6093      	str	r3, [r2, #8]
 8003a96:	e0a7      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e098      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 8093 	bne.w	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d90f      	bls.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	e07e      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d114      	bne.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b34:	461a      	mov	r2, r3
 8003b36:	2101      	movs	r1, #1
 8003b38:	f002 ffc0 	bl	8006abc <USB_EP0_OutStart>
 8003b3c:	e006      	b.n	8003b4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f005 fa78 	bl	8009048 <HAL_PCD_DataOutStageCallback>
 8003b58:	e046      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d124      	bne.n	8003bac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e032      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f005 fa4f 	bl	8009048 <HAL_PCD_DataOutStageCallback>
 8003baa:	e01d      	b.n	8003be8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	f002 ff70 	bl	8006abc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f005 fa30 	bl	8009048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	4f54300a 	.word	0x4f54300a
 8003bf8:	4f54310a 	.word	0x4f54310a

08003bfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	333c      	adds	r3, #60	; 0x3c
 8003c14:	3304      	adds	r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d90e      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f005 f9e7 	bl	8009024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d90c      	bls.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f002 ff22 	bl	8006abc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	4f54300a 	.word	0x4f54300a

08003c88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ca6:	883b      	ldrh	r3, [r7, #0]
 8003ca8:	0419      	lsls	r1, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb4:	e028      	b.n	8003d08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e00d      	b.n	8003ce6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3340      	adds	r3, #64	; 0x40
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3ec      	bcc.n	8003cca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	0418      	lsls	r0, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	4302      	orrs	r2, r0
 8003d00:	3340      	adds	r3, #64	; 0x40
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e267      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d075      	beq.n	8003e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6e:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d00c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b85      	ldr	r3, [pc, #532]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d86:	4b82      	ldr	r3, [pc, #520]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x108>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e242      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x74>
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a75      	ldr	r2, [pc, #468]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x98>
 8003dce:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6f      	ldr	r2, [pc, #444]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6c      	ldr	r2, [pc, #432]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003de8:	4b69      	ldr	r3, [pc, #420]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a68      	ldr	r2, [pc, #416]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a65      	ldr	r2, [pc, #404]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd f9ca 	bl	80011a0 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd f9c6 	bl	80011a0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e207      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xc0>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fd f9b6 	bl	80011a0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd f9b2 	bl	80011a0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e1f3      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b51      	ldr	r3, [pc, #324]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0xe8>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d063      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e7e:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x152>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1c7      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4937      	ldr	r1, [pc, #220]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e03a      	b.n	8003f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_OscConfig+0x244>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fd f96b 	bl	80011a0 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fd f967 	bl	80011a0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1a8      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4925      	ldr	r1, [pc, #148]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_OscConfig+0x244>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd f94a 	bl	80011a0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd f946 	bl	80011a0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e187      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d036      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_RCC_OscConfig+0x248>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fd f92a 	bl	80011a0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fd f926 	bl	80011a0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e167      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_OscConfig+0x240>)
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x200>
 8003f6e:	e01b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCC_OscConfig+0x248>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fd f913 	bl	80011a0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	e00e      	b.n	8003f9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fd f90f 	bl	80011a0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d907      	bls.n	8003f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e150      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	42470000 	.word	0x42470000
 8003f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ea      	bne.n	8003f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8097 	beq.w	80040e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b7d      	ldr	r3, [pc, #500]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a7c      	ldr	r2, [pc, #496]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b7a      	ldr	r3, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b77      	ldr	r3, [pc, #476]	; (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4b74      	ldr	r3, [pc, #464]	; (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	; (80041c4 <HAL_RCC_OscConfig+0x474>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7fd f8cf 	bl	80011a0 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7fd f8cb 	bl	80011a0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e10c      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_OscConfig+0x474>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x2ea>
 800402c:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a63      	ldr	r2, [pc, #396]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	e01c      	b.n	8004074 <HAL_RCC_OscConfig+0x324>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b05      	cmp	r3, #5
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x30c>
 8004042:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a5e      	ldr	r2, [pc, #376]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a5b      	ldr	r2, [pc, #364]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0x324>
 800405c:	4b58      	ldr	r3, [pc, #352]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4a57      	ldr	r2, [pc, #348]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	6713      	str	r3, [r2, #112]	; 0x70
 8004068:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a54      	ldr	r2, [pc, #336]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800406e:	f023 0304 	bic.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd f890 	bl	80011a0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fd f88c 	bl	80011a0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0cb      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ee      	beq.n	8004084 <HAL_RCC_OscConfig+0x334>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7fd f87a 	bl	80011a0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd f876 	bl	80011a0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0b5      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ee      	bne.n	80040b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80a1 	beq.w	8004230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d05c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d141      	bne.n	8004186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_RCC_OscConfig+0x478>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd f84a 	bl	80011a0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd f846 	bl	80011a0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e087      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	3b01      	subs	r3, #1
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	491b      	ldr	r1, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x478>)
 800415a:	2201      	movs	r2, #1
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fd f81f 	bl	80011a0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004166:	f7fd f81b 	bl	80011a0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e05c      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x416>
 8004184:	e054      	b.n	8004230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_RCC_OscConfig+0x478>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd f808 	bl	80011a0 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd f804 	bl	80011a0 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e045      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x444>
 80041b2:	e03d      	b.n	8004230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e038      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000
 80041c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x4ec>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d028      	beq.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d121      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11a      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041fc:	4013      	ands	r3, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	4293      	cmp	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	3b01      	subs	r3, #1
 8004216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0cc      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d90c      	bls.n	800427c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0b8      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800429e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b8:	4b50      	ldr	r3, [pc, #320]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	494d      	ldr	r1, [pc, #308]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d044      	beq.n	8004360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d119      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e067      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4934      	ldr	r1, [pc, #208]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fc ff36 	bl	80011a0 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fc ff32 	bl	80011a0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e04f      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d20c      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e032      	b.n	80043ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4916      	ldr	r1, [pc, #88]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043c6:	f000 f821 	bl	800440c <HAL_RCC_GetSysClockFreq>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	490a      	ldr	r1, [pc, #40]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc fe96 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	08009f5c 	.word	0x08009f5c
 8004404:	20000010 	.word	0x20000010
 8004408:	20000014 	.word	0x20000014

0800440c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800440c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004410:	b090      	sub	sp, #64	; 0x40
 8004412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
 8004418:	2300      	movs	r3, #0
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800441c:	2300      	movs	r3, #0
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d00d      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x40>
 8004430:	2b08      	cmp	r3, #8
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x34>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0x3a>
 800443e:	e09b      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b53      	ldr	r3, [pc, #332]	; (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004444:	e09b      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004446:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800444a:	e098      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800444c:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	2200      	movs	r2, #0
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	627a      	str	r2, [r7, #36]	; 0x24
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004474:	2100      	movs	r1, #0
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004478:	fb03 f201 	mul.w	r2, r3, r1
 800447c:	2300      	movs	r3, #0
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	4413      	add	r3, r2
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <HAL_RCC_GetSysClockFreq+0x188>)
 8004486:	fba0 1202 	umull	r1, r2, r0, r2
 800448a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800448c:	460a      	mov	r2, r1
 800448e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004492:	4413      	add	r3, r2
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	2200      	movs	r2, #0
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044a6:	f7fb fef3 	bl	8000290 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4613      	mov	r3, r2
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b2:	e053      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	2200      	movs	r2, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	617a      	str	r2, [r7, #20]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	f04f 0000 	mov.w	r0, #0
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	0159      	lsls	r1, r3, #5
 80044d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044dc:	0150      	lsls	r0, r2, #5
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ebb2 080a 	subs.w	r8, r2, sl
 80044e6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004502:	eb63 0509 	sbc.w	r5, r3, r9
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	00eb      	lsls	r3, r5, #3
 8004510:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004514:	00e2      	lsls	r2, r4, #3
 8004516:	4614      	mov	r4, r2
 8004518:	461d      	mov	r5, r3
 800451a:	eb14 030a 	adds.w	r3, r4, sl
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	eb45 030b 	adc.w	r3, r5, fp
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004532:	4629      	mov	r1, r5
 8004534:	028b      	lsls	r3, r1, #10
 8004536:	4621      	mov	r1, r4
 8004538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800453c:	4621      	mov	r1, r4
 800453e:	028a      	lsls	r2, r1, #10
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	2200      	movs	r2, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	60fa      	str	r2, [r7, #12]
 800454c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004550:	f7fb fe9e 	bl	8000290 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetSysClockFreq+0x180>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800456c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetSysClockFreq+0x184>)
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004580:	4618      	mov	r0, r3
 8004582:	3740      	adds	r7, #64	; 0x40
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	017d7840 	.word	0x017d7840

08004598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000010 	.word	0x20000010

080045b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e041      	b.n	8004646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fc52 	bl	8000e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 fb1c 	bl	8004c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e03c      	b.n	80046e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1e      	ldr	r2, [pc, #120]	; (80046f0 <HAL_TIM_Base_Start+0xa0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_TIM_Base_Start+0x5c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d013      	beq.n	80046ac <HAL_TIM_Base_Start+0x5c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <HAL_TIM_Base_Start+0xa4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Start+0x5c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_TIM_Base_Start+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Start+0x5c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_TIM_Base_Start+0xac>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Start+0x5c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a16      	ldr	r2, [pc, #88]	; (8004700 <HAL_TIM_Base_Start+0xb0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40014000 	.word	0x40014000

08004704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e041      	b.n	800479a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f839 	bl	80047a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fa72 	bl	8004c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_TIM_PWM_Start+0x24>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e022      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d109      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x3e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	bf14      	ite	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	2300      	moveq	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	e015      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d109      	bne.n	8004810 <HAL_TIM_PWM_Start+0x58>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e008      	b.n	8004822 <HAL_TIM_PWM_Start+0x6a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e068      	b.n	80048fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0x82>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004838:	e013      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0x92>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	e00b      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	e003      	b.n	8004862 <HAL_TIM_PWM_Start+0xaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fc84 	bl	8005178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a23      	ldr	r2, [pc, #140]	; (8004904 <HAL_TIM_PWM_Start+0x14c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d107      	bne.n	800488a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <HAL_TIM_PWM_Start+0x14c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x10e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x10e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_TIM_PWM_Start+0x150>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x10e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <HAL_TIM_PWM_Start+0x154>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x10e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIM_PWM_Start+0x158>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Start+0x10e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_TIM_PWM_Start+0x15c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d111      	bne.n	80048ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d010      	beq.n	80048fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	e007      	b.n	80048fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40014000 	.word	0x40014000

08004918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004932:	2302      	movs	r3, #2
 8004934:	e0ae      	b.n	8004a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	f200 809f 	bhi.w	8004a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004981 	.word	0x08004981
 8004950:	08004a85 	.word	0x08004a85
 8004954:	08004a85 	.word	0x08004a85
 8004958:	08004a85 	.word	0x08004a85
 800495c:	080049c1 	.word	0x080049c1
 8004960:	08004a85 	.word	0x08004a85
 8004964:	08004a85 	.word	0x08004a85
 8004968:	08004a85 	.word	0x08004a85
 800496c:	08004a03 	.word	0x08004a03
 8004970:	08004a85 	.word	0x08004a85
 8004974:	08004a85 	.word	0x08004a85
 8004978:	08004a85 	.word	0x08004a85
 800497c:	08004a43 	.word	0x08004a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f9d0 	bl	8004d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
      break;
 80049be:	e064      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fa16 	bl	8004df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]
      break;
 8004a00:	e043      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fa61 	bl	8004ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0208 	orr.w	r2, r2, #8
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0204 	bic.w	r2, r2, #4
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	61da      	str	r2, [r3, #28]
      break;
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 faab 	bl	8004fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	61da      	str	r2, [r3, #28]
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0b4      	b.n	8004c22 <HAL_TIM_ConfigClockSource+0x186>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d03e      	beq.n	8004b70 <HAL_TIM_ConfigClockSource+0xd4>
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af6:	f200 8087 	bhi.w	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	f000 8086 	beq.w	8004c0e <HAL_TIM_ConfigClockSource+0x172>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	d87f      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b70      	cmp	r3, #112	; 0x70
 8004b0a:	d01a      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0xa6>
 8004b0c:	2b70      	cmp	r3, #112	; 0x70
 8004b0e:	d87b      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b60      	cmp	r3, #96	; 0x60
 8004b12:	d050      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d877      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b50      	cmp	r3, #80	; 0x50
 8004b1a:	d03c      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0xfa>
 8004b1c:	2b50      	cmp	r3, #80	; 0x50
 8004b1e:	d873      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d058      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d86f      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b30      	cmp	r3, #48	; 0x30
 8004b2a:	d064      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b30      	cmp	r3, #48	; 0x30
 8004b2e:	d86b      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d060      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d867      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d05c      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d05a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b40:	e062      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6899      	ldr	r1, [r3, #8]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f000 faf1 	bl	8005138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	609a      	str	r2, [r3, #8]
      break;
 8004b6e:	e04f      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f000 fada 	bl	8005138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b92:	609a      	str	r2, [r3, #8]
      break;
 8004b94:	e03c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 fa4e 	bl	8005044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2150      	movs	r1, #80	; 0x50
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 faa7 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e02c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 fa6d 	bl	80050a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2160      	movs	r1, #96	; 0x60
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa97 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e01c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 fa2e 	bl	8005044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2140      	movs	r1, #64	; 0x40
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fa87 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004bf4:	e00c      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f000 fa7e 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004c06:	e003      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0c:	e000      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <TIM_Base_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <TIM_Base_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <TIM_Base_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 0302 	bic.w	r3, r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <TIM_OC1_SetConfig+0xc8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10c      	bne.n	8004da2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f023 0308 	bic.w	r3, r3, #8
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <TIM_OC1_SetConfig+0xc8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d111      	bne.n	8004dce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	40010000 	.word	0x40010000

08004df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0210 	bic.w	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0320 	bic.w	r3, r3, #32
 8004e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <TIM_OC2_SetConfig+0xd4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10d      	bne.n	8004e74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <TIM_OC2_SetConfig+0xd4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d113      	bne.n	8004ea4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000

08004ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <TIM_OC3_SetConfig+0xd0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10d      	bne.n	8004f4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC3_SetConfig+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000

08004fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a10      	ldr	r2, [pc, #64]	; (8005040 <TIM_OC4_SetConfig+0x9c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d109      	bne.n	8005018 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	019b      	lsls	r3, r3, #6
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000

08005044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0201 	bic.w	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800506e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 030a 	bic.w	r3, r3, #10
 8005080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b087      	sub	sp, #28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0210 	bic.w	r2, r3, #16
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	031b      	lsls	r3, r3, #12
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	f043 0307 	orr.w	r3, r3, #7
 8005124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	021a      	lsls	r2, r3, #8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	431a      	orrs	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2201      	movs	r2, #1
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	43db      	mvns	r3, r3
 800519a:	401a      	ands	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d8:	2302      	movs	r3, #2
 80051da:	e050      	b.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1c      	ldr	r2, [pc, #112]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d013      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a16      	ldr	r2, [pc, #88]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a15      	ldr	r2, [pc, #84]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10c      	bne.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000

080052a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e03d      	b.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005344:	b084      	sub	sp, #16
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	f107 001c 	add.w	r0, r7, #28
 8005352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	d122      	bne.n	80053a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 fbee 	bl	8006b78 <USB_CoreReset>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e01a      	b.n	80053d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fbe2 	bl	8006b78 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
 80053ca:	e005      	b.n	80053d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d10b      	bne.n	80053f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f043 0206 	orr.w	r2, r3, #6
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005402:	b004      	add	sp, #16
 8005404:	4770      	bx	lr
	...

08005408 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d165      	bne.n	80054e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a41      	ldr	r2, [pc, #260]	; (8005524 <USB_SetTurnaroundTime+0x11c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d906      	bls.n	8005432 <USB_SetTurnaroundTime+0x2a>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a40      	ldr	r2, [pc, #256]	; (8005528 <USB_SetTurnaroundTime+0x120>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d202      	bcs.n	8005432 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800542c:	230f      	movs	r3, #15
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e062      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a3c      	ldr	r2, [pc, #240]	; (8005528 <USB_SetTurnaroundTime+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d306      	bcc.n	8005448 <USB_SetTurnaroundTime+0x40>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a3b      	ldr	r2, [pc, #236]	; (800552c <USB_SetTurnaroundTime+0x124>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d202      	bcs.n	8005448 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005442:	230e      	movs	r3, #14
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e057      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a38      	ldr	r2, [pc, #224]	; (800552c <USB_SetTurnaroundTime+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d306      	bcc.n	800545e <USB_SetTurnaroundTime+0x56>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a37      	ldr	r2, [pc, #220]	; (8005530 <USB_SetTurnaroundTime+0x128>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d202      	bcs.n	800545e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005458:	230d      	movs	r3, #13
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e04c      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a33      	ldr	r2, [pc, #204]	; (8005530 <USB_SetTurnaroundTime+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d306      	bcc.n	8005474 <USB_SetTurnaroundTime+0x6c>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a32      	ldr	r2, [pc, #200]	; (8005534 <USB_SetTurnaroundTime+0x12c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800546e:	230c      	movs	r3, #12
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e041      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a2f      	ldr	r2, [pc, #188]	; (8005534 <USB_SetTurnaroundTime+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0x82>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <USB_SetTurnaroundTime+0x130>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d802      	bhi.n	800548a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005484:	230b      	movs	r3, #11
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e036      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <USB_SetTurnaroundTime+0x130>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d906      	bls.n	80054a0 <USB_SetTurnaroundTime+0x98>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <USB_SetTurnaroundTime+0x134>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800549a:	230a      	movs	r3, #10
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e02b      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a26      	ldr	r2, [pc, #152]	; (800553c <USB_SetTurnaroundTime+0x134>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0xae>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a25      	ldr	r2, [pc, #148]	; (8005540 <USB_SetTurnaroundTime+0x138>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054b0:	2309      	movs	r3, #9
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e020      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a21      	ldr	r2, [pc, #132]	; (8005540 <USB_SetTurnaroundTime+0x138>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d306      	bcc.n	80054cc <USB_SetTurnaroundTime+0xc4>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a20      	ldr	r2, [pc, #128]	; (8005544 <USB_SetTurnaroundTime+0x13c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054c6:	2308      	movs	r3, #8
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e015      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <USB_SetTurnaroundTime+0x13c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d906      	bls.n	80054e2 <USB_SetTurnaroundTime+0xda>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <USB_SetTurnaroundTime+0x140>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d202      	bcs.n	80054e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054dc:	2307      	movs	r3, #7
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e00a      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054e2:	2306      	movs	r3, #6
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e007      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054ee:	2309      	movs	r3, #9
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e001      	b.n	80054f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054f4:	2309      	movs	r3, #9
 80054f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	00d8acbf 	.word	0x00d8acbf
 8005528:	00e4e1c0 	.word	0x00e4e1c0
 800552c:	00f42400 	.word	0x00f42400
 8005530:	01067380 	.word	0x01067380
 8005534:	011a499f 	.word	0x011a499f
 8005538:	01312cff 	.word	0x01312cff
 800553c:	014ca43f 	.word	0x014ca43f
 8005540:	016e3600 	.word	0x016e3600
 8005544:	01a6ab1f 	.word	0x01a6ab1f
 8005548:	01e84800 	.word	0x01e84800

0800554c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f043 0201 	orr.w	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 0201 	bic.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d115      	bne.n	80055de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055be:	2001      	movs	r0, #1
 80055c0:	f7fb fdfa 	bl	80011b8 <HAL_Delay>
      ms++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fa45 	bl	8006a5a <USB_GetMode>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d01e      	beq.n	8005614 <USB_SetCurrentMode+0x84>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b31      	cmp	r3, #49	; 0x31
 80055da:	d9f0      	bls.n	80055be <USB_SetCurrentMode+0x2e>
 80055dc:	e01a      	b.n	8005614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d115      	bne.n	8005610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fb fde1 	bl	80011b8 <HAL_Delay>
      ms++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 fa2c 	bl	8006a5a <USB_GetMode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <USB_SetCurrentMode+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b31      	cmp	r3, #49	; 0x31
 800560c:	d9f0      	bls.n	80055f0 <USB_SetCurrentMode+0x60>
 800560e:	e001      	b.n	8005614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e005      	b.n	8005620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b32      	cmp	r3, #50	; 0x32
 8005618:	d101      	bne.n	800561e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005628:	b084      	sub	sp, #16
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e009      	b.n	800565c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3340      	adds	r3, #64	; 0x40
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	2200      	movs	r2, #0
 8005654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b0e      	cmp	r3, #14
 8005660:	d9f2      	bls.n	8005648 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11c      	bne.n	80056a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005676:	f043 0302 	orr.w	r3, r3, #2
 800567a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
 80056a0:	e00b      	b.n	80056ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c0:	461a      	mov	r2, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	4619      	mov	r1, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	461a      	mov	r2, r3
 80056d6:	680b      	ldr	r3, [r1, #0]
 80056d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10c      	bne.n	80056fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d104      	bne.n	80056f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f965 	bl	80059b8 <USB_SetDevSpeed>
 80056ee:	e008      	b.n	8005702 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056f0:	2101      	movs	r1, #1
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f960 	bl	80059b8 <USB_SetDevSpeed>
 80056f8:	e003      	b.n	8005702 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056fa:	2103      	movs	r1, #3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f95b 	bl	80059b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005702:	2110      	movs	r1, #16
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8f3 	bl	80058f0 <USB_FlushTxFifo>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f91f 	bl	8005958 <USB_FlushRxFifo>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	461a      	mov	r2, r3
 8005738:	2300      	movs	r3, #0
 800573a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	461a      	mov	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e043      	b.n	80057d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005764:	d118      	bne.n	8005798 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	461a      	mov	r2, r3
 800577a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	e013      	b.n	80057aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	461a      	mov	r2, r3
 8005790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e008      	b.n	80057aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	461a      	mov	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c8:	461a      	mov	r2, r3
 80057ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	3301      	adds	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3b7      	bcc.n	800574e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e043      	b.n	800586c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057fa:	d118      	bne.n	800582e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e013      	b.n	8005840 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e008      	b.n	8005840 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	461a      	mov	r2, r3
 8005860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3301      	adds	r3, #1
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	429a      	cmp	r2, r3
 8005872:	d3b7      	bcc.n	80057e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005886:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005894:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 0210 	orr.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <USB_DevInit+0x2c4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d107      	bne.n	80058dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d4:	f043 0304 	orr.w	r3, r3, #4
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e8:	b004      	add	sp, #16
 80058ea:	4770      	bx	lr
 80058ec:	803c3800 	.word	0x803c3800

080058f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <USB_FlushTxFifo+0x64>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e01b      	b.n	8005948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	daf2      	bge.n	80058fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	019b      	lsls	r3, r3, #6
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <USB_FlushTxFifo+0x64>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e006      	b.n	8005948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b20      	cmp	r3, #32
 8005944:	d0f0      	beq.n	8005928 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	00030d40 	.word	0x00030d40

08005958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <USB_FlushRxFifo+0x5c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e018      	b.n	80059a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	daf2      	bge.n	8005964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2210      	movs	r2, #16
 8005986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <USB_FlushRxFifo+0x5c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e006      	b.n	80059a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d0f0      	beq.n	8005988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	00030d40 	.word	0x00030d40

080059b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d8:	4313      	orrs	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 0306 	and.w	r3, r3, #6
 8005a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
 8005a0e:	e00a      	b.n	8005a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d002      	beq.n	8005a1c <USB_GetDevSpeed+0x32>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d102      	bne.n	8005a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	75fb      	strb	r3, [r7, #23]
 8005a20:	e001      	b.n	8005a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a22:	230f      	movs	r3, #15
 8005a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d13a      	bne.n	8005ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d155      	bne.n	8005b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	791b      	ldrb	r3, [r3, #4]
 8005aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	059b      	lsls	r3, r3, #22
 8005aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aac:	4313      	orrs	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	e036      	b.n	8005b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11a      	bne.n	8005b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d161      	bne.n	8005c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b76:	d11f      	bne.n	8005bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	0159      	lsls	r1, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <USB_DeactivateEndpoint+0x1b0>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]
 8005c22:	e060      	b.n	8005ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3a:	d11f      	bne.n	8005c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	43db      	mvns	r3, r3
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	0159      	lsls	r1, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	440b      	add	r3, r1
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <USB_DeactivateEndpoint+0x1b4>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	ec337800 	.word	0xec337800
 8005cf8:	eff37800 	.word	0xeff37800

08005cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f040 815c 	bne.w	8005fd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d132      	bne.n	8005d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d84:	0cdb      	lsrs	r3, r3, #19
 8005d86:	04db      	lsls	r3, r3, #19
 8005d88:	6113      	str	r3, [r2, #16]
 8005d8a:	e074      	b.n	8005e76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	0cdb      	lsrs	r3, r3, #19
 8005da8:	04db      	lsls	r3, r3, #19
 8005daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	440b      	add	r3, r1
 8005de8:	1e59      	subs	r1, r3, #1
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005df4:	4b9d      	ldr	r3, [pc, #628]	; (800606c <USB_EPStartXfer+0x370>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	0148      	lsls	r0, r1, #5
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	4401      	add	r1, r0
 8005e00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	0148      	lsls	r0, r1, #5
 8005e22:	69f9      	ldr	r1, [r7, #28]
 8005e24:	4401      	add	r1, r0
 8005e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	791b      	ldrb	r3, [r3, #4]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11f      	bne.n	8005e76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d14b      	bne.n	8005f14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	461a      	mov	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d128      	bne.n	8005ef2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d110      	bne.n	8005ed2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	e00f      	b.n	8005ef2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e133      	b.n	800617c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d015      	beq.n	8005f68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 811b 	beq.w	800617c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	2101      	movs	r1, #1
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	69f9      	ldr	r1, [r7, #28]
 8005f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f62:	4313      	orrs	r3, r2
 8005f64:	634b      	str	r3, [r1, #52]	; 0x34
 8005f66:	e109      	b.n	800617c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d110      	bne.n	8005f9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e00f      	b.n	8005fba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6919      	ldr	r1, [r3, #16]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	b298      	uxth	r0, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4603      	mov	r3, r0
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fade 	bl	8006590 <USB_WritePacket>
 8005fd4:	e0d2      	b.n	800617c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff0:	0cdb      	lsrs	r3, r3, #19
 8005ff2:	04db      	lsls	r3, r3, #19
 8005ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006018:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d126      	bne.n	8006070 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	0148      	lsls	r0, r1, #5
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	4401      	add	r1, r0
 8006040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006044:	4313      	orrs	r3, r2
 8006046:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006066:	6113      	str	r3, [r2, #16]
 8006068:	e03a      	b.n	80060e0 <USB_EPStartXfer+0x3e4>
 800606a:	bf00      	nop
 800606c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4413      	add	r3, r2
 800607a:	1e5a      	subs	r2, r3, #1
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	8afa      	ldrh	r2, [r7, #22]
 800608c:	fb03 f202 	mul.w	r2, r3, r2
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	8afb      	ldrh	r3, [r7, #22]
 80060a4:	04d9      	lsls	r1, r3, #19
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <USB_EPStartXfer+0x48c>)
 80060a8:	400b      	ands	r3, r1
 80060aa:	69b9      	ldr	r1, [r7, #24]
 80060ac:	0148      	lsls	r0, r1, #5
 80060ae:	69f9      	ldr	r1, [r7, #28]
 80060b0:	4401      	add	r1, r0
 80060b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	0148      	lsls	r0, r1, #5
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	4401      	add	r1, r0
 80060d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10d      	bne.n	8006102 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6919      	ldr	r1, [r3, #16]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fe:	460a      	mov	r2, r1
 8006100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d128      	bne.n	800615c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d110      	bne.n	800613c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e00f      	b.n	800615c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800617a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	1ff80000 	.word	0x1ff80000

0800618c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	f040 80ce 	bne.w	800634a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d132      	bne.n	800621c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	0cdb      	lsrs	r3, r3, #19
 8006216:	04db      	lsls	r3, r3, #19
 8006218:	6113      	str	r3, [r2, #16]
 800621a:	e04e      	b.n	80062ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	0cdb      	lsrs	r3, r3, #19
 8006238:	04db      	lsls	r3, r3, #19
 800623a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800625a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800625e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	429a      	cmp	r2, r3
 800626a:	d903      	bls.n	8006274 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062aa:	6939      	ldr	r1, [r7, #16]
 80062ac:	0148      	lsls	r0, r1, #5
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	4401      	add	r1, r0
 80062b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062b6:	4313      	orrs	r3, r2
 80062b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11e      	bne.n	80062fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	461a      	mov	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e097      	b.n	800642e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800631c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8083 	beq.w	800642e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006344:	4313      	orrs	r3, r2
 8006346:	634b      	str	r3, [r1, #52]	; 0x34
 8006348:	e071      	b.n	800642e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	0cdb      	lsrs	r3, r3, #19
 8006366:	04db      	lsls	r3, r3, #19
 8006368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800638c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063dc:	6939      	ldr	r1, [r7, #16]
 80063de:	0148      	lsls	r0, r1, #5
 80063e0:	6979      	ldr	r1, [r7, #20]
 80063e2:	4401      	add	r1, r0
 80063e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063e8:	4313      	orrs	r3, r2
 80063ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10d      	bne.n	800640e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6919      	ldr	r1, [r3, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	460a      	mov	r2, r1
 800640c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800642c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d14a      	bne.n	80064f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006472:	f040 8086 	bne.w	8006582 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006498:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d902      	bls.n	80064d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
          break;
 80064d2:	e056      	b.n	8006582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d0e7      	beq.n	80064be <USB_EPStopXfer+0x82>
 80064ee:	e048      	b.n	8006582 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006508:	d13b      	bne.n	8006582 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800652c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f242 7210 	movw	r2, #10000	; 0x2710
 800655e:	4293      	cmp	r3, r2
 8006560:	d902      	bls.n	8006568 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
          break;
 8006566:	e00c      	b.n	8006582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006580:	d0e7      	beq.n	8006552 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
}
 8006584:	4618      	mov	r0, r3
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	460b      	mov	r3, r1
 80065a0:	71fb      	strb	r3, [r7, #7]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d123      	bne.n	80065fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	3303      	adds	r3, #3
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e018      	b.n	80065f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	031a      	lsls	r2, r3, #12
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d0:	461a      	mov	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3301      	adds	r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	3301      	adds	r3, #1
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d3e2      	bcc.n	80065c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3724      	adds	r7, #36	; 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800660c:	b480      	push	{r7}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	b29b      	uxth	r3, r3
 8006628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e014      	b.n	8006662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	601a      	str	r2, [r3, #0]
    pDest++;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	3301      	adds	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	3301      	adds	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	3301      	adds	r3, #1
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	3301      	adds	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3301      	adds	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3e6      	bcc.n	8006638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800666a:	8bfb      	ldrh	r3, [r7, #30]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01e      	beq.n	80066ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667a:	461a      	mov	r2, r3
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	701a      	strb	r2, [r3, #0]
      i++;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3301      	adds	r3, #1
 800669a:	623b      	str	r3, [r7, #32]
      pDest++;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	3301      	adds	r3, #1
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066a2:	8bfb      	ldrh	r3, [r7, #30]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066a8:	8bfb      	ldrh	r3, [r7, #30]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ea      	bne.n	8006684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	372c      	adds	r7, #44	; 0x2c
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d12c      	bne.n	8006732 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	db12      	blt.n	8006710 <USB_EPSetStall+0x54>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00f      	beq.n	8006710 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800670e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e02b      	b.n	800678a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	db12      	blt.n	800676a <USB_EPSetStall+0xae>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00f      	beq.n	800676a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006768:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006788:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d128      	bne.n	8006806 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d003      	beq.n	80067e4 <USB_EPClearStall+0x4c>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	791b      	ldrb	r3, [r3, #4]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d138      	bne.n	8006856 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e027      	b.n	8006856 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	791b      	ldrb	r3, [r3, #4]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d003      	beq.n	8006836 <USB_EPClearStall+0x9e>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	791b      	ldrb	r3, [r3, #4]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d10f      	bne.n	8006856 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006882:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006886:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800689e:	4313      	orrs	r3, r2
 80068a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068de:	f023 0302 	bic.w	r3, r3, #2
 80068e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800690c:	f023 0303 	bic.w	r3, r3, #3
 8006910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	0c1b      	lsrs	r3, r3, #16
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	4013      	ands	r3, r2
 80069b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	b29b      	uxth	r3, r3
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4013      	ands	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069f0:	68bb      	ldr	r3, [r7, #8]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	01db      	lsls	r3, r3, #7
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0301 	and.w	r3, r3, #1
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a94:	f023 0307 	bic.w	r3, r3, #7
 8006a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	333c      	adds	r3, #60	; 0x3c
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4a26      	ldr	r2, [pc, #152]	; (8006b74 <USB_EP0_OutStart+0xb8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d90a      	bls.n	8006af6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af0:	d101      	bne.n	8006af6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e037      	b.n	8006b66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f043 0318 	orr.w	r3, r3, #24
 8006b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10f      	bne.n	8006b64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	4f54300a 	.word	0x4f54300a

08006b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <USB_CoreReset+0x64>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e01b      	b.n	8006bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	daf2      	bge.n	8006b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <USB_CoreReset+0x64>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e006      	b.n	8006bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d0f0      	beq.n	8006bae <USB_CoreReset+0x36>

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	00030d40 	.word	0x00030d40

08006be0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bf0:	f002 fc8a 	bl	8009508 <USBD_static_malloc>
 8006bf4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32b0      	adds	r2, #176	; 0xb0
 8006c06:	2100      	movs	r1, #0
 8006c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e0d4      	b.n	8006dba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c10:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c14:	2100      	movs	r1, #0
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f002 fcda 	bl	80095d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32b0      	adds	r2, #176	; 0xb0
 8006c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7c1b      	ldrb	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d138      	bne.n	8006cba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c48:	4b5e      	ldr	r3, [pc, #376]	; (8006dc4 <USBD_CDC_Init+0x1e4>)
 8006c4a:	7819      	ldrb	r1, [r3, #0]
 8006c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c50:	2202      	movs	r2, #2
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f002 fb35 	bl	80092c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c58:	4b5a      	ldr	r3, [pc, #360]	; (8006dc4 <USBD_CDC_Init+0x1e4>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2201      	movs	r2, #1
 8006c70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c72:	4b55      	ldr	r3, [pc, #340]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006c74:	7819      	ldrb	r1, [r3, #0]
 8006c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 fb20 	bl	80092c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c82:	4b51      	ldr	r3, [pc, #324]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c9e:	4b4b      	ldr	r3, [pc, #300]	; (8006dcc <USBD_CDC_Init+0x1ec>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3326      	adds	r3, #38	; 0x26
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e035      	b.n	8006d26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cba:	4b42      	ldr	r3, [pc, #264]	; (8006dc4 <USBD_CDC_Init+0x1e4>)
 8006cbc:	7819      	ldrb	r1, [r3, #0]
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f002 fafd 	bl	80092c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <USBD_CDC_Init+0x1e4>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3324      	adds	r3, #36	; 0x24
 8006cde:	2201      	movs	r2, #1
 8006ce0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ce2:	4b39      	ldr	r3, [pc, #228]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006ce4:	7819      	ldrb	r1, [r3, #0]
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2202      	movs	r2, #2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f002 fae9 	bl	80092c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d08:	2201      	movs	r2, #1
 8006d0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d0c:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <USBD_CDC_Init+0x1ec>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	3326      	adds	r3, #38	; 0x26
 8006d22:	2210      	movs	r2, #16
 8006d24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d26:	4b29      	ldr	r3, [pc, #164]	; (8006dcc <USBD_CDC_Init+0x1ec>)
 8006d28:	7819      	ldrb	r1, [r3, #0]
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f002 fac7 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <USBD_CDC_Init+0x1ec>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 020f 	and.w	r2, r3, #15
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3324      	adds	r3, #36	; 0x24
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	33b0      	adds	r3, #176	; 0xb0
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d84:	2302      	movs	r3, #2
 8006d86:	e018      	b.n	8006dba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006d92:	7819      	ldrb	r1, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f002 fb7e 	bl	80094a0 <USBD_LL_PrepareReceive>
 8006da4:	e008      	b.n	8006db8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <USBD_CDC_Init+0x1e8>)
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f002 fb74 	bl	80094a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200000a3 	.word	0x200000a3
 8006dc8:	200000a4 	.word	0x200000a4
 8006dcc:	200000a5 	.word	0x200000a5

08006dd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ddc:	4b3a      	ldr	r3, [pc, #232]	; (8006ec8 <USBD_CDC_DeInit+0xf8>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fa93 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006de8:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <USBD_CDC_DeInit+0xf8>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3324      	adds	r3, #36	; 0x24
 8006dfe:	2200      	movs	r2, #0
 8006e00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e02:	4b32      	ldr	r3, [pc, #200]	; (8006ecc <USBD_CDC_DeInit+0xfc>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 fa80 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e0e:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <USBD_CDC_DeInit+0xfc>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 020f 	and.w	r2, r3, #15
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e26:	2200      	movs	r2, #0
 8006e28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e2a:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <USBD_CDC_DeInit+0x100>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f002 fa6c 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <USBD_CDC_DeInit+0x100>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	3324      	adds	r3, #36	; 0x24
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e50:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <USBD_CDC_DeInit+0x100>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3326      	adds	r3, #38	; 0x26
 8006e66:	2200      	movs	r2, #0
 8006e68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32b0      	adds	r2, #176	; 0xb0
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01f      	beq.n	8006ebc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	33b0      	adds	r3, #176	; 0xb0
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 fb40 	bl	8009524 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32b0      	adds	r2, #176	; 0xb0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200000a3 	.word	0x200000a3
 8006ecc:	200000a4 	.word	0x200000a4
 8006ed0:	200000a5 	.word	0x200000a5

08006ed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	32b0      	adds	r2, #176	; 0xb0
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e0bf      	b.n	8007084 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d050      	beq.n	8006fb2 <USBD_CDC_Setup+0xde>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	f040 80af 	bne.w	8007074 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	88db      	ldrh	r3, [r3, #6]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d03a      	beq.n	8006f94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da1b      	bge.n	8006f60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	33b0      	adds	r3, #176	; 0xb0
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	88d2      	ldrh	r2, [r2, #6]
 8006f44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b07      	cmp	r3, #7
 8006f4c:	bf28      	it	cs
 8006f4e:	2307      	movcs	r3, #7
 8006f50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	89fa      	ldrh	r2, [r7, #14]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 fd89 	bl	8008a70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f5e:	e090      	b.n	8007082 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	785a      	ldrb	r2, [r3, #1]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	88db      	ldrh	r3, [r3, #6]
 8006f6e:	2b3f      	cmp	r3, #63	; 0x3f
 8006f70:	d803      	bhi.n	8006f7a <USBD_CDC_Setup+0xa6>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	88db      	ldrh	r3, [r3, #6]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	e000      	b.n	8006f7c <USBD_CDC_Setup+0xa8>
 8006f7a:	2240      	movs	r2, #64	; 0x40
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f82:	6939      	ldr	r1, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fd9b 	bl	8008ac8 <USBD_CtlPrepareRx>
      break;
 8006f92:	e076      	b.n	8007082 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	33b0      	adds	r3, #176	; 0xb0
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	7850      	ldrb	r0, [r2, #1]
 8006faa:	2200      	movs	r2, #0
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	4798      	blx	r3
      break;
 8006fb0:	e067      	b.n	8007082 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b0b      	cmp	r3, #11
 8006fb8:	d851      	bhi.n	800705e <USBD_CDC_Setup+0x18a>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <USBD_CDC_Setup+0xec>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	0800706d 	.word	0x0800706d
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	0800705f 	.word	0x0800705f
 8006fd0:	0800705f 	.word	0x0800705f
 8006fd4:	0800705f 	.word	0x0800705f
 8006fd8:	0800705f 	.word	0x0800705f
 8006fdc:	0800705f 	.word	0x0800705f
 8006fe0:	0800705f 	.word	0x0800705f
 8006fe4:	0800705f 	.word	0x0800705f
 8006fe8:	0800701b 	.word	0x0800701b
 8006fec:	08007045 	.word	0x08007045
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d107      	bne.n	800700c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ffc:	f107 030a 	add.w	r3, r7, #10
 8007000:	2202      	movs	r2, #2
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fd33 	bl	8008a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800700a:	e032      	b.n	8007072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fcbd 	bl	800898e <USBD_CtlError>
            ret = USBD_FAIL;
 8007014:	2303      	movs	r3, #3
 8007016:	75fb      	strb	r3, [r7, #23]
          break;
 8007018:	e02b      	b.n	8007072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d107      	bne.n	8007036 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007026:	f107 030d 	add.w	r3, r7, #13
 800702a:	2201      	movs	r2, #1
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fd1e 	bl	8008a70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007034:	e01d      	b.n	8007072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fca8 	bl	800898e <USBD_CtlError>
            ret = USBD_FAIL;
 800703e:	2303      	movs	r3, #3
 8007040:	75fb      	strb	r3, [r7, #23]
          break;
 8007042:	e016      	b.n	8007072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b03      	cmp	r3, #3
 800704e:	d00f      	beq.n	8007070 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fc9b 	bl	800898e <USBD_CtlError>
            ret = USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800705c:	e008      	b.n	8007070 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fc94 	bl	800898e <USBD_CtlError>
          ret = USBD_FAIL;
 8007066:	2303      	movs	r3, #3
 8007068:	75fb      	strb	r3, [r7, #23]
          break;
 800706a:	e002      	b.n	8007072 <USBD_CDC_Setup+0x19e>
          break;
 800706c:	bf00      	nop
 800706e:	e008      	b.n	8007082 <USBD_CDC_Setup+0x1ae>
          break;
 8007070:	bf00      	nop
      }
      break;
 8007072:	e006      	b.n	8007082 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fc89 	bl	800898e <USBD_CtlError>
      ret = USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	75fb      	strb	r3, [r7, #23]
      break;
 8007080:	bf00      	nop
  }

  return (uint8_t)ret;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800709e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32b0      	adds	r2, #176	; 0xb0
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e065      	b.n	8007182 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	32b0      	adds	r2, #176	; 0xb0
 80070c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3318      	adds	r3, #24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02f      	beq.n	8007140 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	3318      	adds	r3, #24
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 010f 	and.w	r1, r3, #15
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	460b      	mov	r3, r1
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	440b      	add	r3, r1
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4403      	add	r3, r0
 8007108:	3348      	adds	r3, #72	; 0x48
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007116:	2b00      	cmp	r3, #0
 8007118:	d112      	bne.n	8007140 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3318      	adds	r3, #24
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007132:	78f9      	ldrb	r1, [r7, #3]
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f002 f990 	bl	800945e <USBD_LL_Transmit>
 800713e:	e01f      	b.n	8007180 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	33b0      	adds	r3, #176	; 0xb0
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d010      	beq.n	8007180 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	33b0      	adds	r3, #176	; 0xb0
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32b0      	adds	r2, #176	; 0xb0
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32b0      	adds	r2, #176	; 0xb0
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01a      	b.n	80071f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f002 f98e 	bl	80094e2 <USBD_LL_GetRxDataSize>
 80071c6:	4602      	mov	r2, r0
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	33b0      	adds	r3, #176	; 0xb0
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071ec:	4611      	mov	r1, r2
 80071ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32b0      	adds	r2, #176	; 0xb0
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e025      	b.n	8007268 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	33b0      	adds	r3, #176	; 0xb0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01a      	beq.n	8007266 <USBD_CDC_EP0_RxReady+0x6c>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007236:	2bff      	cmp	r3, #255	; 0xff
 8007238:	d015      	beq.n	8007266 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	33b0      	adds	r3, #176	; 0xb0
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007252:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800725a:	b292      	uxth	r2, r2
 800725c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	22ff      	movs	r2, #255	; 0xff
 8007262:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007278:	2182      	movs	r1, #130	; 0x82
 800727a:	4818      	ldr	r0, [pc, #96]	; (80072dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800727c:	f000 fd4f 	bl	8007d1e <USBD_GetEpDesc>
 8007280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007282:	2101      	movs	r1, #1
 8007284:	4815      	ldr	r0, [pc, #84]	; (80072dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007286:	f000 fd4a 	bl	8007d1e <USBD_GetEpDesc>
 800728a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800728c:	2181      	movs	r1, #129	; 0x81
 800728e:	4813      	ldr	r0, [pc, #76]	; (80072dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007290:	f000 fd45 	bl	8007d1e <USBD_GetEpDesc>
 8007294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2210      	movs	r2, #16
 80072a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b0:	711a      	strb	r2, [r3, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c4:	711a      	strb	r2, [r3, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2243      	movs	r2, #67	; 0x43
 80072ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000060 	.word	0x20000060

080072e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072e8:	2182      	movs	r1, #130	; 0x82
 80072ea:	4818      	ldr	r0, [pc, #96]	; (800734c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072ec:	f000 fd17 	bl	8007d1e <USBD_GetEpDesc>
 80072f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072f2:	2101      	movs	r1, #1
 80072f4:	4815      	ldr	r0, [pc, #84]	; (800734c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072f6:	f000 fd12 	bl	8007d1e <USBD_GetEpDesc>
 80072fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072fc:	2181      	movs	r1, #129	; 0x81
 80072fe:	4813      	ldr	r0, [pc, #76]	; (800734c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007300:	f000 fd0d 	bl	8007d1e <USBD_GetEpDesc>
 8007304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2210      	movs	r2, #16
 8007310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	711a      	strb	r2, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f042 0202 	orr.w	r2, r2, #2
 8007324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	711a      	strb	r2, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f042 0202 	orr.w	r2, r2, #2
 8007338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2243      	movs	r2, #67	; 0x43
 800733e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007340:	4b02      	ldr	r3, [pc, #8]	; (800734c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000060 	.word	0x20000060

08007350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007358:	2182      	movs	r1, #130	; 0x82
 800735a:	4818      	ldr	r0, [pc, #96]	; (80073bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800735c:	f000 fcdf 	bl	8007d1e <USBD_GetEpDesc>
 8007360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007362:	2101      	movs	r1, #1
 8007364:	4815      	ldr	r0, [pc, #84]	; (80073bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007366:	f000 fcda 	bl	8007d1e <USBD_GetEpDesc>
 800736a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800736c:	2181      	movs	r1, #129	; 0x81
 800736e:	4813      	ldr	r0, [pc, #76]	; (80073bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007370:	f000 fcd5 	bl	8007d1e <USBD_GetEpDesc>
 8007374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2210      	movs	r2, #16
 8007380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d006      	beq.n	8007396 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2200      	movs	r2, #0
 800738c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007390:	711a      	strb	r2, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a4:	711a      	strb	r2, [r3, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2243      	movs	r2, #67	; 0x43
 80073ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000060 	.word	0x20000060

080073c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	220a      	movs	r2, #10
 80073cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	2000001c 	.word	0x2000001c

080073e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e009      	b.n	8007408 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	33b0      	adds	r3, #176	; 0xb0
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	32b0      	adds	r2, #176	; 0xb0
 800742a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	e008      	b.n	800744c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32b0      	adds	r2, #176	; 0xb0
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	e004      	b.n	8007486 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	32b0      	adds	r2, #176	; 0xb0
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32b0      	adds	r2, #176	; 0xb0
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e025      	b.n	8007512 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d11f      	bne.n	8007510 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <USBD_CDC_TransmitPacket+0x88>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 020f 	and.w	r2, r3, #15
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4403      	add	r3, r0
 80074f2:	3318      	adds	r3, #24
 80074f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <USBD_CDC_TransmitPacket+0x88>)
 80074f8:	7819      	ldrb	r1, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 ffa9 	bl	800945e <USBD_LL_Transmit>

    ret = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200000a3 	.word	0x200000a3

08007520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32b0      	adds	r2, #176	; 0xb0
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32b0      	adds	r2, #176	; 0xb0
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	e018      	b.n	8007580 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <USBD_CDC_ReceivePacket+0x68>)
 8007558:	7819      	ldrb	r1, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 ff9b 	bl	80094a0 <USBD_LL_PrepareReceive>
 800756a:	e008      	b.n	800757e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <USBD_CDC_ReceivePacket+0x68>)
 800756e:	7819      	ldrb	r1, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 ff91 	bl	80094a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	200000a4 	.word	0x200000a4

0800758c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e01f      	b.n	80075e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	79fa      	ldrb	r2, [r7, #7]
 80075d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f001 fe0b 	bl	80091f4 <USBD_LL_Init>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	e025      	b.n	8007650 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	32ae      	adds	r2, #174	; 0xae
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00f      	beq.n	8007640 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32ae      	adds	r2, #174	; 0xae
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	f107 020e 	add.w	r2, r7, #14
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	4602      	mov	r2, r0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fe13 	bl	800928c <USBD_LL_Start>
 8007666:	4603      	mov	r3, r0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	4611      	mov	r1, r2
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	4611      	mov	r1, r2
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f908 	bl	800891a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b02      	cmp	r3, #2
 800772c:	d01a      	beq.n	8007764 <USBD_LL_SetupStage+0x72>
 800772e:	2b02      	cmp	r3, #2
 8007730:	d822      	bhi.n	8007778 <USBD_LL_SetupStage+0x86>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <USBD_LL_SetupStage+0x4a>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d00a      	beq.n	8007750 <USBD_LL_SetupStage+0x5e>
 800773a:	e01d      	b.n	8007778 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb5f 	bl	8007e08 <USBD_StdDevReq>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e020      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fbc7 	bl	8007eec <USBD_StdItfReq>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	e016      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fc29 	bl	8007fc4 <USBD_StdEPReq>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
      break;
 8007776:	e00c      	b.n	8007792 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800777e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fde0 	bl	800934c <USBD_LL_StallEP>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
      break;
 8007790:	bf00      	nop
  }

  return ret;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	460b      	mov	r3, r1
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d16e      	bne.n	8007892 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	f040 8098 	bne.w	80078f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d913      	bls.n	80077fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	1ad2      	subs	r2, r2, r3
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	4293      	cmp	r3, r2
 80077ec:	bf28      	it	cs
 80077ee:	4613      	movcs	r3, r2
 80077f0:	461a      	mov	r2, r3
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f001 f984 	bl	8008b02 <USBD_CtlContinueRx>
 80077fa:	e07d      	b.n	80078f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b02      	cmp	r3, #2
 8007808:	d014      	beq.n	8007834 <USBD_LL_DataOutStage+0x98>
 800780a:	2b02      	cmp	r3, #2
 800780c:	d81d      	bhi.n	800784a <USBD_LL_DataOutStage+0xae>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <USBD_LL_DataOutStage+0x7c>
 8007812:	2b01      	cmp	r3, #1
 8007814:	d003      	beq.n	800781e <USBD_LL_DataOutStage+0x82>
 8007816:	e018      	b.n	800784a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	75bb      	strb	r3, [r7, #22]
            break;
 800781c:	e018      	b.n	8007850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fa5e 	bl	8007cea <USBD_CoreFindIF>
 800782e:	4603      	mov	r3, r0
 8007830:	75bb      	strb	r3, [r7, #22]
            break;
 8007832:	e00d      	b.n	8007850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4619      	mov	r1, r3
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fa60 	bl	8007d04 <USBD_CoreFindEP>
 8007844:	4603      	mov	r3, r0
 8007846:	75bb      	strb	r3, [r7, #22]
            break;
 8007848:	e002      	b.n	8007850 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	75bb      	strb	r3, [r7, #22]
            break;
 800784e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007850:	7dbb      	ldrb	r3, [r7, #22]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d119      	bne.n	800788a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d113      	bne.n	800788a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007862:	7dba      	ldrb	r2, [r7, #22]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	32ae      	adds	r2, #174	; 0xae
 8007868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007872:	7dba      	ldrb	r2, [r7, #22]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800787a:	7dba      	ldrb	r2, [r7, #22]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	32ae      	adds	r2, #174	; 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f001 f94a 	bl	8008b24 <USBD_CtlSendStatus>
 8007890:	e032      	b.n	80078f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007898:	b2db      	uxtb	r3, r3
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fa31 	bl	8007d04 <USBD_CoreFindEP>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a6:	7dbb      	ldrb	r3, [r7, #22]
 80078a8:	2bff      	cmp	r3, #255	; 0xff
 80078aa:	d025      	beq.n	80078f8 <USBD_LL_DataOutStage+0x15c>
 80078ac:	7dbb      	ldrb	r3, [r7, #22]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d122      	bne.n	80078f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d117      	bne.n	80078ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80078be:	7dba      	ldrb	r2, [r7, #22]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	32ae      	adds	r2, #174	; 0xae
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00f      	beq.n	80078ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078ce:	7dba      	ldrb	r2, [r7, #22]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078d6:	7dba      	ldrb	r2, [r7, #22]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	32ae      	adds	r2, #174	; 0xae
 80078dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	7afa      	ldrb	r2, [r7, #11]
 80078e4:	4611      	mov	r1, r2
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	e000      	b.n	80078fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	460b      	mov	r3, r1
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d16f      	bne.n	80079f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3314      	adds	r3, #20
 800791a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007922:	2b02      	cmp	r3, #2
 8007924:	d15a      	bne.n	80079dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	429a      	cmp	r2, r3
 8007930:	d914      	bls.n	800795c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	461a      	mov	r2, r3
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 f8ac 	bl	8008aa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800794e:	2300      	movs	r3, #0
 8007950:	2200      	movs	r2, #0
 8007952:	2100      	movs	r1, #0
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f001 fda3 	bl	80094a0 <USBD_LL_PrepareReceive>
 800795a:	e03f      	b.n	80079dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	429a      	cmp	r2, r3
 8007966:	d11c      	bne.n	80079a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007970:	429a      	cmp	r2, r3
 8007972:	d316      	bcc.n	80079a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800797e:	429a      	cmp	r2, r3
 8007980:	d20f      	bcs.n	80079a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f001 f88d 	bl	8008aa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007994:	2300      	movs	r3, #0
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f001 fd80 	bl	80094a0 <USBD_LL_PrepareReceive>
 80079a0:	e01c      	b.n	80079dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d10f      	bne.n	80079ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 fcbb 	bl	800934c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f001 f8b7 	bl	8008b4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d03a      	beq.n	8007a5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fe42 	bl	8007670 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079f4:	e032      	b.n	8007a5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	4619      	mov	r1, r3
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f97f 	bl	8007d04 <USBD_CoreFindEP>
 8007a06:	4603      	mov	r3, r0
 8007a08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2bff      	cmp	r3, #255	; 0xff
 8007a0e:	d025      	beq.n	8007a5c <USBD_LL_DataInStage+0x15a>
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d122      	bne.n	8007a5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d11c      	bne.n	8007a5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a22:	7dfa      	ldrb	r2, [r7, #23]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	32ae      	adds	r2, #174	; 0xae
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d014      	beq.n	8007a5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a32:	7dfa      	ldrb	r2, [r7, #23]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a3a:	7dfa      	ldrb	r2, [r7, #23]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	32ae      	adds	r2, #174	; 0xae
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	7afa      	ldrb	r2, [r7, #11]
 8007a48:	4611      	mov	r1, r2
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a52:	7dbb      	ldrb	r3, [r7, #22]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a58:	7dbb      	ldrb	r3, [r7, #22]
 8007a5a:	e000      	b.n	8007a5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d014      	beq.n	8007acc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00e      	beq.n	8007acc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6852      	ldr	r2, [r2, #4]
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	4611      	mov	r1, r2
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fbf5 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2240      	movs	r2, #64	; 0x40
 8007ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ae8:	2340      	movs	r3, #64	; 0x40
 8007aea:	2200      	movs	r2, #0
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fbe7 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2240      	movs	r2, #64	; 0x40
 8007afe:	621a      	str	r2, [r3, #32]

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2204      	movs	r2, #4
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d106      	bne.n	8007b78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d110      	bne.n	8007bbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32ae      	adds	r2, #174	; 0xae
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e01c      	b.n	8007c22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d115      	bne.n	8007c20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32ae      	adds	r2, #174	; 0xae
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	32ae      	adds	r2, #174	; 0xae
 8007c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	32ae      	adds	r2, #174	; 0xae
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e01c      	b.n	8007c86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d115      	bne.n	8007c84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	32ae      	adds	r2, #174	; 0xae
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	32ae      	adds	r2, #174	; 0xae
 8007c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	78fa      	ldrb	r2, [r7, #3]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6852      	ldr	r2, [r2, #4]
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d920      	bls.n	8007d88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d4e:	e013      	b.n	8007d78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d50:	f107 030a 	add.w	r3, r7, #10
 8007d54:	4619      	mov	r1, r3
 8007d56:	6978      	ldr	r0, [r7, #20]
 8007d58:	f000 f81b 	bl	8007d92 <USBD_GetNextDesc>
 8007d5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d108      	bne.n	8007d78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	789b      	ldrb	r3, [r3, #2]
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d008      	beq.n	8007d86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	897b      	ldrh	r3, [r7, #10]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d8e5      	bhi.n	8007d50 <USBD_GetEpDesc+0x32>
 8007d84:	e000      	b.n	8007d88 <USBD_GetEpDesc+0x6a>
          break;
 8007d86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d88:	693b      	ldr	r3, [r7, #16]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	881a      	ldrh	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4413      	add	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	3301      	adds	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dea:	8a3b      	ldrh	r3, [r7, #16]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b21a      	sxth	r2, r3
 8007df0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b21b      	sxth	r3, r3
 8007df8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	d005      	beq.n	8007e2e <USBD_StdDevReq+0x26>
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d857      	bhi.n	8007ed6 <USBD_StdDevReq+0xce>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <USBD_StdDevReq+0x42>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d153      	bne.n	8007ed6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32ae      	adds	r2, #174	; 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
      break;
 8007e48:	e04a      	b.n	8007ee0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d83b      	bhi.n	8007eca <USBD_StdDevReq+0xc2>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <USBD_StdDevReq+0x50>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007ec1 	.word	0x08007ec1
 8007e60:	08007ecb 	.word	0x08007ecb
 8007e64:	08007eb7 	.word	0x08007eb7
 8007e68:	08007ecb 	.word	0x08007ecb
 8007e6c:	08007e8b 	.word	0x08007e8b
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007ecb 	.word	0x08007ecb
 8007e78:	08007ea3 	.word	0x08007ea3
 8007e7c:	08007e95 	.word	0x08007e95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa3c 	bl	8008300 <USBD_GetDescriptor>
          break;
 8007e88:	e024      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fba1 	bl	80085d4 <USBD_SetAddress>
          break;
 8007e92:	e01f      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fbe0 	bl	800865c <USBD_SetConfig>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]
          break;
 8007ea0:	e018      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc83 	bl	80087b0 <USBD_GetConfig>
          break;
 8007eaa:	e013      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fcb4 	bl	800881c <USBD_GetStatus>
          break;
 8007eb4:	e00e      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fce3 	bl	8008884 <USBD_SetFeature>
          break;
 8007ebe:	e009      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fd07 	bl	80088d6 <USBD_ClrFeature>
          break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fd5e 	bl	800898e <USBD_CtlError>
          break;
 8007ed2:	bf00      	nop
      }
      break;
 8007ed4:	e004      	b.n	8007ee0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fd58 	bl	800898e <USBD_CtlError>
      break;
 8007ede:	bf00      	nop
  }

  return ret;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop

08007eec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f02:	2b40      	cmp	r3, #64	; 0x40
 8007f04:	d005      	beq.n	8007f12 <USBD_StdItfReq+0x26>
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d852      	bhi.n	8007fb0 <USBD_StdItfReq+0xc4>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <USBD_StdItfReq+0x26>
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d14e      	bne.n	8007fb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d840      	bhi.n	8007fa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	889b      	ldrh	r3, [r3, #4]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d836      	bhi.n	8007f98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	889b      	ldrh	r3, [r3, #4]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fed9 	bl	8007cea <USBD_CoreFindIF>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2bff      	cmp	r3, #255	; 0xff
 8007f40:	d01d      	beq.n	8007f7e <USBD_StdItfReq+0x92>
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11a      	bne.n	8007f7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f48:	7bba      	ldrb	r2, [r7, #14]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32ae      	adds	r2, #174	; 0xae
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00f      	beq.n	8007f78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f58:	7bba      	ldrb	r2, [r7, #14]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f60:	7bba      	ldrb	r2, [r7, #14]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32ae      	adds	r2, #174	; 0xae
 8007f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f76:	e004      	b.n	8007f82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f7c:	e001      	b.n	8007f82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d110      	bne.n	8007fac <USBD_StdItfReq+0xc0>
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10d      	bne.n	8007fac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fdc7 	bl	8008b24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f96:	e009      	b.n	8007fac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fcf7 	bl	800898e <USBD_CtlError>
          break;
 8007fa0:	e004      	b.n	8007fac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fcf2 	bl	800898e <USBD_CtlError>
          break;
 8007faa:	e000      	b.n	8007fae <USBD_StdItfReq+0xc2>
          break;
 8007fac:	bf00      	nop
      }
      break;
 8007fae:	e004      	b.n	8007fba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fceb 	bl	800898e <USBD_CtlError>
      break;
 8007fb8:	bf00      	nop
  }

  return ret;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	889b      	ldrh	r3, [r3, #4]
 8007fd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d007      	beq.n	8007ff4 <USBD_StdEPReq+0x30>
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	f200 817f 	bhi.w	80082e8 <USBD_StdEPReq+0x324>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d02a      	beq.n	8008044 <USBD_StdEPReq+0x80>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	f040 817a 	bne.w	80082e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fe83 	bl	8007d04 <USBD_CoreFindEP>
 8007ffe:	4603      	mov	r3, r0
 8008000:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008002:	7b7b      	ldrb	r3, [r7, #13]
 8008004:	2bff      	cmp	r3, #255	; 0xff
 8008006:	f000 8174 	beq.w	80082f2 <USBD_StdEPReq+0x32e>
 800800a:	7b7b      	ldrb	r3, [r7, #13]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8170 	bne.w	80082f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008012:	7b7a      	ldrb	r2, [r7, #13]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800801a:	7b7a      	ldrb	r2, [r7, #13]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	32ae      	adds	r2, #174	; 0xae
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 8163 	beq.w	80082f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800802c:	7b7a      	ldrb	r2, [r7, #13]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	32ae      	adds	r2, #174	; 0xae
 8008032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008042:	e156      	b.n	80082f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d008      	beq.n	800805e <USBD_StdEPReq+0x9a>
 800804c:	2b03      	cmp	r3, #3
 800804e:	f300 8145 	bgt.w	80082dc <USBD_StdEPReq+0x318>
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 809b 	beq.w	800818e <USBD_StdEPReq+0x1ca>
 8008058:	2b01      	cmp	r3, #1
 800805a:	d03c      	beq.n	80080d6 <USBD_StdEPReq+0x112>
 800805c:	e13e      	b.n	80082dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d002      	beq.n	8008070 <USBD_StdEPReq+0xac>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d016      	beq.n	800809c <USBD_StdEPReq+0xd8>
 800806e:	e02c      	b.n	80080ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00d      	beq.n	8008092 <USBD_StdEPReq+0xce>
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	2b80      	cmp	r3, #128	; 0x80
 800807a:	d00a      	beq.n	8008092 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f963 	bl	800934c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008086:	2180      	movs	r1, #128	; 0x80
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f95f 	bl	800934c <USBD_LL_StallEP>
 800808e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008090:	e020      	b.n	80080d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fc7a 	bl	800898e <USBD_CtlError>
              break;
 800809a:	e01b      	b.n	80080d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10e      	bne.n	80080c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <USBD_StdEPReq+0xfe>
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b80      	cmp	r3, #128	; 0x80
 80080ae:	d008      	beq.n	80080c2 <USBD_StdEPReq+0xfe>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	88db      	ldrh	r3, [r3, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f945 	bl	800934c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fd2e 	bl	8008b24 <USBD_CtlSendStatus>

              break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc5e 	bl	800898e <USBD_CtlError>
              break;
 80080d2:	bf00      	nop
          }
          break;
 80080d4:	e107      	b.n	80082e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d002      	beq.n	80080e8 <USBD_StdEPReq+0x124>
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d016      	beq.n	8008114 <USBD_StdEPReq+0x150>
 80080e6:	e04b      	b.n	8008180 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <USBD_StdEPReq+0x146>
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d00a      	beq.n	800810a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f927 	bl	800934c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080fe:	2180      	movs	r1, #128	; 0x80
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f923 	bl	800934c <USBD_LL_StallEP>
 8008106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008108:	e040      	b.n	800818c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc3e 	bl	800898e <USBD_CtlError>
              break;
 8008112:	e03b      	b.n	800818c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	885b      	ldrh	r3, [r3, #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d136      	bne.n	800818a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 f92d 	bl	800938a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fcf7 	bl	8008b24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fde2 	bl	8007d04 <USBD_CoreFindEP>
 8008140:	4603      	mov	r3, r0
 8008142:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008144:	7b7b      	ldrb	r3, [r7, #13]
 8008146:	2bff      	cmp	r3, #255	; 0xff
 8008148:	d01f      	beq.n	800818a <USBD_StdEPReq+0x1c6>
 800814a:	7b7b      	ldrb	r3, [r7, #13]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d11c      	bne.n	800818a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008150:	7b7a      	ldrb	r2, [r7, #13]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008158:	7b7a      	ldrb	r2, [r7, #13]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	; 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d010      	beq.n	800818a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008168:	7b7a      	ldrb	r2, [r7, #13]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800817e:	e004      	b.n	800818a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fc03 	bl	800898e <USBD_CtlError>
              break;
 8008188:	e000      	b.n	800818c <USBD_StdEPReq+0x1c8>
              break;
 800818a:	bf00      	nop
          }
          break;
 800818c:	e0ab      	b.n	80082e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d002      	beq.n	80081a0 <USBD_StdEPReq+0x1dc>
 800819a:	2b03      	cmp	r3, #3
 800819c:	d032      	beq.n	8008204 <USBD_StdEPReq+0x240>
 800819e:	e097      	b.n	80082d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <USBD_StdEPReq+0x1f2>
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d004      	beq.n	80081b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fbed 	bl	800898e <USBD_CtlError>
                break;
 80081b4:	e091      	b.n	80082da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da0b      	bge.n	80081d6 <USBD_StdEPReq+0x212>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	3310      	adds	r3, #16
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	3304      	adds	r3, #4
 80081d4:	e00b      	b.n	80081ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2202      	movs	r2, #2
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fc37 	bl	8008a70 <USBD_CtlSendData>
              break;
 8008202:	e06a      	b.n	80082da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da11      	bge.n	8008230 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	f003 020f 	and.w	r2, r3, #15
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d117      	bne.n	8008256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fbb0 	bl	800898e <USBD_CtlError>
                  break;
 800822e:	e054      	b.n	80082da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	f003 020f 	and.w	r2, r3, #15
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d104      	bne.n	8008256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fb9d 	bl	800898e <USBD_CtlError>
                  break;
 8008254:	e041      	b.n	80082da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825a:	2b00      	cmp	r3, #0
 800825c:	da0b      	bge.n	8008276 <USBD_StdEPReq+0x2b2>
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	3310      	adds	r3, #16
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	3304      	adds	r3, #4
 8008274:	e00b      	b.n	800828e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	3304      	adds	r3, #4
 800828e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <USBD_StdEPReq+0x2d8>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d103      	bne.n	80082a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e00e      	b.n	80082c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f88d 	bl	80093c8 <USBD_LL_IsStallEP>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e002      	b.n	80082c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2202      	movs	r2, #2
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fbd1 	bl	8008a70 <USBD_CtlSendData>
              break;
 80082ce:	e004      	b.n	80082da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb5b 	bl	800898e <USBD_CtlError>
              break;
 80082d8:	bf00      	nop
          }
          break;
 80082da:	e004      	b.n	80082e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fb55 	bl	800898e <USBD_CtlError>
          break;
 80082e4:	bf00      	nop
      }
      break;
 80082e6:	e005      	b.n	80082f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fb4f 	bl	800898e <USBD_CtlError>
      break;
 80082f0:	e000      	b.n	80082f4 <USBD_StdEPReq+0x330>
      break;
 80082f2:	bf00      	nop
  }

  return ret;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	885b      	ldrh	r3, [r3, #2]
 800831a:	0a1b      	lsrs	r3, r3, #8
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	2b06      	cmp	r3, #6
 8008322:	f200 8128 	bhi.w	8008576 <USBD_GetDescriptor+0x276>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_GetDescriptor+0x2c>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	08008349 	.word	0x08008349
 8008330:	08008361 	.word	0x08008361
 8008334:	080083a1 	.word	0x080083a1
 8008338:	08008577 	.word	0x08008577
 800833c:	08008577 	.word	0x08008577
 8008340:	08008517 	.word	0x08008517
 8008344:	08008543 	.word	0x08008543
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
      break;
 800835e:	e112      	b.n	8008586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7c1b      	ldrb	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10d      	bne.n	8008384 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f107 0208 	add.w	r2, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	2202      	movs	r2, #2
 8008380:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008382:	e100      	b.n	8008586 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	f107 0208 	add.w	r2, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	2202      	movs	r2, #2
 800839c:	701a      	strb	r2, [r3, #0]
      break;
 800839e:	e0f2      	b.n	8008586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	f200 80ac 	bhi.w	8008504 <USBD_GetDescriptor+0x204>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBD_GetDescriptor+0xb4>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083cd 	.word	0x080083cd
 80083b8:	08008401 	.word	0x08008401
 80083bc:	08008435 	.word	0x08008435
 80083c0:	08008469 	.word	0x08008469
 80083c4:	0800849d 	.word	0x0800849d
 80083c8:	080084d1 	.word	0x080084d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e091      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 facb 	bl	800898e <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e089      	b.n	8008514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e077      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fab1 	bl	800898e <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e06f      	b.n	8008514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e05d      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa97 	bl	800898e <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e055      	b.n	8008514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848a:	e043      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa7d 	bl	800898e <USBD_CtlError>
            err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
          break;
 800849a:	e03b      	b.n	8008514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084be:	e029      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa63 	bl	800898e <USBD_CtlError>
            err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
          break;
 80084ce:	e021      	b.n	8008514 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7c12      	ldrb	r2, [r2, #16]
 80084e8:	f107 0108 	add.w	r1, r7, #8
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
 80084f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f2:	e00f      	b.n	8008514 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa49 	bl	800898e <USBD_CtlError>
            err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
          break;
 8008502:	e007      	b.n	8008514 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa41 	bl	800898e <USBD_CtlError>
          err++;
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	3301      	adds	r3, #1
 8008510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008512:	bf00      	nop
      }
      break;
 8008514:	e037      	b.n	8008586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	f107 0208 	add.w	r2, r7, #8
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008530:	e029      	b.n	8008586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa2a 	bl	800898e <USBD_CtlError>
        err++;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3301      	adds	r3, #1
 800853e:	72fb      	strb	r3, [r7, #11]
      break;
 8008540:	e021      	b.n	8008586 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7c1b      	ldrb	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10d      	bne.n	8008566 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f107 0208 	add.w	r2, r7, #8
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
 800855a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3301      	adds	r3, #1
 8008560:	2207      	movs	r2, #7
 8008562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008564:	e00f      	b.n	8008586 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa10 	bl	800898e <USBD_CtlError>
        err++;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	3301      	adds	r3, #1
 8008572:	72fb      	strb	r3, [r7, #11]
      break;
 8008574:	e007      	b.n	8008586 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa08 	bl	800898e <USBD_CtlError>
      err++;
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	3301      	adds	r3, #1
 8008582:	72fb      	strb	r3, [r7, #11]
      break;
 8008584:	bf00      	nop
  }

  if (err != 0U)
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d11e      	bne.n	80085ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	88db      	ldrh	r3, [r3, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d016      	beq.n	80085c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00e      	beq.n	80085b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88da      	ldrh	r2, [r3, #6]
 800859e:	893b      	ldrh	r3, [r7, #8]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bf28      	it	cs
 80085a4:	4613      	movcs	r3, r2
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085aa:	893b      	ldrh	r3, [r7, #8]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68f9      	ldr	r1, [r7, #12]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fa5d 	bl	8008a70 <USBD_CtlSendData>
 80085b6:	e009      	b.n	80085cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f9e7 	bl	800898e <USBD_CtlError>
 80085c0:	e004      	b.n	80085cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 faae 	bl	8008b24 <USBD_CtlSendStatus>
 80085c8:	e000      	b.n	80085cc <USBD_GetDescriptor+0x2cc>
    return;
 80085ca:	bf00      	nop
  }
}
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d131      	bne.n	800864a <USBD_SetAddress+0x76>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d12d      	bne.n	800864a <USBD_SetAddress+0x76>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	2b7f      	cmp	r3, #127	; 0x7f
 80085f4:	d829      	bhi.n	800864a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d104      	bne.n	8008618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9bc 	bl	800898e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008616:	e01d      	b.n	8008654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fefb 	bl	8009420 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa7a 	bl	8008b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863e:	e009      	b.n	8008654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008648:	e004      	b.n	8008654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f99e 	bl	800898e <USBD_CtlError>
  }
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	885b      	ldrh	r3, [r3, #2]
 800866e:	b2da      	uxtb	r2, r3
 8008670:	4b4e      	ldr	r3, [pc, #312]	; (80087ac <USBD_SetConfig+0x150>)
 8008672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008674:	4b4d      	ldr	r3, [pc, #308]	; (80087ac <USBD_SetConfig+0x150>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d905      	bls.n	8008688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f985 	bl	800898e <USBD_CtlError>
    return USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e08c      	b.n	80087a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d002      	beq.n	800869a <USBD_SetConfig+0x3e>
 8008694:	2b03      	cmp	r3, #3
 8008696:	d029      	beq.n	80086ec <USBD_SetConfig+0x90>
 8008698:	e075      	b.n	8008786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800869a:	4b44      	ldr	r3, [pc, #272]	; (80087ac <USBD_SetConfig+0x150>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d020      	beq.n	80086e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086a2:	4b42      	ldr	r3, [pc, #264]	; (80087ac <USBD_SetConfig+0x150>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086ac:	4b3f      	ldr	r3, [pc, #252]	; (80087ac <USBD_SetConfig+0x150>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fe ffe7 	bl	8007686 <USBD_SetClassConfig>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d008      	beq.n	80086d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f962 	bl	800898e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086d2:	e065      	b.n	80087a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa25 	bl	8008b24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2203      	movs	r2, #3
 80086de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086e2:	e05d      	b.n	80087a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa1d 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 80086ea:	e059      	b.n	80087a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086ec:	4b2f      	ldr	r3, [pc, #188]	; (80087ac <USBD_SetConfig+0x150>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d112      	bne.n	800871a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086fc:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <USBD_SetConfig+0x150>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008706:	4b29      	ldr	r3, [pc, #164]	; (80087ac <USBD_SetConfig+0x150>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fe ffd6 	bl	80076be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa06 	bl	8008b24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008718:	e042      	b.n	80087a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <USBD_SetConfig+0x150>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d02a      	beq.n	800877e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7fe ffc4 	bl	80076be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008736:	4b1d      	ldr	r3, [pc, #116]	; (80087ac <USBD_SetConfig+0x150>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <USBD_SetConfig+0x150>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7fe ff9d 	bl	8007686 <USBD_SetClassConfig>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00f      	beq.n	8008776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f918 	bl	800898e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fe ffa9 	bl	80076be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008774:	e014      	b.n	80087a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9d4 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 800877c:	e010      	b.n	80087a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9d0 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 8008784:	e00c      	b.n	80087a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f900 	bl	800898e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <USBD_SetConfig+0x150>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7fe ff92 	bl	80076be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	73fb      	strb	r3, [r7, #15]
      break;
 800879e:	bf00      	nop
  }

  return ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20009f60 	.word	0x20009f60

080087b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	88db      	ldrh	r3, [r3, #6]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d004      	beq.n	80087cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8e2 	bl	800898e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087ca:	e023      	b.n	8008814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	dc02      	bgt.n	80087de <USBD_GetConfig+0x2e>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc03      	bgt.n	80087e4 <USBD_GetConfig+0x34>
 80087dc:	e015      	b.n	800880a <USBD_GetConfig+0x5a>
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d00b      	beq.n	80087fa <USBD_GetConfig+0x4a>
 80087e2:	e012      	b.n	800880a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3308      	adds	r3, #8
 80087ee:	2201      	movs	r2, #1
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f93c 	bl	8008a70 <USBD_CtlSendData>
        break;
 80087f8:	e00c      	b.n	8008814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3304      	adds	r3, #4
 80087fe:	2201      	movs	r2, #1
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f934 	bl	8008a70 <USBD_CtlSendData>
        break;
 8008808:	e004      	b.n	8008814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f8be 	bl	800898e <USBD_CtlError>
        break;
 8008812:	bf00      	nop
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882c:	b2db      	uxtb	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	2b02      	cmp	r3, #2
 8008832:	d81e      	bhi.n	8008872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	88db      	ldrh	r3, [r3, #6]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d004      	beq.n	8008846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8a5 	bl	800898e <USBD_CtlError>
        break;
 8008844:	e01a      	b.n	800887c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f043 0202 	orr.w	r2, r3, #2
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	330c      	adds	r3, #12
 8008866:	2202      	movs	r2, #2
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f900 	bl	8008a70 <USBD_CtlSendData>
      break;
 8008870:	e004      	b.n	800887c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f88a 	bl	800898e <USBD_CtlError>
      break;
 800887a:	bf00      	nop
  }
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d107      	bne.n	80088a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f940 	bl	8008b24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088a4:	e013      	b.n	80088ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d10b      	bne.n	80088c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	889b      	ldrh	r3, [r3, #4]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f930 	bl	8008b24 <USBD_CtlSendStatus>
}
 80088c4:	e003      	b.n	80088ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f860 	bl	800898e <USBD_CtlError>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d80b      	bhi.n	8008906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	885b      	ldrh	r3, [r3, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d10c      	bne.n	8008910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f910 	bl	8008b24 <USBD_CtlSendStatus>
      }
      break;
 8008904:	e004      	b.n	8008910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f840 	bl	800898e <USBD_CtlError>
      break;
 800890e:	e000      	b.n	8008912 <USBD_ClrFeature+0x3c>
      break;
 8008910:	bf00      	nop
  }
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f7ff fa41 	bl	8007dcc <SWAPBYTE>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff fa34 	bl	8007dcc <SWAPBYTE>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3301      	adds	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7ff fa27 	bl	8007dcc <SWAPBYTE>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	80da      	strh	r2, [r3, #6]
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fcd6 	bl	800934c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089a0:	2100      	movs	r1, #0
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fcd2 	bl	800934c <USBD_LL_StallEP>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d036      	beq.n	8008a34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089ca:	6938      	ldr	r0, [r7, #16]
 80089cc:	f000 f836 	bl	8008a3c <USBD_GetLen>
 80089d0:	4603      	mov	r3, r0
 80089d2:	3301      	adds	r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7812      	ldrb	r2, [r2, #0]
 80089e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	3301      	adds	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	4413      	add	r3, r2
 80089f6:	2203      	movs	r2, #3
 80089f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	3301      	adds	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a00:	e013      	b.n	8008a2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	4413      	add	r3, r2
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3301      	adds	r3, #1
 8008a12:	613b      	str	r3, [r7, #16]
    idx++;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	3301      	adds	r3, #1
 8008a18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	4413      	add	r3, r2
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	3301      	adds	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e7      	bne.n	8008a02 <USBD_GetString+0x52>
 8008a32:	e000      	b.n	8008a36 <USBD_GetString+0x86>
    return;
 8008a34:	bf00      	nop
  }
}
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a4c:	e005      	b.n	8008a5a <USBD_GetLen+0x1e>
  {
    len++;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	3301      	adds	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f5      	bne.n	8008a4e <USBD_GetLen+0x12>
  }

  return len;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	2100      	movs	r1, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fce1 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fcd0 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	2100      	movs	r1, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fcd4 	bl	80094a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fcc3 	bl	80094a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc8f 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2205      	movs	r2, #5
 8008b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fc9d 	bl	80094a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b74:	2200      	movs	r2, #0
 8008b76:	4912      	ldr	r1, [pc, #72]	; (8008bc0 <MX_USB_DEVICE_Init+0x50>)
 8008b78:	4812      	ldr	r0, [pc, #72]	; (8008bc4 <MX_USB_DEVICE_Init+0x54>)
 8008b7a:	f7fe fd07 	bl	800758c <USBD_Init>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b84:	f7f8 f8ce 	bl	8000d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b88:	490f      	ldr	r1, [pc, #60]	; (8008bc8 <MX_USB_DEVICE_Init+0x58>)
 8008b8a:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <MX_USB_DEVICE_Init+0x54>)
 8008b8c:	f7fe fd2e 	bl	80075ec <USBD_RegisterClass>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b96:	f7f8 f8c5 	bl	8000d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b9a:	490c      	ldr	r1, [pc, #48]	; (8008bcc <MX_USB_DEVICE_Init+0x5c>)
 8008b9c:	4809      	ldr	r0, [pc, #36]	; (8008bc4 <MX_USB_DEVICE_Init+0x54>)
 8008b9e:	f7fe fc1f 	bl	80073e0 <USBD_CDC_RegisterInterface>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ba8:	f7f8 f8bc 	bl	8000d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bac:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <MX_USB_DEVICE_Init+0x54>)
 8008bae:	f7fe fd53 	bl	8007658 <USBD_Start>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bb8:	f7f8 f8b4 	bl	8000d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bbc:	bf00      	nop
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	200000bc 	.word	0x200000bc
 8008bc4:	20009f64 	.word	0x20009f64
 8008bc8:	20000028 	.word	0x20000028
 8008bcc:	200000a8 	.word	0x200000a8

08008bd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4905      	ldr	r1, [pc, #20]	; (8008bec <CDC_Init_FS+0x1c>)
 8008bd8:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <CDC_Init_FS+0x20>)
 8008bda:	f7fe fc1b 	bl	8007414 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bde:	4905      	ldr	r1, [pc, #20]	; (8008bf4 <CDC_Init_FS+0x24>)
 8008be0:	4803      	ldr	r0, [pc, #12]	; (8008bf0 <CDC_Init_FS+0x20>)
 8008be2:	f7fe fc39 	bl	8007458 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008be6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	2000a640 	.word	0x2000a640
 8008bf0:	20009f64 	.word	0x20009f64
 8008bf4:	2000a240 	.word	0x2000a240

08008bf8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
 8008c14:	4613      	mov	r3, r2
 8008c16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	2b23      	cmp	r3, #35	; 0x23
 8008c1c:	d84a      	bhi.n	8008cb4 <CDC_Control_FS+0xac>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <CDC_Control_FS+0x1c>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008cb5 	.word	0x08008cb5
 8008c28:	08008cb5 	.word	0x08008cb5
 8008c2c:	08008cb5 	.word	0x08008cb5
 8008c30:	08008cb5 	.word	0x08008cb5
 8008c34:	08008cb5 	.word	0x08008cb5
 8008c38:	08008cb5 	.word	0x08008cb5
 8008c3c:	08008cb5 	.word	0x08008cb5
 8008c40:	08008cb5 	.word	0x08008cb5
 8008c44:	08008cb5 	.word	0x08008cb5
 8008c48:	08008cb5 	.word	0x08008cb5
 8008c4c:	08008cb5 	.word	0x08008cb5
 8008c50:	08008cb5 	.word	0x08008cb5
 8008c54:	08008cb5 	.word	0x08008cb5
 8008c58:	08008cb5 	.word	0x08008cb5
 8008c5c:	08008cb5 	.word	0x08008cb5
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008cb5 	.word	0x08008cb5
 8008c68:	08008cb5 	.word	0x08008cb5
 8008c6c:	08008cb5 	.word	0x08008cb5
 8008c70:	08008cb5 	.word	0x08008cb5
 8008c74:	08008cb5 	.word	0x08008cb5
 8008c78:	08008cb5 	.word	0x08008cb5
 8008c7c:	08008cb5 	.word	0x08008cb5
 8008c80:	08008cb5 	.word	0x08008cb5
 8008c84:	08008cb5 	.word	0x08008cb5
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	08008cb5 	.word	0x08008cb5
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cb5 	.word	0x08008cb5
 8008c98:	08008cb5 	.word	0x08008cb5
 8008c9c:	08008cb5 	.word	0x08008cb5
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cb5 	.word	0x08008cb5
 8008cac:	08008cb5 	.word	0x08008cb5
 8008cb0:	08008cb5 	.word	0x08008cb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cb4:	bf00      	nop
  }

  return (USBD_OK);
 8008cb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <CDC_Receive_FS+0x24>)
 8008cd2:	f7fe fbc1 	bl	8007458 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cd6:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <CDC_Receive_FS+0x24>)
 8008cd8:	f7fe fc22 	bl	8007520 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20009f64 	.word	0x20009f64

08008cec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <CDC_Transmit_FS+0x48>)
 8008cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e00b      	b.n	8008d2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	4806      	ldr	r0, [pc, #24]	; (8008d34 <CDC_Transmit_FS+0x48>)
 8008d1a:	f7fe fb7b 	bl	8007414 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <CDC_Transmit_FS+0x48>)
 8008d20:	f7fe fbb8 	bl	8007494 <USBD_CDC_TransmitPacket>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20009f64 	.word	0x20009f64

08008d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2212      	movs	r2, #18
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200000d8 	.word	0x200000d8

08008d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	200000ec 	.word	0x200000ec

08008da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dbc:	f7ff fdf8 	bl	80089b0 <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc8:	f7ff fdf2 	bl	80089b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000aa40 	.word	0x2000aa40
 8008ddc:	08009f14 	.word	0x08009f14

08008de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	4904      	ldr	r1, [pc, #16]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008df0:	4804      	ldr	r0, [pc, #16]	; (8008e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008df2:	f7ff fddd 	bl	80089b0 <USBD_GetString>
  return USBD_StrDesc;
 8008df6:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	2000aa40 	.word	0x2000aa40
 8008e04:	08009f2c 	.word	0x08009f2c

08008e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	221a      	movs	r2, #26
 8008e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e1a:	f000 f843 	bl	8008ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e1e:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200000f0 	.word	0x200000f0

08008e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4907      	ldr	r1, [pc, #28]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e42:	4808      	ldr	r0, [pc, #32]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e44:	f7ff fdb4 	bl	80089b0 <USBD_GetString>
 8008e48:	e004      	b.n	8008e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4904      	ldr	r1, [pc, #16]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e50:	f7ff fdae 	bl	80089b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	2000aa40 	.word	0x2000aa40
 8008e64:	08009f40 	.word	0x08009f40

08008e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4907      	ldr	r1, [pc, #28]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7e:	4808      	ldr	r0, [pc, #32]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e80:	f7ff fd96 	bl	80089b0 <USBD_GetString>
 8008e84:	e004      	b.n	8008e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e8c:	f7ff fd90 	bl	80089b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2000aa40 	.word	0x2000aa40
 8008ea0:	08009f4c 	.word	0x08009f4c

08008ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <Get_SerialNum+0x44>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008eb0:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <Get_SerialNum+0x48>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <Get_SerialNum+0x4c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eca:	2208      	movs	r2, #8
 8008ecc:	4909      	ldr	r1, [pc, #36]	; (8008ef4 <Get_SerialNum+0x50>)
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f814 	bl	8008efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	4908      	ldr	r1, [pc, #32]	; (8008ef8 <Get_SerialNum+0x54>)
 8008ed8:	68b8      	ldr	r0, [r7, #8]
 8008eda:	f000 f80f 	bl	8008efc <IntToUnicode>
  }
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	1fff7a10 	.word	0x1fff7a10
 8008eec:	1fff7a14 	.word	0x1fff7a14
 8008ef0:	1fff7a18 	.word	0x1fff7a18
 8008ef4:	200000f2 	.word	0x200000f2
 8008ef8:	20000102 	.word	0x20000102

08008efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
 8008f12:	e027      	b.n	8008f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	0f1b      	lsrs	r3, r3, #28
 8008f18:	2b09      	cmp	r3, #9
 8008f1a:	d80b      	bhi.n	8008f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0f1b      	lsrs	r3, r3, #28
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	4619      	mov	r1, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3230      	adds	r2, #48	; 0x30
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e00a      	b.n	8008f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0f1b      	lsrs	r3, r3, #28
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	440b      	add	r3, r1
 8008f44:	3237      	adds	r2, #55	; 0x37
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	3301      	adds	r3, #1
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	3301      	adds	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
 8008f64:	7dfa      	ldrb	r2, [r7, #23]
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3d3      	bcc.n	8008f14 <IntToUnicode+0x18>
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f84:	f107 0314 	add.w	r3, r7, #20
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	605a      	str	r2, [r3, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f9c:	d13a      	bne.n	8009014 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	4b1e      	ldr	r3, [pc, #120]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	4a1d      	ldr	r2, [pc, #116]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fa8:	f043 0301 	orr.w	r3, r3, #1
 8008fac:	6313      	str	r3, [r2, #48]	; 0x30
 8008fae:	4b1b      	ldr	r3, [pc, #108]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fcc:	230a      	movs	r3, #10
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4812      	ldr	r0, [pc, #72]	; (8009020 <HAL_PCD_MspInit+0xa4>)
 8008fd8:	f7f9 faa0 	bl	800251c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	4a0e      	ldr	r2, [pc, #56]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	4a0a      	ldr	r2, [pc, #40]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8008ff8:	4b08      	ldr	r3, [pc, #32]	; (800901c <HAL_PCD_MspInit+0xa0>)
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009004:	2200      	movs	r2, #0
 8009006:	2100      	movs	r1, #0
 8009008:	2043      	movs	r0, #67	; 0x43
 800900a:	f7f8 fee0 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800900e:	2043      	movs	r0, #67	; 0x43
 8009010:	f7f8 fef9 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009014:	bf00      	nop
 8009016:	3728      	adds	r7, #40	; 0x28
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40023800 	.word	0x40023800
 8009020:	40020000 	.word	0x40020000

08009024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fe fb59 	bl	80076f2 <USBD_LL_SetupStage>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800905a:	78fa      	ldrb	r2, [r7, #3]
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	4619      	mov	r1, r3
 8009072:	f7fe fb93 	bl	800779c <USBD_LL_DataOutStage>
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	4613      	mov	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	440b      	add	r3, r1
 800909e:	334c      	adds	r3, #76	; 0x4c
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7fe fc2c 	bl	8007902 <USBD_LL_DataInStage>
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fd60 	bl	8007b86 <USBD_LL_SOF>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d001      	beq.n	80090e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090e2:	f7f7 fe1f 	bl	8000d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fd0a 	bl	8007b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fcb2 	bl	8007a66 <USBD_LL_Reset>
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fd05 	bl	8007b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009132:	f043 0301 	orr.w	r3, r3, #1
 8009136:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <HAL_PCD_SuspendCallback+0x48>)
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	4a03      	ldr	r2, [pc, #12]	; (8009154 <HAL_PCD_SuspendCallback+0x48>)
 8009146:	f043 0306 	orr.w	r3, r3, #6
 800914a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	e000ed00 	.word	0xe000ed00

08009158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fcf5 	bl	8007b56 <USBD_LL_Resume>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fd4d 	bl	8007c2a <USBD_LL_IsoOUTIncomplete>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe fd09 	bl	8007bc6 <USBD_LL_IsoINIncomplete>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fd5f 	bl	8007c8e <USBD_LL_DevConnected>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fd5c 	bl	8007ca4 <USBD_LL_DevDisconnected>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d13c      	bne.n	800927e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009204:	4a20      	ldr	r2, [pc, #128]	; (8009288 <USBD_LL_Init+0x94>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a1e      	ldr	r2, [pc, #120]	; (8009288 <USBD_LL_Init+0x94>)
 8009210:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009214:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <USBD_LL_Init+0x94>)
 8009216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800921a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <USBD_LL_Init+0x94>)
 800921e:	2204      	movs	r2, #4
 8009220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009222:	4b19      	ldr	r3, [pc, #100]	; (8009288 <USBD_LL_Init+0x94>)
 8009224:	2202      	movs	r2, #2
 8009226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009228:	4b17      	ldr	r3, [pc, #92]	; (8009288 <USBD_LL_Init+0x94>)
 800922a:	2200      	movs	r2, #0
 800922c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800922e:	4b16      	ldr	r3, [pc, #88]	; (8009288 <USBD_LL_Init+0x94>)
 8009230:	2202      	movs	r2, #2
 8009232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <USBD_LL_Init+0x94>)
 8009236:	2200      	movs	r2, #0
 8009238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <USBD_LL_Init+0x94>)
 800923c:	2200      	movs	r2, #0
 800923e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009240:	4b11      	ldr	r3, [pc, #68]	; (8009288 <USBD_LL_Init+0x94>)
 8009242:	2200      	movs	r2, #0
 8009244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009246:	4b10      	ldr	r3, [pc, #64]	; (8009288 <USBD_LL_Init+0x94>)
 8009248:	2200      	movs	r2, #0
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800924c:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <USBD_LL_Init+0x94>)
 800924e:	2200      	movs	r2, #0
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009252:	480d      	ldr	r0, [pc, #52]	; (8009288 <USBD_LL_Init+0x94>)
 8009254:	f7f9 faff 	bl	8002856 <HAL_PCD_Init>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800925e:	f7f7 fd61 	bl	8000d24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009262:	2180      	movs	r1, #128	; 0x80
 8009264:	4808      	ldr	r0, [pc, #32]	; (8009288 <USBD_LL_Init+0x94>)
 8009266:	f7fa fd56 	bl	8003d16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800926a:	2240      	movs	r2, #64	; 0x40
 800926c:	2100      	movs	r1, #0
 800926e:	4806      	ldr	r0, [pc, #24]	; (8009288 <USBD_LL_Init+0x94>)
 8009270:	f7fa fd0a 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	2101      	movs	r1, #1
 8009278:	4803      	ldr	r0, [pc, #12]	; (8009288 <USBD_LL_Init+0x94>)
 800927a:	f7fa fd05 	bl	8003c88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	2000ac40 	.word	0x2000ac40

0800928c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f9 fbf4 	bl	8002a90 <HAL_PCD_Start>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f942 	bl	8009538 <USBD_Get_USB_Status>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	461a      	mov	r2, r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	70fb      	strb	r3, [r7, #3]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70bb      	strb	r3, [r7, #2]
 80092d8:	4613      	mov	r3, r2
 80092da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092ea:	78bb      	ldrb	r3, [r7, #2]
 80092ec:	883a      	ldrh	r2, [r7, #0]
 80092ee:	78f9      	ldrb	r1, [r7, #3]
 80092f0:	f7fa f8c5 	bl	800347e <HAL_PCD_EP_Open>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f91c 	bl	8009538 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f7fa f90e 	bl	800354e <HAL_PCD_EP_Close>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 f8fd 	bl	8009538 <USBD_Get_USB_Status>
 800933e:	4603      	mov	r3, r0
 8009340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009342:	7bbb      	ldrb	r3, [r7, #14]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7fa f9e6 	bl	800373c <HAL_PCD_EP_SetStall>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f8de 	bl	8009538 <USBD_Get_USB_Status>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009380:	7bbb      	ldrb	r3, [r7, #14]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa fa2b 	bl	8003804 <HAL_PCD_EP_ClrStall>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f8bf 	bl	8009538 <USBD_Get_USB_Status>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093be:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da0b      	bge.n	80093fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	4613      	mov	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	333e      	adds	r3, #62	; 0x3e
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	e00b      	b.n	8009414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009402:	68f9      	ldr	r1, [r7, #12]
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7f9 fff8 	bl	8003434 <HAL_PCD_SetAddress>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f874 	bl	8009538 <USBD_Get_USB_Status>
 8009450:	4603      	mov	r3, r0
 8009452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009454:	7bbb      	ldrb	r3, [r7, #14]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	460b      	mov	r3, r1
 800946c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800947c:	7af9      	ldrb	r1, [r7, #11]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	f7fa f911 	bl	80036a8 <HAL_PCD_EP_Transmit>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f853 	bl	8009538 <USBD_Get_USB_Status>
 8009492:	4603      	mov	r3, r0
 8009494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009496:	7dbb      	ldrb	r3, [r7, #22]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	460b      	mov	r3, r1
 80094ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094be:	7af9      	ldrb	r1, [r7, #11]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	f7fa f88d 	bl	80035e2 <HAL_PCD_EP_Receive>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f832 	bl	8009538 <USBD_Get_USB_Status>
 80094d4:	4603      	mov	r3, r0
 80094d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fa f8bd 	bl	8003678 <HAL_PCD_EP_GetRxCount>
 80094fe:	4603      	mov	r3, r0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009510:	4b03      	ldr	r3, [pc, #12]	; (8009520 <USBD_static_malloc+0x18>)
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	2000b14c 	.word	0x2000b14c

08009524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]

}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d817      	bhi.n	800957c <USBD_Get_USB_Status+0x44>
 800954c:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <USBD_Get_USB_Status+0x1c>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	08009565 	.word	0x08009565
 8009558:	0800956b 	.word	0x0800956b
 800955c:	08009571 	.word	0x08009571
 8009560:	08009577 	.word	0x08009577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
    break;
 8009568:	e00b      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800956a:	2303      	movs	r3, #3
 800956c:	73fb      	strb	r3, [r7, #15]
    break;
 800956e:	e008      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009570:	2301      	movs	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]
    break;
 8009574:	e005      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009576:	2303      	movs	r3, #3
 8009578:	73fb      	strb	r3, [r7, #15]
    break;
 800957a:	e002      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800957c:	2303      	movs	r3, #3
 800957e:	73fb      	strb	r3, [r7, #15]
    break;
 8009580:	bf00      	nop
  }
  return usb_status;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <siprintf>:
 8009590:	b40e      	push	{r1, r2, r3}
 8009592:	b500      	push	{lr}
 8009594:	b09c      	sub	sp, #112	; 0x70
 8009596:	ab1d      	add	r3, sp, #116	; 0x74
 8009598:	9002      	str	r0, [sp, #8]
 800959a:	9006      	str	r0, [sp, #24]
 800959c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095a0:	4809      	ldr	r0, [pc, #36]	; (80095c8 <siprintf+0x38>)
 80095a2:	9107      	str	r1, [sp, #28]
 80095a4:	9104      	str	r1, [sp, #16]
 80095a6:	4909      	ldr	r1, [pc, #36]	; (80095cc <siprintf+0x3c>)
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	a902      	add	r1, sp, #8
 80095b4:	f000 f992 	bl	80098dc <_svfiprintf_r>
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	b01c      	add	sp, #112	; 0x70
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	b003      	add	sp, #12
 80095c6:	4770      	bx	lr
 80095c8:	20000158 	.word	0x20000158
 80095cc:	ffff0208 	.word	0xffff0208

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <__errno>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	; (80095e8 <__errno+0x8>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000158 	.word	0x20000158

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4d0d      	ldr	r5, [pc, #52]	; (8009624 <__libc_init_array+0x38>)
 80095f0:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f2:	1b64      	subs	r4, r4, r5
 80095f4:	10a4      	asrs	r4, r4, #2
 80095f6:	2600      	movs	r6, #0
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	4d0b      	ldr	r5, [pc, #44]	; (800962c <__libc_init_array+0x40>)
 80095fe:	4c0c      	ldr	r4, [pc, #48]	; (8009630 <__libc_init_array+0x44>)
 8009600:	f000 fc6a 	bl	8009ed8 <_init>
 8009604:	1b64      	subs	r4, r4, r5
 8009606:	10a4      	asrs	r4, r4, #2
 8009608:	2600      	movs	r6, #0
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	08009fb0 	.word	0x08009fb0
 8009628:	08009fb0 	.word	0x08009fb0
 800962c:	08009fb0 	.word	0x08009fb0
 8009630:	08009fb4 	.word	0x08009fb4

08009634 <__retarget_lock_acquire_recursive>:
 8009634:	4770      	bx	lr

08009636 <__retarget_lock_release_recursive>:
 8009636:	4770      	bx	lr

08009638 <_free_r>:
 8009638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963a:	2900      	cmp	r1, #0
 800963c:	d044      	beq.n	80096c8 <_free_r+0x90>
 800963e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009642:	9001      	str	r0, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f1a1 0404 	sub.w	r4, r1, #4
 800964a:	bfb8      	it	lt
 800964c:	18e4      	addlt	r4, r4, r3
 800964e:	f000 f8df 	bl	8009810 <__malloc_lock>
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <_free_r+0x94>)
 8009654:	9801      	ldr	r0, [sp, #4]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x30>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	f000 b8da 	b.w	800981c <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x46>
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	1961      	adds	r1, r4, r5
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1949      	addeq	r1, r1, r5
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x22>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x50>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x46>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1855      	adds	r5, r2, r1
 800968c:	42a5      	cmp	r5, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x70>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	4421      	add	r1, r4
 8009694:	1854      	adds	r4, r2, r1
 8009696:	42a3      	cmp	r3, r4
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x26>
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	440c      	add	r4, r1
 80096a4:	6014      	str	r4, [r2, #0]
 80096a6:	e7da      	b.n	800965e <_free_r+0x26>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x78>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x26>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7ca      	b.n	800965e <_free_r+0x26>
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	2000b4ac 	.word	0x2000b4ac

080096d0 <sbrk_aligned>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4e0e      	ldr	r6, [pc, #56]	; (800970c <sbrk_aligned+0x3c>)
 80096d4:	460c      	mov	r4, r1
 80096d6:	6831      	ldr	r1, [r6, #0]
 80096d8:	4605      	mov	r5, r0
 80096da:	b911      	cbnz	r1, 80096e2 <sbrk_aligned+0x12>
 80096dc:	f000 fba6 	bl	8009e2c <_sbrk_r>
 80096e0:	6030      	str	r0, [r6, #0]
 80096e2:	4621      	mov	r1, r4
 80096e4:	4628      	mov	r0, r5
 80096e6:	f000 fba1 	bl	8009e2c <_sbrk_r>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	d00a      	beq.n	8009704 <sbrk_aligned+0x34>
 80096ee:	1cc4      	adds	r4, r0, #3
 80096f0:	f024 0403 	bic.w	r4, r4, #3
 80096f4:	42a0      	cmp	r0, r4
 80096f6:	d007      	beq.n	8009708 <sbrk_aligned+0x38>
 80096f8:	1a21      	subs	r1, r4, r0
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 fb96 	bl	8009e2c <_sbrk_r>
 8009700:	3001      	adds	r0, #1
 8009702:	d101      	bne.n	8009708 <sbrk_aligned+0x38>
 8009704:	f04f 34ff 	mov.w	r4, #4294967295
 8009708:	4620      	mov	r0, r4
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	2000b4b0 	.word	0x2000b4b0

08009710 <_malloc_r>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	1ccd      	adds	r5, r1, #3
 8009716:	f025 0503 	bic.w	r5, r5, #3
 800971a:	3508      	adds	r5, #8
 800971c:	2d0c      	cmp	r5, #12
 800971e:	bf38      	it	cc
 8009720:	250c      	movcc	r5, #12
 8009722:	2d00      	cmp	r5, #0
 8009724:	4607      	mov	r7, r0
 8009726:	db01      	blt.n	800972c <_malloc_r+0x1c>
 8009728:	42a9      	cmp	r1, r5
 800972a:	d905      	bls.n	8009738 <_malloc_r+0x28>
 800972c:	230c      	movs	r3, #12
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	2600      	movs	r6, #0
 8009732:	4630      	mov	r0, r6
 8009734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009738:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800980c <_malloc_r+0xfc>
 800973c:	f000 f868 	bl	8009810 <__malloc_lock>
 8009740:	f8d8 3000 	ldr.w	r3, [r8]
 8009744:	461c      	mov	r4, r3
 8009746:	bb5c      	cbnz	r4, 80097a0 <_malloc_r+0x90>
 8009748:	4629      	mov	r1, r5
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ffc0 	bl	80096d0 <sbrk_aligned>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	4604      	mov	r4, r0
 8009754:	d155      	bne.n	8009802 <_malloc_r+0xf2>
 8009756:	f8d8 4000 	ldr.w	r4, [r8]
 800975a:	4626      	mov	r6, r4
 800975c:	2e00      	cmp	r6, #0
 800975e:	d145      	bne.n	80097ec <_malloc_r+0xdc>
 8009760:	2c00      	cmp	r4, #0
 8009762:	d048      	beq.n	80097f6 <_malloc_r+0xe6>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	4631      	mov	r1, r6
 8009768:	4638      	mov	r0, r7
 800976a:	eb04 0903 	add.w	r9, r4, r3
 800976e:	f000 fb5d 	bl	8009e2c <_sbrk_r>
 8009772:	4581      	cmp	r9, r0
 8009774:	d13f      	bne.n	80097f6 <_malloc_r+0xe6>
 8009776:	6821      	ldr	r1, [r4, #0]
 8009778:	1a6d      	subs	r5, r5, r1
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ffa7 	bl	80096d0 <sbrk_aligned>
 8009782:	3001      	adds	r0, #1
 8009784:	d037      	beq.n	80097f6 <_malloc_r+0xe6>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	442b      	add	r3, r5
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	f8d8 3000 	ldr.w	r3, [r8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d038      	beq.n	8009806 <_malloc_r+0xf6>
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	42a2      	cmp	r2, r4
 8009798:	d12b      	bne.n	80097f2 <_malloc_r+0xe2>
 800979a:	2200      	movs	r2, #0
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	e00f      	b.n	80097c0 <_malloc_r+0xb0>
 80097a0:	6822      	ldr	r2, [r4, #0]
 80097a2:	1b52      	subs	r2, r2, r5
 80097a4:	d41f      	bmi.n	80097e6 <_malloc_r+0xd6>
 80097a6:	2a0b      	cmp	r2, #11
 80097a8:	d917      	bls.n	80097da <_malloc_r+0xca>
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	6059      	strne	r1, [r3, #4]
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	bf08      	it	eq
 80097b8:	f8c8 1000 	streq.w	r1, [r8]
 80097bc:	5162      	str	r2, [r4, r5]
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4638      	mov	r0, r7
 80097c2:	f104 060b 	add.w	r6, r4, #11
 80097c6:	f000 f829 	bl	800981c <__malloc_unlock>
 80097ca:	f026 0607 	bic.w	r6, r6, #7
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	1af2      	subs	r2, r6, r3
 80097d2:	d0ae      	beq.n	8009732 <_malloc_r+0x22>
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	50a3      	str	r3, [r4, r2]
 80097d8:	e7ab      	b.n	8009732 <_malloc_r+0x22>
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6862      	ldr	r2, [r4, #4]
 80097de:	d1dd      	bne.n	800979c <_malloc_r+0x8c>
 80097e0:	f8c8 2000 	str.w	r2, [r8]
 80097e4:	e7ec      	b.n	80097c0 <_malloc_r+0xb0>
 80097e6:	4623      	mov	r3, r4
 80097e8:	6864      	ldr	r4, [r4, #4]
 80097ea:	e7ac      	b.n	8009746 <_malloc_r+0x36>
 80097ec:	4634      	mov	r4, r6
 80097ee:	6876      	ldr	r6, [r6, #4]
 80097f0:	e7b4      	b.n	800975c <_malloc_r+0x4c>
 80097f2:	4613      	mov	r3, r2
 80097f4:	e7cc      	b.n	8009790 <_malloc_r+0x80>
 80097f6:	230c      	movs	r3, #12
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	4638      	mov	r0, r7
 80097fc:	f000 f80e 	bl	800981c <__malloc_unlock>
 8009800:	e797      	b.n	8009732 <_malloc_r+0x22>
 8009802:	6025      	str	r5, [r4, #0]
 8009804:	e7dc      	b.n	80097c0 <_malloc_r+0xb0>
 8009806:	605b      	str	r3, [r3, #4]
 8009808:	deff      	udf	#255	; 0xff
 800980a:	bf00      	nop
 800980c:	2000b4ac 	.word	0x2000b4ac

08009810 <__malloc_lock>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__malloc_lock+0x8>)
 8009812:	f7ff bf0f 	b.w	8009634 <__retarget_lock_acquire_recursive>
 8009816:	bf00      	nop
 8009818:	2000b4a8 	.word	0x2000b4a8

0800981c <__malloc_unlock>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__malloc_unlock+0x8>)
 800981e:	f7ff bf0a 	b.w	8009636 <__retarget_lock_release_recursive>
 8009822:	bf00      	nop
 8009824:	2000b4a8 	.word	0x2000b4a8

08009828 <__ssputs_r>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	688e      	ldr	r6, [r1, #8]
 800982e:	461f      	mov	r7, r3
 8009830:	42be      	cmp	r6, r7
 8009832:	680b      	ldr	r3, [r1, #0]
 8009834:	4682      	mov	sl, r0
 8009836:	460c      	mov	r4, r1
 8009838:	4690      	mov	r8, r2
 800983a:	d82c      	bhi.n	8009896 <__ssputs_r+0x6e>
 800983c:	898a      	ldrh	r2, [r1, #12]
 800983e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009842:	d026      	beq.n	8009892 <__ssputs_r+0x6a>
 8009844:	6965      	ldr	r5, [r4, #20]
 8009846:	6909      	ldr	r1, [r1, #16]
 8009848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800984c:	eba3 0901 	sub.w	r9, r3, r1
 8009850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009854:	1c7b      	adds	r3, r7, #1
 8009856:	444b      	add	r3, r9
 8009858:	106d      	asrs	r5, r5, #1
 800985a:	429d      	cmp	r5, r3
 800985c:	bf38      	it	cc
 800985e:	461d      	movcc	r5, r3
 8009860:	0553      	lsls	r3, r2, #21
 8009862:	d527      	bpl.n	80098b4 <__ssputs_r+0x8c>
 8009864:	4629      	mov	r1, r5
 8009866:	f7ff ff53 	bl	8009710 <_malloc_r>
 800986a:	4606      	mov	r6, r0
 800986c:	b360      	cbz	r0, 80098c8 <__ssputs_r+0xa0>
 800986e:	6921      	ldr	r1, [r4, #16]
 8009870:	464a      	mov	r2, r9
 8009872:	f000 faeb 	bl	8009e4c <memcpy>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6126      	str	r6, [r4, #16]
 8009884:	6165      	str	r5, [r4, #20]
 8009886:	444e      	add	r6, r9
 8009888:	eba5 0509 	sub.w	r5, r5, r9
 800988c:	6026      	str	r6, [r4, #0]
 800988e:	60a5      	str	r5, [r4, #8]
 8009890:	463e      	mov	r6, r7
 8009892:	42be      	cmp	r6, r7
 8009894:	d900      	bls.n	8009898 <__ssputs_r+0x70>
 8009896:	463e      	mov	r6, r7
 8009898:	6820      	ldr	r0, [r4, #0]
 800989a:	4632      	mov	r2, r6
 800989c:	4641      	mov	r1, r8
 800989e:	f000 faab 	bl	8009df8 <memmove>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	1b9b      	subs	r3, r3, r6
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	4433      	add	r3, r6
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2000      	movs	r0, #0
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	462a      	mov	r2, r5
 80098b6:	f000 fad7 	bl	8009e68 <_realloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e0      	bne.n	8009882 <__ssputs_r+0x5a>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7ff feb8 	bl	8009638 <_free_r>
 80098c8:	230c      	movs	r3, #12
 80098ca:	f8ca 3000 	str.w	r3, [sl]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	e7e9      	b.n	80098b0 <__ssputs_r+0x88>

080098dc <_svfiprintf_r>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	4698      	mov	r8, r3
 80098e2:	898b      	ldrh	r3, [r1, #12]
 80098e4:	061b      	lsls	r3, r3, #24
 80098e6:	b09d      	sub	sp, #116	; 0x74
 80098e8:	4607      	mov	r7, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	d50e      	bpl.n	800990e <_svfiprintf_r+0x32>
 80098f0:	690b      	ldr	r3, [r1, #16]
 80098f2:	b963      	cbnz	r3, 800990e <_svfiprintf_r+0x32>
 80098f4:	2140      	movs	r1, #64	; 0x40
 80098f6:	f7ff ff0b 	bl	8009710 <_malloc_r>
 80098fa:	6028      	str	r0, [r5, #0]
 80098fc:	6128      	str	r0, [r5, #16]
 80098fe:	b920      	cbnz	r0, 800990a <_svfiprintf_r+0x2e>
 8009900:	230c      	movs	r3, #12
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e0d0      	b.n	8009aac <_svfiprintf_r+0x1d0>
 800990a:	2340      	movs	r3, #64	; 0x40
 800990c:	616b      	str	r3, [r5, #20]
 800990e:	2300      	movs	r3, #0
 8009910:	9309      	str	r3, [sp, #36]	; 0x24
 8009912:	2320      	movs	r3, #32
 8009914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009918:	f8cd 800c 	str.w	r8, [sp, #12]
 800991c:	2330      	movs	r3, #48	; 0x30
 800991e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ac4 <_svfiprintf_r+0x1e8>
 8009922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009926:	f04f 0901 	mov.w	r9, #1
 800992a:	4623      	mov	r3, r4
 800992c:	469a      	mov	sl, r3
 800992e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009932:	b10a      	cbz	r2, 8009938 <_svfiprintf_r+0x5c>
 8009934:	2a25      	cmp	r2, #37	; 0x25
 8009936:	d1f9      	bne.n	800992c <_svfiprintf_r+0x50>
 8009938:	ebba 0b04 	subs.w	fp, sl, r4
 800993c:	d00b      	beq.n	8009956 <_svfiprintf_r+0x7a>
 800993e:	465b      	mov	r3, fp
 8009940:	4622      	mov	r2, r4
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ff6f 	bl	8009828 <__ssputs_r>
 800994a:	3001      	adds	r0, #1
 800994c:	f000 80a9 	beq.w	8009aa2 <_svfiprintf_r+0x1c6>
 8009950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009952:	445a      	add	r2, fp
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	f89a 3000 	ldrb.w	r3, [sl]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80a1 	beq.w	8009aa2 <_svfiprintf_r+0x1c6>
 8009960:	2300      	movs	r3, #0
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800996a:	f10a 0a01 	add.w	sl, sl, #1
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	9307      	str	r3, [sp, #28]
 8009972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009976:	931a      	str	r3, [sp, #104]	; 0x68
 8009978:	4654      	mov	r4, sl
 800997a:	2205      	movs	r2, #5
 800997c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009980:	4850      	ldr	r0, [pc, #320]	; (8009ac4 <_svfiprintf_r+0x1e8>)
 8009982:	f7f6 fc35 	bl	80001f0 <memchr>
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	b9d8      	cbnz	r0, 80099c2 <_svfiprintf_r+0xe6>
 800998a:	06d0      	lsls	r0, r2, #27
 800998c:	bf44      	itt	mi
 800998e:	2320      	movmi	r3, #32
 8009990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009994:	0711      	lsls	r1, r2, #28
 8009996:	bf44      	itt	mi
 8009998:	232b      	movmi	r3, #43	; 0x2b
 800999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999e:	f89a 3000 	ldrb.w	r3, [sl]
 80099a2:	2b2a      	cmp	r3, #42	; 0x2a
 80099a4:	d015      	beq.n	80099d2 <_svfiprintf_r+0xf6>
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	4654      	mov	r4, sl
 80099aa:	2000      	movs	r0, #0
 80099ac:	f04f 0c0a 	mov.w	ip, #10
 80099b0:	4621      	mov	r1, r4
 80099b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b6:	3b30      	subs	r3, #48	; 0x30
 80099b8:	2b09      	cmp	r3, #9
 80099ba:	d94d      	bls.n	8009a58 <_svfiprintf_r+0x17c>
 80099bc:	b1b0      	cbz	r0, 80099ec <_svfiprintf_r+0x110>
 80099be:	9207      	str	r2, [sp, #28]
 80099c0:	e014      	b.n	80099ec <_svfiprintf_r+0x110>
 80099c2:	eba0 0308 	sub.w	r3, r0, r8
 80099c6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ca:	4313      	orrs	r3, r2
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	46a2      	mov	sl, r4
 80099d0:	e7d2      	b.n	8009978 <_svfiprintf_r+0x9c>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	1d19      	adds	r1, r3, #4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	9103      	str	r1, [sp, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfbb      	ittet	lt
 80099de:	425b      	neglt	r3, r3
 80099e0:	f042 0202 	orrlt.w	r2, r2, #2
 80099e4:	9307      	strge	r3, [sp, #28]
 80099e6:	9307      	strlt	r3, [sp, #28]
 80099e8:	bfb8      	it	lt
 80099ea:	9204      	strlt	r2, [sp, #16]
 80099ec:	7823      	ldrb	r3, [r4, #0]
 80099ee:	2b2e      	cmp	r3, #46	; 0x2e
 80099f0:	d10c      	bne.n	8009a0c <_svfiprintf_r+0x130>
 80099f2:	7863      	ldrb	r3, [r4, #1]
 80099f4:	2b2a      	cmp	r3, #42	; 0x2a
 80099f6:	d134      	bne.n	8009a62 <_svfiprintf_r+0x186>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	9203      	str	r2, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfb8      	it	lt
 8009a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a08:	3402      	adds	r4, #2
 8009a0a:	9305      	str	r3, [sp, #20]
 8009a0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ad4 <_svfiprintf_r+0x1f8>
 8009a10:	7821      	ldrb	r1, [r4, #0]
 8009a12:	2203      	movs	r2, #3
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7f6 fbeb 	bl	80001f0 <memchr>
 8009a1a:	b138      	cbz	r0, 8009a2c <_svfiprintf_r+0x150>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	eba0 000a 	sub.w	r0, r0, sl
 8009a22:	2240      	movs	r2, #64	; 0x40
 8009a24:	4082      	lsls	r2, r0
 8009a26:	4313      	orrs	r3, r2
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a30:	4825      	ldr	r0, [pc, #148]	; (8009ac8 <_svfiprintf_r+0x1ec>)
 8009a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a36:	2206      	movs	r2, #6
 8009a38:	f7f6 fbda 	bl	80001f0 <memchr>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d038      	beq.n	8009ab2 <_svfiprintf_r+0x1d6>
 8009a40:	4b22      	ldr	r3, [pc, #136]	; (8009acc <_svfiprintf_r+0x1f0>)
 8009a42:	bb1b      	cbnz	r3, 8009a8c <_svfiprintf_r+0x1b0>
 8009a44:	9b03      	ldr	r3, [sp, #12]
 8009a46:	3307      	adds	r3, #7
 8009a48:	f023 0307 	bic.w	r3, r3, #7
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	4433      	add	r3, r6
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	e768      	b.n	800992a <_svfiprintf_r+0x4e>
 8009a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	2001      	movs	r0, #1
 8009a60:	e7a6      	b.n	80099b0 <_svfiprintf_r+0xd4>
 8009a62:	2300      	movs	r3, #0
 8009a64:	3401      	adds	r4, #1
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f04f 0c0a 	mov.w	ip, #10
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a74:	3a30      	subs	r2, #48	; 0x30
 8009a76:	2a09      	cmp	r2, #9
 8009a78:	d903      	bls.n	8009a82 <_svfiprintf_r+0x1a6>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0c6      	beq.n	8009a0c <_svfiprintf_r+0x130>
 8009a7e:	9105      	str	r1, [sp, #20]
 8009a80:	e7c4      	b.n	8009a0c <_svfiprintf_r+0x130>
 8009a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a86:	4604      	mov	r4, r0
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e7f0      	b.n	8009a6e <_svfiprintf_r+0x192>
 8009a8c:	ab03      	add	r3, sp, #12
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	462a      	mov	r2, r5
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <_svfiprintf_r+0x1f4>)
 8009a94:	a904      	add	r1, sp, #16
 8009a96:	4638      	mov	r0, r7
 8009a98:	f3af 8000 	nop.w
 8009a9c:	1c42      	adds	r2, r0, #1
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	d1d6      	bne.n	8009a50 <_svfiprintf_r+0x174>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	065b      	lsls	r3, r3, #25
 8009aa6:	f53f af2d 	bmi.w	8009904 <_svfiprintf_r+0x28>
 8009aaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aac:	b01d      	add	sp, #116	; 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <_svfiprintf_r+0x1f4>)
 8009aba:	a904      	add	r1, sp, #16
 8009abc:	4638      	mov	r0, r7
 8009abe:	f000 f879 	bl	8009bb4 <_printf_i>
 8009ac2:	e7eb      	b.n	8009a9c <_svfiprintf_r+0x1c0>
 8009ac4:	08009f74 	.word	0x08009f74
 8009ac8:	08009f7e 	.word	0x08009f7e
 8009acc:	00000000 	.word	0x00000000
 8009ad0:	08009829 	.word	0x08009829
 8009ad4:	08009f7a 	.word	0x08009f7a

08009ad8 <_printf_common>:
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	4616      	mov	r6, r2
 8009ade:	4699      	mov	r9, r3
 8009ae0:	688a      	ldr	r2, [r1, #8]
 8009ae2:	690b      	ldr	r3, [r1, #16]
 8009ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	bfb8      	it	lt
 8009aec:	4613      	movlt	r3, r2
 8009aee:	6033      	str	r3, [r6, #0]
 8009af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af4:	4607      	mov	r7, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	b10a      	cbz	r2, 8009afe <_printf_common+0x26>
 8009afa:	3301      	adds	r3, #1
 8009afc:	6033      	str	r3, [r6, #0]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	0699      	lsls	r1, r3, #26
 8009b02:	bf42      	ittt	mi
 8009b04:	6833      	ldrmi	r3, [r6, #0]
 8009b06:	3302      	addmi	r3, #2
 8009b08:	6033      	strmi	r3, [r6, #0]
 8009b0a:	6825      	ldr	r5, [r4, #0]
 8009b0c:	f015 0506 	ands.w	r5, r5, #6
 8009b10:	d106      	bne.n	8009b20 <_printf_common+0x48>
 8009b12:	f104 0a19 	add.w	sl, r4, #25
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	6832      	ldr	r2, [r6, #0]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dc26      	bgt.n	8009b6e <_printf_common+0x96>
 8009b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b24:	1e13      	subs	r3, r2, #0
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	bf18      	it	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	0692      	lsls	r2, r2, #26
 8009b2e:	d42b      	bmi.n	8009b88 <_printf_common+0xb0>
 8009b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b34:	4649      	mov	r1, r9
 8009b36:	4638      	mov	r0, r7
 8009b38:	47c0      	blx	r8
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d01e      	beq.n	8009b7c <_printf_common+0xa4>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	6922      	ldr	r2, [r4, #16]
 8009b42:	f003 0306 	and.w	r3, r3, #6
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	bf02      	ittt	eq
 8009b4a:	68e5      	ldreq	r5, [r4, #12]
 8009b4c:	6833      	ldreq	r3, [r6, #0]
 8009b4e:	1aed      	subeq	r5, r5, r3
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	bf0c      	ite	eq
 8009b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b58:	2500      	movne	r5, #0
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	bfc4      	itt	gt
 8009b5e:	1a9b      	subgt	r3, r3, r2
 8009b60:	18ed      	addgt	r5, r5, r3
 8009b62:	2600      	movs	r6, #0
 8009b64:	341a      	adds	r4, #26
 8009b66:	42b5      	cmp	r5, r6
 8009b68:	d11a      	bne.n	8009ba0 <_printf_common+0xc8>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e008      	b.n	8009b80 <_printf_common+0xa8>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4652      	mov	r2, sl
 8009b72:	4649      	mov	r1, r9
 8009b74:	4638      	mov	r0, r7
 8009b76:	47c0      	blx	r8
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d103      	bne.n	8009b84 <_printf_common+0xac>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	3501      	adds	r5, #1
 8009b86:	e7c6      	b.n	8009b16 <_printf_common+0x3e>
 8009b88:	18e1      	adds	r1, r4, r3
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	2030      	movs	r0, #48	; 0x30
 8009b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b92:	4422      	add	r2, r4
 8009b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b9c:	3302      	adds	r3, #2
 8009b9e:	e7c7      	b.n	8009b30 <_printf_common+0x58>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	47c0      	blx	r8
 8009baa:	3001      	adds	r0, #1
 8009bac:	d0e6      	beq.n	8009b7c <_printf_common+0xa4>
 8009bae:	3601      	adds	r6, #1
 8009bb0:	e7d9      	b.n	8009b66 <_printf_common+0x8e>
	...

08009bb4 <_printf_i>:
 8009bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	7e0f      	ldrb	r7, [r1, #24]
 8009bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bbc:	2f78      	cmp	r7, #120	; 0x78
 8009bbe:	4691      	mov	r9, r2
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	469a      	mov	sl, r3
 8009bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bca:	d807      	bhi.n	8009bdc <_printf_i+0x28>
 8009bcc:	2f62      	cmp	r7, #98	; 0x62
 8009bce:	d80a      	bhi.n	8009be6 <_printf_i+0x32>
 8009bd0:	2f00      	cmp	r7, #0
 8009bd2:	f000 80d4 	beq.w	8009d7e <_printf_i+0x1ca>
 8009bd6:	2f58      	cmp	r7, #88	; 0x58
 8009bd8:	f000 80c0 	beq.w	8009d5c <_printf_i+0x1a8>
 8009bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be4:	e03a      	b.n	8009c5c <_printf_i+0xa8>
 8009be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bea:	2b15      	cmp	r3, #21
 8009bec:	d8f6      	bhi.n	8009bdc <_printf_i+0x28>
 8009bee:	a101      	add	r1, pc, #4	; (adr r1, 8009bf4 <_printf_i+0x40>)
 8009bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	08009c61 	.word	0x08009c61
 8009bfc:	08009bdd 	.word	0x08009bdd
 8009c00:	08009bdd 	.word	0x08009bdd
 8009c04:	08009bdd 	.word	0x08009bdd
 8009c08:	08009bdd 	.word	0x08009bdd
 8009c0c:	08009c61 	.word	0x08009c61
 8009c10:	08009bdd 	.word	0x08009bdd
 8009c14:	08009bdd 	.word	0x08009bdd
 8009c18:	08009bdd 	.word	0x08009bdd
 8009c1c:	08009bdd 	.word	0x08009bdd
 8009c20:	08009d65 	.word	0x08009d65
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009d1f 	.word	0x08009d1f
 8009c2c:	08009bdd 	.word	0x08009bdd
 8009c30:	08009bdd 	.word	0x08009bdd
 8009c34:	08009d87 	.word	0x08009d87
 8009c38:	08009bdd 	.word	0x08009bdd
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009bdd 	.word	0x08009bdd
 8009c44:	08009bdd 	.word	0x08009bdd
 8009c48:	08009d27 	.word	0x08009d27
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	1d1a      	adds	r2, r3, #4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	602a      	str	r2, [r5, #0]
 8009c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e09f      	b.n	8009da0 <_printf_i+0x1ec>
 8009c60:	6820      	ldr	r0, [r4, #0]
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	0607      	lsls	r7, r0, #24
 8009c66:	f103 0104 	add.w	r1, r3, #4
 8009c6a:	6029      	str	r1, [r5, #0]
 8009c6c:	d501      	bpl.n	8009c72 <_printf_i+0xbe>
 8009c6e:	681e      	ldr	r6, [r3, #0]
 8009c70:	e003      	b.n	8009c7a <_printf_i+0xc6>
 8009c72:	0646      	lsls	r6, r0, #25
 8009c74:	d5fb      	bpl.n	8009c6e <_printf_i+0xba>
 8009c76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	da03      	bge.n	8009c86 <_printf_i+0xd2>
 8009c7e:	232d      	movs	r3, #45	; 0x2d
 8009c80:	4276      	negs	r6, r6
 8009c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c86:	485a      	ldr	r0, [pc, #360]	; (8009df0 <_printf_i+0x23c>)
 8009c88:	230a      	movs	r3, #10
 8009c8a:	e012      	b.n	8009cb2 <_printf_i+0xfe>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	1d19      	adds	r1, r3, #4
 8009c92:	6029      	str	r1, [r5, #0]
 8009c94:	0605      	lsls	r5, r0, #24
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0xe8>
 8009c98:	681e      	ldr	r6, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0xee>
 8009c9c:	0641      	lsls	r1, r0, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0xe4>
 8009ca0:	881e      	ldrh	r6, [r3, #0]
 8009ca2:	4853      	ldr	r0, [pc, #332]	; (8009df0 <_printf_i+0x23c>)
 8009ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ca6:	bf0c      	ite	eq
 8009ca8:	2308      	moveq	r3, #8
 8009caa:	230a      	movne	r3, #10
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cb2:	6865      	ldr	r5, [r4, #4]
 8009cb4:	60a5      	str	r5, [r4, #8]
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90e      	cbnz	r6, 8009cc8 <_printf_i+0x114>
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	d04b      	beq.n	8009d60 <_printf_i+0x1ac>
 8009cc8:	4615      	mov	r5, r2
 8009cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cce:	fb03 6711 	mls	r7, r3, r1, r6
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cd8:	4637      	mov	r7, r6
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460e      	mov	r6, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x116>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x148>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07de      	lsls	r6, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x148>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	; 0x30
 8009cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cfc:	1b52      	subs	r2, r2, r5
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee4 	bl	8009ad8 <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14a      	bne.n	8009daa <_printf_i+0x1f6>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	4833      	ldr	r0, [pc, #204]	; (8009df4 <_printf_i+0x240>)
 8009d28:	2778      	movs	r7, #120	; 0x78
 8009d2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6829      	ldr	r1, [r5, #0]
 8009d32:	061f      	lsls	r7, r3, #24
 8009d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d38:	d402      	bmi.n	8009d40 <_printf_i+0x18c>
 8009d3a:	065f      	lsls	r7, r3, #25
 8009d3c:	bf48      	it	mi
 8009d3e:	b2b6      	uxthmi	r6, r6
 8009d40:	07df      	lsls	r7, r3, #31
 8009d42:	bf48      	it	mi
 8009d44:	f043 0320 	orrmi.w	r3, r3, #32
 8009d48:	6029      	str	r1, [r5, #0]
 8009d4a:	bf48      	it	mi
 8009d4c:	6023      	strmi	r3, [r4, #0]
 8009d4e:	b91e      	cbnz	r6, 8009d58 <_printf_i+0x1a4>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	f023 0320 	bic.w	r3, r3, #32
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	2310      	movs	r3, #16
 8009d5a:	e7a7      	b.n	8009cac <_printf_i+0xf8>
 8009d5c:	4824      	ldr	r0, [pc, #144]	; (8009df0 <_printf_i+0x23c>)
 8009d5e:	e7e4      	b.n	8009d2a <_printf_i+0x176>
 8009d60:	4615      	mov	r5, r2
 8009d62:	e7bd      	b.n	8009ce0 <_printf_i+0x12c>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	6826      	ldr	r6, [r4, #0]
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	1d18      	adds	r0, r3, #4
 8009d6c:	6028      	str	r0, [r5, #0]
 8009d6e:	0635      	lsls	r5, r6, #24
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	d501      	bpl.n	8009d78 <_printf_i+0x1c4>
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e002      	b.n	8009d7e <_printf_i+0x1ca>
 8009d78:	0670      	lsls	r0, r6, #25
 8009d7a:	d5fb      	bpl.n	8009d74 <_printf_i+0x1c0>
 8009d7c:	8019      	strh	r1, [r3, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	4615      	mov	r5, r2
 8009d84:	e7bc      	b.n	8009d00 <_printf_i+0x14c>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	602a      	str	r2, [r5, #0]
 8009d8c:	681d      	ldr	r5, [r3, #0]
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7f6 fa2c 	bl	80001f0 <memchr>
 8009d98:	b108      	cbz	r0, 8009d9e <_printf_i+0x1ea>
 8009d9a:	1b40      	subs	r0, r0, r5
 8009d9c:	6060      	str	r0, [r4, #4]
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da8:	e7aa      	b.n	8009d00 <_printf_i+0x14c>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	462a      	mov	r2, r5
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0ad      	beq.n	8009d14 <_printf_i+0x160>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d413      	bmi.n	8009de6 <_printf_i+0x232>
 8009dbe:	68e0      	ldr	r0, [r4, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4618      	movlt	r0, r3
 8009dc8:	e7a6      	b.n	8009d18 <_printf_i+0x164>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d09d      	beq.n	8009d14 <_printf_i+0x160>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dcf2      	bgt.n	8009dca <_printf_i+0x216>
 8009de4:	e7eb      	b.n	8009dbe <_printf_i+0x20a>
 8009de6:	2500      	movs	r5, #0
 8009de8:	f104 0619 	add.w	r6, r4, #25
 8009dec:	e7f5      	b.n	8009dda <_printf_i+0x226>
 8009dee:	bf00      	nop
 8009df0:	08009f85 	.word	0x08009f85
 8009df4:	08009f96 	.word	0x08009f96

08009df8 <memmove>:
 8009df8:	4288      	cmp	r0, r1
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	eb01 0402 	add.w	r4, r1, r2
 8009e00:	d902      	bls.n	8009e08 <memmove+0x10>
 8009e02:	4284      	cmp	r4, r0
 8009e04:	4623      	mov	r3, r4
 8009e06:	d807      	bhi.n	8009e18 <memmove+0x20>
 8009e08:	1e43      	subs	r3, r0, #1
 8009e0a:	42a1      	cmp	r1, r4
 8009e0c:	d008      	beq.n	8009e20 <memmove+0x28>
 8009e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e16:	e7f8      	b.n	8009e0a <memmove+0x12>
 8009e18:	4402      	add	r2, r0
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	428a      	cmp	r2, r1
 8009e1e:	d100      	bne.n	8009e22 <memmove+0x2a>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e2a:	e7f7      	b.n	8009e1c <memmove+0x24>

08009e2c <_sbrk_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	; (8009e48 <_sbrk_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f7 f8da 	bl	8000ff0 <_sbrk>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_sbrk_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_sbrk_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	2000b4a4 	.word	0x2000b4a4

08009e4c <memcpy>:
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	4770      	bx	lr
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e62:	4291      	cmp	r1, r2
 8009e64:	d1f9      	bne.n	8009e5a <memcpy+0xe>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <_realloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4614      	mov	r4, r2
 8009e70:	460e      	mov	r6, r1
 8009e72:	b921      	cbnz	r1, 8009e7e <_realloc_r+0x16>
 8009e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e78:	4611      	mov	r1, r2
 8009e7a:	f7ff bc49 	b.w	8009710 <_malloc_r>
 8009e7e:	b92a      	cbnz	r2, 8009e8c <_realloc_r+0x24>
 8009e80:	f7ff fbda 	bl	8009638 <_free_r>
 8009e84:	4625      	mov	r5, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	f000 f81b 	bl	8009ec6 <_malloc_usable_size_r>
 8009e90:	4284      	cmp	r4, r0
 8009e92:	4607      	mov	r7, r0
 8009e94:	d802      	bhi.n	8009e9c <_realloc_r+0x34>
 8009e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e9a:	d812      	bhi.n	8009ec2 <_realloc_r+0x5a>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff fc36 	bl	8009710 <_malloc_r>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0ed      	beq.n	8009e86 <_realloc_r+0x1e>
 8009eaa:	42bc      	cmp	r4, r7
 8009eac:	4622      	mov	r2, r4
 8009eae:	4631      	mov	r1, r6
 8009eb0:	bf28      	it	cs
 8009eb2:	463a      	movcs	r2, r7
 8009eb4:	f7ff ffca 	bl	8009e4c <memcpy>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f7ff fbbc 	bl	8009638 <_free_r>
 8009ec0:	e7e1      	b.n	8009e86 <_realloc_r+0x1e>
 8009ec2:	4635      	mov	r5, r6
 8009ec4:	e7df      	b.n	8009e86 <_realloc_r+0x1e>

08009ec6 <_malloc_usable_size_r>:
 8009ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eca:	1f18      	subs	r0, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfbc      	itt	lt
 8009ed0:	580b      	ldrlt	r3, [r1, r0]
 8009ed2:	18c0      	addlt	r0, r0, r3
 8009ed4:	4770      	bx	lr
	...

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
